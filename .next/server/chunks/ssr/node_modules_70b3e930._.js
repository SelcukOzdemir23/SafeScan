module.exports = {

"[project]/node_modules/react-qr-reader/dist/esm/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "QrReader": (()=>jo),
    "useQrReader": (()=>Go)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
;
;
var n, o, i = (n = function(t, e) {
    return n = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(t, e) {
        t.__proto__ = e;
    } || function(t, e) {
        for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
    }, n(t, e);
}, function(t, e) {
    function r() {
        this.constructor = t;
    }
    n(t, e), t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, new r);
}), a = function(t) {
    function e(e) {
        var r, n, o, i = this.constructor, a = t.call(this, e) || this;
        return Object.defineProperty(a, "name", {
            value: i.name,
            enumerable: !1,
            configurable: !0
        }), r = a, n = i.prototype, (o = Object.setPrototypeOf) ? o(r, n) : r.__proto__ = n, function(t, e) {
            void 0 === e && (e = t.constructor);
            var r = Error.captureStackTrace;
            r && r(t, e);
        }(a), a;
    }
    return i(e, t), e;
}(Error), u = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), s = function(t) {
    function e(e) {
        void 0 === e && (e = void 0);
        var r = t.call(this, e) || this;
        return r.message = e, r;
    }
    return u(e, t), e.prototype.getKind = function() {
        return this.constructor.kind;
    }, e.kind = "Exception", e;
}(a), c = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), f = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return c(e, t), e.kind = "ArgumentException", e;
}(s), h = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), l = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return h(e, t), e.kind = "IllegalArgumentException", e;
}(s), d = function() {
    function t(t) {
        if (this.binarizer = t, null === t) throw new l("Binarizer must be non-null.");
    }
    return t.prototype.getWidth = function() {
        return this.binarizer.getWidth();
    }, t.prototype.getHeight = function() {
        return this.binarizer.getHeight();
    }, t.prototype.getBlackRow = function(t, e) {
        return this.binarizer.getBlackRow(t, e);
    }, t.prototype.getBlackMatrix = function() {
        return null !== this.matrix && void 0 !== this.matrix || (this.matrix = this.binarizer.getBlackMatrix()), this.matrix;
    }, t.prototype.isCropSupported = function() {
        return this.binarizer.getLuminanceSource().isCropSupported();
    }, t.prototype.crop = function(e, r, n, o) {
        var i = this.binarizer.getLuminanceSource().crop(e, r, n, o);
        return new t(this.binarizer.createBinarizer(i));
    }, t.prototype.isRotateSupported = function() {
        return this.binarizer.getLuminanceSource().isRotateSupported();
    }, t.prototype.rotateCounterClockwise = function() {
        var e = this.binarizer.getLuminanceSource().rotateCounterClockwise();
        return new t(this.binarizer.createBinarizer(e));
    }, t.prototype.rotateCounterClockwise45 = function() {
        var e = this.binarizer.getLuminanceSource().rotateCounterClockwise45();
        return new t(this.binarizer.createBinarizer(e));
    }, t.prototype.toString = function() {
        try {
            return this.getBlackMatrix().toString();
        } catch (t) {
            return "";
        }
    }, t;
}(), p = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), g = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return p(e, t), e.getChecksumInstance = function() {
        return new e;
    }, e.kind = "ChecksumException", e;
}(s), y = function() {
    function t(t) {
        this.source = t;
    }
    return t.prototype.getLuminanceSource = function() {
        return this.source;
    }, t.prototype.getWidth = function() {
        return this.source.getWidth();
    }, t.prototype.getHeight = function() {
        return this.source.getHeight();
    }, t;
}(), w = function() {
    function t() {}
    return t.arraycopy = function(t, e, r, n, o) {
        for(; o--;)r[n++] = t[e++];
    }, t.currentTimeMillis = function() {
        return Date.now();
    }, t;
}(), _ = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), v = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return _(e, t), e.kind = "IndexOutOfBoundsException", e;
}(s), m = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), A = function(t) {
    function e(e, r) {
        void 0 === e && (e = void 0), void 0 === r && (r = void 0);
        var n = t.call(this, r) || this;
        return n.index = e, n.message = r, n;
    }
    return m(e, t), e.kind = "ArrayIndexOutOfBoundsException", e;
}(v), E = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, C = function() {
    function t() {}
    return t.fill = function(t, e) {
        for(var r = 0, n = t.length; r < n; r++)t[r] = e;
    }, t.fillWithin = function(e, r, n, o) {
        t.rangeCheck(e.length, r, n);
        for(var i = r; i < n; i++)e[i] = o;
    }, t.rangeCheck = function(t, e, r) {
        if (e > r) throw new l("fromIndex(" + e + ") > toIndex(" + r + ")");
        if (e < 0) throw new A(e);
        if (r > t) throw new A(r);
    }, t.asList = function() {
        for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];
        return t;
    }, t.create = function(t, e, r) {
        return Array.from({
            length: t
        }).map(function(t) {
            return Array.from({
                length: e
            }).fill(r);
        });
    }, t.createInt32Array = function(t, e, r) {
        return Array.from({
            length: t
        }).map(function(t) {
            return Int32Array.from({
                length: e
            }).fill(r);
        });
    }, t.equals = function(t, e) {
        if (!t) return !1;
        if (!e) return !1;
        if (!t.length) return !1;
        if (!e.length) return !1;
        if (t.length !== e.length) return !1;
        for(var r = 0, n = t.length; r < n; r++)if (t[r] !== e[r]) return !1;
        return !0;
    }, t.hashCode = function(t) {
        var e, r;
        if (null === t) return 0;
        var n = 1;
        try {
            for(var o = E(t), i = o.next(); !i.done; i = o.next()){
                n = 31 * n + i.value;
            }
        } catch (t) {
            e = {
                error: t
            };
        } finally{
            try {
                i && !i.done && (r = o.return) && r.call(o);
            } finally{
                if (e) throw e.error;
            }
        }
        return n;
    }, t.fillUint8Array = function(t, e) {
        for(var r = 0; r !== t.length; r++)t[r] = e;
    }, t.copyOf = function(t, e) {
        return t.slice(0, e);
    }, t.copyOfUint8Array = function(t, e) {
        if (t.length <= e) {
            var r = new Uint8Array(e);
            return r.set(t), r;
        }
        return t.slice(0, e);
    }, t.copyOfRange = function(t, e, r) {
        var n = r - e, o = new Int32Array(n);
        return w.arraycopy(t, e, o, 0, n), o;
    }, t.binarySearch = function(e, r, n) {
        void 0 === n && (n = t.numberComparator);
        for(var o = 0, i = e.length - 1; o <= i;){
            var a = i + o >> 1, u = n(r, e[a]);
            if (u > 0) o = a + 1;
            else {
                if (!(u < 0)) return a;
                i = a - 1;
            }
        }
        return -o - 1;
    }, t.numberComparator = function(t, e) {
        return t - e;
    }, t;
}(), I = function() {
    function t() {}
    return t.numberOfTrailingZeros = function(t) {
        var e;
        if (0 === t) return 32;
        var r = 31;
        return 0 !== (e = t << 16) && (r -= 16, t = e), 0 !== (e = t << 8) && (r -= 8, t = e), 0 !== (e = t << 4) && (r -= 4, t = e), 0 !== (e = t << 2) && (r -= 2, t = e), r - (t << 1 >>> 31);
    }, t.numberOfLeadingZeros = function(t) {
        if (0 === t) return 32;
        var e = 1;
        return t >>> 16 == 0 && (e += 16, t <<= 16), t >>> 24 == 0 && (e += 8, t <<= 8), t >>> 28 == 0 && (e += 4, t <<= 4), t >>> 30 == 0 && (e += 2, t <<= 2), e -= t >>> 31;
    }, t.toHexString = function(t) {
        return t.toString(16);
    }, t.toBinaryString = function(t) {
        return String(parseInt(String(t), 2));
    }, t.bitCount = function(t) {
        return t = (t = (858993459 & (t -= t >>> 1 & 1431655765)) + (t >>> 2 & 858993459)) + (t >>> 4) & 252645135, t += t >>> 8, 63 & (t += t >>> 16);
    }, t.truncDivision = function(t, e) {
        return Math.trunc(t / e);
    }, t.parseInt = function(t, e) {
        return void 0 === e && (e = void 0), parseInt(t, e);
    }, t.MIN_VALUE_32_BITS = -2147483648, t.MAX_VALUE = Number.MAX_SAFE_INTEGER, t;
}(), S = function() {
    function t(e, r) {
        void 0 === e ? (this.size = 0, this.bits = new Int32Array(1)) : (this.size = e, this.bits = null == r ? t.makeArray(e) : r);
    }
    return t.prototype.getSize = function() {
        return this.size;
    }, t.prototype.getSizeInBytes = function() {
        return Math.floor((this.size + 7) / 8);
    }, t.prototype.ensureCapacity = function(e) {
        if (e > 32 * this.bits.length) {
            var r = t.makeArray(e);
            w.arraycopy(this.bits, 0, r, 0, this.bits.length), this.bits = r;
        }
    }, t.prototype.get = function(t) {
        return 0 != (this.bits[Math.floor(t / 32)] & 1 << (31 & t));
    }, t.prototype.set = function(t) {
        this.bits[Math.floor(t / 32)] |= 1 << (31 & t);
    }, t.prototype.flip = function(t) {
        this.bits[Math.floor(t / 32)] ^= 1 << (31 & t);
    }, t.prototype.getNextSet = function(t) {
        var e = this.size;
        if (t >= e) return e;
        var r = this.bits, n = Math.floor(t / 32), o = r[n];
        o &= ~((1 << (31 & t)) - 1);
        for(var i = r.length; 0 === o;){
            if (++n === i) return e;
            o = r[n];
        }
        var a = 32 * n + I.numberOfTrailingZeros(o);
        return a > e ? e : a;
    }, t.prototype.getNextUnset = function(t) {
        var e = this.size;
        if (t >= e) return e;
        var r = this.bits, n = Math.floor(t / 32), o = ~r[n];
        o &= ~((1 << (31 & t)) - 1);
        for(var i = r.length; 0 === o;){
            if (++n === i) return e;
            o = ~r[n];
        }
        var a = 32 * n + I.numberOfTrailingZeros(o);
        return a > e ? e : a;
    }, t.prototype.setBulk = function(t, e) {
        this.bits[Math.floor(t / 32)] = e;
    }, t.prototype.setRange = function(t, e) {
        if (e < t || t < 0 || e > this.size) throw new l;
        if (e !== t) {
            e--;
            for(var r = Math.floor(t / 32), n = Math.floor(e / 32), o = this.bits, i = r; i <= n; i++){
                var a = (2 << (i < n ? 31 : 31 & e)) - (1 << (i > r ? 0 : 31 & t));
                o[i] |= a;
            }
        }
    }, t.prototype.clear = function() {
        for(var t = this.bits.length, e = this.bits, r = 0; r < t; r++)e[r] = 0;
    }, t.prototype.isRange = function(t, e, r) {
        if (e < t || t < 0 || e > this.size) throw new l;
        if (e === t) return !0;
        e--;
        for(var n = Math.floor(t / 32), o = Math.floor(e / 32), i = this.bits, a = n; a <= o; a++){
            var u = (2 << (a < o ? 31 : 31 & e)) - (1 << (a > n ? 0 : 31 & t)) & 4294967295;
            if ((i[a] & u) !== (r ? u : 0)) return !1;
        }
        return !0;
    }, t.prototype.appendBit = function(t) {
        this.ensureCapacity(this.size + 1), t && (this.bits[Math.floor(this.size / 32)] |= 1 << (31 & this.size)), this.size++;
    }, t.prototype.appendBits = function(t, e) {
        if (e < 0 || e > 32) throw new l("Num bits must be between 0 and 32");
        this.ensureCapacity(this.size + e);
        for(var r = e; r > 0; r--)this.appendBit(1 == (t >> r - 1 & 1));
    }, t.prototype.appendBitArray = function(t) {
        var e = t.size;
        this.ensureCapacity(this.size + e);
        for(var r = 0; r < e; r++)this.appendBit(t.get(r));
    }, t.prototype.xor = function(t) {
        if (this.size !== t.size) throw new l("Sizes don't match");
        for(var e = this.bits, r = 0, n = e.length; r < n; r++)e[r] ^= t.bits[r];
    }, t.prototype.toBytes = function(t, e, r, n) {
        for(var o = 0; o < n; o++){
            for(var i = 0, a = 0; a < 8; a++)this.get(t) && (i |= 1 << 7 - a), t++;
            e[r + o] = i;
        }
    }, t.prototype.getBitArray = function() {
        return this.bits;
    }, t.prototype.reverse = function() {
        for(var t = new Int32Array(this.bits.length), e = Math.floor((this.size - 1) / 32), r = e + 1, n = this.bits, o = 0; o < r; o++){
            var i = n[o];
            i = (i = (i = (i = (i = i >> 1 & 1431655765 | (1431655765 & i) << 1) >> 2 & 858993459 | (858993459 & i) << 2) >> 4 & 252645135 | (252645135 & i) << 4) >> 8 & 16711935 | (16711935 & i) << 8) >> 16 & 65535 | (65535 & i) << 16, t[e - o] = i;
        }
        if (this.size !== 32 * r) {
            var a = 32 * r - this.size, u = t[0] >>> a;
            for(o = 1; o < r; o++){
                var s = t[o];
                u |= s << 32 - a, t[o - 1] = u, u = s >>> a;
            }
            t[r - 1] = u;
        }
        this.bits = t;
    }, t.makeArray = function(t) {
        return new Int32Array(Math.floor((t + 31) / 32));
    }, t.prototype.equals = function(e) {
        if (!(e instanceof t)) return !1;
        var r = e;
        return this.size === r.size && C.equals(this.bits, r.bits);
    }, t.prototype.hashCode = function() {
        return 31 * this.size + C.hashCode(this.bits);
    }, t.prototype.toString = function() {
        for(var t = "", e = 0, r = this.size; e < r; e++)0 == (7 & e) && (t += " "), t += this.get(e) ? "X" : ".";
        return t;
    }, t.prototype.clone = function() {
        return new t(this.size, this.bits.slice());
    }, t;
}();
!function(t) {
    t[t.OTHER = 0] = "OTHER", t[t.PURE_BARCODE = 1] = "PURE_BARCODE", t[t.POSSIBLE_FORMATS = 2] = "POSSIBLE_FORMATS", t[t.TRY_HARDER = 3] = "TRY_HARDER", t[t.CHARACTER_SET = 4] = "CHARACTER_SET", t[t.ALLOWED_LENGTHS = 5] = "ALLOWED_LENGTHS", t[t.ASSUME_CODE_39_CHECK_DIGIT = 6] = "ASSUME_CODE_39_CHECK_DIGIT", t[t.ASSUME_GS1 = 7] = "ASSUME_GS1", t[t.RETURN_CODABAR_START_END = 8] = "RETURN_CODABAR_START_END", t[t.NEED_RESULT_POINT_CALLBACK = 9] = "NEED_RESULT_POINT_CALLBACK", t[t.ALLOWED_EAN_EXTENSIONS = 10] = "ALLOWED_EAN_EXTENSIONS";
}(o || (o = {}));
var O, T = o, b = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), R = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return b(e, t), e.getFormatInstance = function() {
        return new e;
    }, e.kind = "FormatException", e;
}(s), N = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
!function(t) {
    t[t.Cp437 = 0] = "Cp437", t[t.ISO8859_1 = 1] = "ISO8859_1", t[t.ISO8859_2 = 2] = "ISO8859_2", t[t.ISO8859_3 = 3] = "ISO8859_3", t[t.ISO8859_4 = 4] = "ISO8859_4", t[t.ISO8859_5 = 5] = "ISO8859_5", t[t.ISO8859_6 = 6] = "ISO8859_6", t[t.ISO8859_7 = 7] = "ISO8859_7", t[t.ISO8859_8 = 8] = "ISO8859_8", t[t.ISO8859_9 = 9] = "ISO8859_9", t[t.ISO8859_10 = 10] = "ISO8859_10", t[t.ISO8859_11 = 11] = "ISO8859_11", t[t.ISO8859_13 = 12] = "ISO8859_13", t[t.ISO8859_14 = 13] = "ISO8859_14", t[t.ISO8859_15 = 14] = "ISO8859_15", t[t.ISO8859_16 = 15] = "ISO8859_16", t[t.SJIS = 16] = "SJIS", t[t.Cp1250 = 17] = "Cp1250", t[t.Cp1251 = 18] = "Cp1251", t[t.Cp1252 = 19] = "Cp1252", t[t.Cp1256 = 20] = "Cp1256", t[t.UnicodeBigUnmarked = 21] = "UnicodeBigUnmarked", t[t.UTF8 = 22] = "UTF8", t[t.ASCII = 23] = "ASCII", t[t.Big5 = 24] = "Big5", t[t.GB18030 = 25] = "GB18030", t[t.EUC_KR = 26] = "EUC_KR";
}(O || (O = {}));
var D, P = function() {
    function t(e, r, n) {
        for(var o, i, a = [], u = 3; u < arguments.length; u++)a[u - 3] = arguments[u];
        this.valueIdentifier = e, this.name = n, this.values = "number" == typeof r ? Int32Array.from([
            r
        ]) : r, this.otherEncodingNames = a, t.VALUE_IDENTIFIER_TO_ECI.set(e, this), t.NAME_TO_ECI.set(n, this);
        for(var s = this.values, c = 0, f = s.length; c !== f; c++){
            var h = s[c];
            t.VALUES_TO_ECI.set(h, this);
        }
        try {
            for(var l = N(a), d = l.next(); !d.done; d = l.next()){
                var p = d.value;
                t.NAME_TO_ECI.set(p, this);
            }
        } catch (t) {
            o = {
                error: t
            };
        } finally{
            try {
                d && !d.done && (i = l.return) && i.call(l);
            } finally{
                if (o) throw o.error;
            }
        }
    }
    return t.prototype.getValueIdentifier = function() {
        return this.valueIdentifier;
    }, t.prototype.getName = function() {
        return this.name;
    }, t.prototype.getValue = function() {
        return this.values[0];
    }, t.getCharacterSetECIByValue = function(e) {
        if (e < 0 || e >= 900) throw new R("incorect value");
        var r = t.VALUES_TO_ECI.get(e);
        if (void 0 === r) throw new R("incorect value");
        return r;
    }, t.getCharacterSetECIByName = function(e) {
        var r = t.NAME_TO_ECI.get(e);
        if (void 0 === r) throw new R("incorect value");
        return r;
    }, t.prototype.equals = function(e) {
        if (!(e instanceof t)) return !1;
        var r = e;
        return this.getName() === r.getName();
    }, t.VALUE_IDENTIFIER_TO_ECI = new Map, t.VALUES_TO_ECI = new Map, t.NAME_TO_ECI = new Map, t.Cp437 = new t(O.Cp437, Int32Array.from([
        0,
        2
    ]), "Cp437"), t.ISO8859_1 = new t(O.ISO8859_1, Int32Array.from([
        1,
        3
    ]), "ISO-8859-1", "ISO88591", "ISO8859_1"), t.ISO8859_2 = new t(O.ISO8859_2, 4, "ISO-8859-2", "ISO88592", "ISO8859_2"), t.ISO8859_3 = new t(O.ISO8859_3, 5, "ISO-8859-3", "ISO88593", "ISO8859_3"), t.ISO8859_4 = new t(O.ISO8859_4, 6, "ISO-8859-4", "ISO88594", "ISO8859_4"), t.ISO8859_5 = new t(O.ISO8859_5, 7, "ISO-8859-5", "ISO88595", "ISO8859_5"), t.ISO8859_6 = new t(O.ISO8859_6, 8, "ISO-8859-6", "ISO88596", "ISO8859_6"), t.ISO8859_7 = new t(O.ISO8859_7, 9, "ISO-8859-7", "ISO88597", "ISO8859_7"), t.ISO8859_8 = new t(O.ISO8859_8, 10, "ISO-8859-8", "ISO88598", "ISO8859_8"), t.ISO8859_9 = new t(O.ISO8859_9, 11, "ISO-8859-9", "ISO88599", "ISO8859_9"), t.ISO8859_10 = new t(O.ISO8859_10, 12, "ISO-8859-10", "ISO885910", "ISO8859_10"), t.ISO8859_11 = new t(O.ISO8859_11, 13, "ISO-8859-11", "ISO885911", "ISO8859_11"), t.ISO8859_13 = new t(O.ISO8859_13, 15, "ISO-8859-13", "ISO885913", "ISO8859_13"), t.ISO8859_14 = new t(O.ISO8859_14, 16, "ISO-8859-14", "ISO885914", "ISO8859_14"), t.ISO8859_15 = new t(O.ISO8859_15, 17, "ISO-8859-15", "ISO885915", "ISO8859_15"), t.ISO8859_16 = new t(O.ISO8859_16, 18, "ISO-8859-16", "ISO885916", "ISO8859_16"), t.SJIS = new t(O.SJIS, 20, "SJIS", "Shift_JIS"), t.Cp1250 = new t(O.Cp1250, 21, "Cp1250", "windows-1250"), t.Cp1251 = new t(O.Cp1251, 22, "Cp1251", "windows-1251"), t.Cp1252 = new t(O.Cp1252, 23, "Cp1252", "windows-1252"), t.Cp1256 = new t(O.Cp1256, 24, "Cp1256", "windows-1256"), t.UnicodeBigUnmarked = new t(O.UnicodeBigUnmarked, 25, "UnicodeBigUnmarked", "UTF-16BE", "UnicodeBig"), t.UTF8 = new t(O.UTF8, 26, "UTF8", "UTF-8"), t.ASCII = new t(O.ASCII, Int32Array.from([
        27,
        170
    ]), "ASCII", "US-ASCII"), t.Big5 = new t(O.Big5, 28, "Big5"), t.GB18030 = new t(O.GB18030, 29, "GB18030", "GB2312", "EUC_CN", "GBK"), t.EUC_KR = new t(O.EUC_KR, 30, "EUC_KR", "EUC-KR"), t;
}(), M = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), B = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return M(e, t), e.kind = "UnsupportedOperationException", e;
}(s), L = function() {
    function t() {}
    return t.decode = function(t, e) {
        var r = this.encodingName(e);
        return this.customDecoder ? this.customDecoder(t, r) : "undefined" == typeof TextDecoder || this.shouldDecodeOnFallback(r) ? this.decodeFallback(t, r) : new TextDecoder(r).decode(t);
    }, t.shouldDecodeOnFallback = function(e) {
        return !t.isBrowser() && "ISO-8859-1" === e;
    }, t.encode = function(t, e) {
        var r = this.encodingName(e);
        return this.customEncoder ? this.customEncoder(t, r) : "undefined" == typeof TextEncoder ? this.encodeFallback(t) : (new TextEncoder).encode(t);
    }, t.isBrowser = function() {
        return "undefined" != typeof window && "[object Window]" === ({}).toString.call(window);
    }, t.encodingName = function(t) {
        return "string" == typeof t ? t : t.getName();
    }, t.encodingCharacterSet = function(t) {
        return t instanceof P ? t : P.getCharacterSetECIByName(t);
    }, t.decodeFallback = function(e, r) {
        var n = this.encodingCharacterSet(r);
        if (t.isDecodeFallbackSupported(n)) {
            for(var o = "", i = 0, a = e.length; i < a; i++){
                var u = e[i].toString(16);
                u.length < 2 && (u = "0" + u), o += "%" + u;
            }
            return decodeURIComponent(o);
        }
        if (n.equals(P.UnicodeBigUnmarked)) return String.fromCharCode.apply(null, new Uint16Array(e.buffer));
        throw new B("Encoding " + this.encodingName(r) + " not supported by fallback.");
    }, t.isDecodeFallbackSupported = function(t) {
        return t.equals(P.UTF8) || t.equals(P.ISO8859_1) || t.equals(P.ASCII);
    }, t.encodeFallback = function(t) {
        for(var e = btoa(unescape(encodeURIComponent(t))).split(""), r = [], n = 0; n < e.length; n++)r.push(e[n].charCodeAt(0));
        return new Uint8Array(r);
    }, t;
}(), F = function() {
    function t() {}
    return t.castAsNonUtf8Char = function(t, e) {
        void 0 === e && (e = null);
        var r = e ? e.getName() : this.ISO88591;
        return L.decode(new Uint8Array([
            t
        ]), r);
    }, t.guessEncoding = function(e, r) {
        if (null != r && void 0 !== r.get(T.CHARACTER_SET)) return r.get(T.CHARACTER_SET).toString();
        for(var n = e.length, o = !0, i = !0, a = !0, u = 0, s = 0, c = 0, f = 0, h = 0, l = 0, d = 0, p = 0, g = 0, y = 0, w = 0, _ = e.length > 3 && 239 === e[0] && 187 === e[1] && 191 === e[2], v = 0; v < n && (o || i || a); v++){
            var m = 255 & e[v];
            a && (u > 0 ? 0 == (128 & m) ? a = !1 : u-- : 0 != (128 & m) && (0 == (64 & m) ? a = !1 : (u++, 0 == (32 & m) ? s++ : (u++, 0 == (16 & m) ? c++ : (u++, 0 == (8 & m) ? f++ : a = !1))))), o && (m > 127 && m < 160 ? o = !1 : m > 159 && (m < 192 || 215 === m || 247 === m) && w++), i && (h > 0 ? m < 64 || 127 === m || m > 252 ? i = !1 : h-- : 128 === m || 160 === m || m > 239 ? i = !1 : m > 160 && m < 224 ? (l++, p = 0, ++d > g && (g = d)) : m > 127 ? (h++, d = 0, ++p > y && (y = p)) : (d = 0, p = 0));
        }
        return a && u > 0 && (a = !1), i && h > 0 && (i = !1), a && (_ || s + c + f > 0) ? t.UTF8 : i && (t.ASSUME_SHIFT_JIS || g >= 3 || y >= 3) ? t.SHIFT_JIS : o && i ? 2 === g && 2 === l || 10 * w >= n ? t.SHIFT_JIS : t.ISO88591 : o ? t.ISO88591 : i ? t.SHIFT_JIS : a ? t.UTF8 : t.PLATFORM_DEFAULT_ENCODING;
    }, t.format = function(t) {
        for(var e = [], r = 1; r < arguments.length; r++)e[r - 1] = arguments[r];
        var n = -1;
        function o(t, r, o, i, a, u) {
            if ("%%" === t) return "%";
            if (void 0 !== e[++n]) {
                t = i ? parseInt(i.substr(1)) : void 0;
                var s, c = a ? parseInt(a.substr(1)) : void 0;
                switch(u){
                    case "s":
                        s = e[n];
                        break;
                    case "c":
                        s = e[n][0];
                        break;
                    case "f":
                        s = parseFloat(e[n]).toFixed(t);
                        break;
                    case "p":
                        s = parseFloat(e[n]).toPrecision(t);
                        break;
                    case "e":
                        s = parseFloat(e[n]).toExponential(t);
                        break;
                    case "x":
                        s = parseInt(e[n]).toString(c || 16);
                        break;
                    case "d":
                        s = parseFloat(parseInt(e[n], c || 10).toPrecision(t)).toFixed(0);
                }
                s = "object" == typeof s ? JSON.stringify(s) : (+s).toString(c);
                for(var f = parseInt(o), h = o && o[0] + "" == "0" ? "0" : " "; s.length < f;)s = void 0 !== r ? s + h : h + s;
                return s;
            }
        }
        var i = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;
        return t.replace(i, o);
    }, t.getBytes = function(t, e) {
        return L.encode(t, e);
    }, t.getCharCode = function(t, e) {
        return void 0 === e && (e = 0), t.charCodeAt(e);
    }, t.getCharAt = function(t) {
        return String.fromCharCode(t);
    }, t.SHIFT_JIS = P.SJIS.getName(), t.GB2312 = "GB2312", t.ISO88591 = P.ISO8859_1.getName(), t.EUC_JP = "EUC_JP", t.UTF8 = P.UTF8.getName(), t.PLATFORM_DEFAULT_ENCODING = t.UTF8, t.ASSUME_SHIFT_JIS = !1, t;
}(), k = function() {
    function t(t) {
        void 0 === t && (t = ""), this.value = t;
    }
    return t.prototype.enableDecoding = function(t) {
        return this.encoding = t, this;
    }, t.prototype.append = function(t) {
        return "string" == typeof t ? this.value += t.toString() : this.encoding ? this.value += F.castAsNonUtf8Char(t, this.encoding) : this.value += String.fromCharCode(t), this;
    }, t.prototype.appendChars = function(t, e, r) {
        for(var n = e; e < e + r; n++)this.append(t[n]);
        return this;
    }, t.prototype.length = function() {
        return this.value.length;
    }, t.prototype.charAt = function(t) {
        return this.value.charAt(t);
    }, t.prototype.deleteCharAt = function(t) {
        this.value = this.value.substr(0, t) + this.value.substring(t + 1);
    }, t.prototype.setCharAt = function(t, e) {
        this.value = this.value.substr(0, t) + e + this.value.substr(t + 1);
    }, t.prototype.substring = function(t, e) {
        return this.value.substring(t, e);
    }, t.prototype.setLengthToZero = function() {
        this.value = "";
    }, t.prototype.toString = function() {
        return this.value;
    }, t.prototype.insert = function(t, e) {
        this.value = this.value.substr(0, t) + e + this.value.substr(t + e.length);
    }, t;
}(), x = function() {
    function t(t, e, r, n) {
        if (this.width = t, this.height = e, this.rowSize = r, this.bits = n, null == e && (e = t), this.height = e, t < 1 || e < 1) throw new l("Both dimensions must be greater than 0");
        null == r && (r = Math.floor((t + 31) / 32)), this.rowSize = r, null == n && (this.bits = new Int32Array(this.rowSize * this.height));
    }
    return t.parseFromBooleanArray = function(e) {
        for(var r = e.length, n = e[0].length, o = new t(n, r), i = 0; i < r; i++)for(var a = e[i], u = 0; u < n; u++)a[u] && o.set(u, i);
        return o;
    }, t.parseFromString = function(e, r, n) {
        if (null === e) throw new l("stringRepresentation cannot be null");
        for(var o = new Array(e.length), i = 0, a = 0, u = -1, s = 0, c = 0; c < e.length;)if ("\n" === e.charAt(c) || "\r" === e.charAt(c)) {
            if (i > a) {
                if (-1 === u) u = i - a;
                else if (i - a !== u) throw new l("row lengths do not match");
                a = i, s++;
            }
            c++;
        } else if (e.substring(c, c + r.length) === r) c += r.length, o[i] = !0, i++;
        else {
            if (e.substring(c, c + n.length) !== n) throw new l("illegal character encountered: " + e.substring(c));
            c += n.length, o[i] = !1, i++;
        }
        if (i > a) {
            if (-1 === u) u = i - a;
            else if (i - a !== u) throw new l("row lengths do not match");
            s++;
        }
        for(var f = new t(u, s), h = 0; h < i; h++)o[h] && f.set(Math.floor(h % u), Math.floor(h / u));
        return f;
    }, t.prototype.get = function(t, e) {
        var r = e * this.rowSize + Math.floor(t / 32);
        return 0 != (this.bits[r] >>> (31 & t) & 1);
    }, t.prototype.set = function(t, e) {
        var r = e * this.rowSize + Math.floor(t / 32);
        this.bits[r] |= 1 << (31 & t) & 4294967295;
    }, t.prototype.unset = function(t, e) {
        var r = e * this.rowSize + Math.floor(t / 32);
        this.bits[r] &= ~(1 << (31 & t) & 4294967295);
    }, t.prototype.flip = function(t, e) {
        var r = e * this.rowSize + Math.floor(t / 32);
        this.bits[r] ^= 1 << (31 & t) & 4294967295;
    }, t.prototype.xor = function(t) {
        if (this.width !== t.getWidth() || this.height !== t.getHeight() || this.rowSize !== t.getRowSize()) throw new l("input matrix dimensions do not match");
        for(var e = new S(Math.floor(this.width / 32) + 1), r = this.rowSize, n = this.bits, o = 0, i = this.height; o < i; o++)for(var a = o * r, u = t.getRow(o, e).getBitArray(), s = 0; s < r; s++)n[a + s] ^= u[s];
    }, t.prototype.clear = function() {
        for(var t = this.bits, e = t.length, r = 0; r < e; r++)t[r] = 0;
    }, t.prototype.setRegion = function(t, e, r, n) {
        if (e < 0 || t < 0) throw new l("Left and top must be nonnegative");
        if (n < 1 || r < 1) throw new l("Height and width must be at least 1");
        var o = t + r, i = e + n;
        if (i > this.height || o > this.width) throw new l("The region must fit inside the matrix");
        for(var a = this.rowSize, u = this.bits, s = e; s < i; s++)for(var c = s * a, f = t; f < o; f++)u[c + Math.floor(f / 32)] |= 1 << (31 & f) & 4294967295;
    }, t.prototype.getRow = function(t, e) {
        null == e || e.getSize() < this.width ? e = new S(this.width) : e.clear();
        for(var r = this.rowSize, n = this.bits, o = t * r, i = 0; i < r; i++)e.setBulk(32 * i, n[o + i]);
        return e;
    }, t.prototype.setRow = function(t, e) {
        w.arraycopy(e.getBitArray(), 0, this.bits, t * this.rowSize, this.rowSize);
    }, t.prototype.rotate180 = function() {
        for(var t = this.getWidth(), e = this.getHeight(), r = new S(t), n = new S(t), o = 0, i = Math.floor((e + 1) / 2); o < i; o++)r = this.getRow(o, r), n = this.getRow(e - 1 - o, n), r.reverse(), n.reverse(), this.setRow(o, n), this.setRow(e - 1 - o, r);
    }, t.prototype.getEnclosingRectangle = function() {
        for(var t = this.width, e = this.height, r = this.rowSize, n = this.bits, o = t, i = e, a = -1, u = -1, s = 0; s < e; s++)for(var c = 0; c < r; c++){
            var f = n[s * r + c];
            if (0 !== f) {
                if (s < i && (i = s), s > u && (u = s), 32 * c < o) {
                    for(var h = 0; 0 == (f << 31 - h & 4294967295);)h++;
                    32 * c + h < o && (o = 32 * c + h);
                }
                if (32 * c + 31 > a) {
                    for(h = 31; f >>> h == 0;)h--;
                    32 * c + h > a && (a = 32 * c + h);
                }
            }
        }
        return a < o || u < i ? null : Int32Array.from([
            o,
            i,
            a - o + 1,
            u - i + 1
        ]);
    }, t.prototype.getTopLeftOnBit = function() {
        for(var t = this.rowSize, e = this.bits, r = 0; r < e.length && 0 === e[r];)r++;
        if (r === e.length) return null;
        for(var n = r / t, o = r % t * 32, i = e[r], a = 0; 0 == (i << 31 - a & 4294967295);)a++;
        return o += a, Int32Array.from([
            o,
            n
        ]);
    }, t.prototype.getBottomRightOnBit = function() {
        for(var t = this.rowSize, e = this.bits, r = e.length - 1; r >= 0 && 0 === e[r];)r--;
        if (r < 0) return null;
        for(var n = Math.floor(r / t), o = 32 * Math.floor(r % t), i = e[r], a = 31; i >>> a == 0;)a--;
        return o += a, Int32Array.from([
            o,
            n
        ]);
    }, t.prototype.getWidth = function() {
        return this.width;
    }, t.prototype.getHeight = function() {
        return this.height;
    }, t.prototype.getRowSize = function() {
        return this.rowSize;
    }, t.prototype.equals = function(e) {
        if (!(e instanceof t)) return !1;
        var r = e;
        return this.width === r.width && this.height === r.height && this.rowSize === r.rowSize && C.equals(this.bits, r.bits);
    }, t.prototype.hashCode = function() {
        var t = this.width;
        return t = 31 * (t = 31 * (t = 31 * (t = 31 * t + this.width) + this.height) + this.rowSize) + C.hashCode(this.bits);
    }, t.prototype.toString = function(t, e, r) {
        return void 0 === t && (t = "X "), void 0 === e && (e = "  "), void 0 === r && (r = "\n"), this.buildToString(t, e, r);
    }, t.prototype.buildToString = function(t, e, r) {
        for(var n = new k, o = 0, i = this.height; o < i; o++){
            for(var a = 0, u = this.width; a < u; a++)n.append(this.get(a, o) ? t : e);
            n.append(r);
        }
        return n.toString();
    }, t.prototype.clone = function() {
        return new t(this.width, this.height, this.rowSize, this.bits.slice());
    }, t;
}(), V = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), U = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return V(e, t), e.getNotFoundInstance = function() {
        return new e;
    }, e.kind = "NotFoundException", e;
}(s), H = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), G = function(t) {
    function e(r) {
        var n = t.call(this, r) || this;
        return n.luminances = e.EMPTY, n.buckets = new Int32Array(e.LUMINANCE_BUCKETS), n;
    }
    return H(e, t), e.prototype.getBlackRow = function(t, r) {
        var n = this.getLuminanceSource(), o = n.getWidth();
        null == r || r.getSize() < o ? r = new S(o) : r.clear(), this.initArrays(o);
        for(var i = n.getRow(t, this.luminances), a = this.buckets, u = 0; u < o; u++)a[(255 & i[u]) >> e.LUMINANCE_SHIFT]++;
        var s = e.estimateBlackPoint(a);
        if (o < 3) for(u = 0; u < o; u++)(255 & i[u]) < s && r.set(u);
        else {
            var c = 255 & i[0], f = 255 & i[1];
            for(u = 1; u < o - 1; u++){
                var h = 255 & i[u + 1];
                (4 * f - c - h) / 2 < s && r.set(u), c = f, f = h;
            }
        }
        return r;
    }, e.prototype.getBlackMatrix = function() {
        var t = this.getLuminanceSource(), r = t.getWidth(), n = t.getHeight(), o = new x(r, n);
        this.initArrays(r);
        for(var i = this.buckets, a = 1; a < 5; a++)for(var u = Math.floor(n * a / 5), s = t.getRow(u, this.luminances), c = Math.floor(4 * r / 5), f = Math.floor(r / 5); f < c; f++){
            i[(255 & s[f]) >> e.LUMINANCE_SHIFT]++;
        }
        var h = e.estimateBlackPoint(i), l = t.getMatrix();
        for(a = 0; a < n; a++){
            var d = a * r;
            for(f = 0; f < r; f++){
                (255 & l[d + f]) < h && o.set(f, a);
            }
        }
        return o;
    }, e.prototype.createBinarizer = function(t) {
        return new e(t);
    }, e.prototype.initArrays = function(t) {
        this.luminances.length < t && (this.luminances = new Uint8ClampedArray(t));
        for(var r = this.buckets, n = 0; n < e.LUMINANCE_BUCKETS; n++)r[n] = 0;
    }, e.estimateBlackPoint = function(t) {
        for(var r = t.length, n = 0, o = 0, i = 0, a = 0; a < r; a++)t[a] > i && (o = a, i = t[a]), t[a] > n && (n = t[a]);
        var u = 0, s = 0;
        for(a = 0; a < r; a++){
            var c = a - o;
            (d = t[a] * c * c) > s && (u = a, s = d);
        }
        if (o > u) {
            var f = o;
            o = u, u = f;
        }
        if (u - o <= r / 16) throw new U;
        var h = u - 1, l = -1;
        for(a = u - 1; a > o; a--){
            var d, p = a - o;
            (d = p * p * (u - a) * (n - t[a])) > l && (h = a, l = d);
        }
        return h << e.LUMINANCE_SHIFT;
    }, e.LUMINANCE_BITS = 5, e.LUMINANCE_SHIFT = 8 - e.LUMINANCE_BITS, e.LUMINANCE_BUCKETS = 1 << e.LUMINANCE_BITS, e.EMPTY = Uint8ClampedArray.from([
        0
    ]), e;
}(y), X = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), W = function(t) {
    function e(e) {
        var r = t.call(this, e) || this;
        return r.matrix = null, r;
    }
    return X(e, t), e.prototype.getBlackMatrix = function() {
        if (null !== this.matrix) return this.matrix;
        var r = this.getLuminanceSource(), n = r.getWidth(), o = r.getHeight();
        if (n >= e.MINIMUM_DIMENSION && o >= e.MINIMUM_DIMENSION) {
            var i = r.getMatrix(), a = n >> e.BLOCK_SIZE_POWER;
            0 != (n & e.BLOCK_SIZE_MASK) && a++;
            var u = o >> e.BLOCK_SIZE_POWER;
            0 != (o & e.BLOCK_SIZE_MASK) && u++;
            var s = e.calculateBlackPoints(i, a, u, n, o), c = new x(n, o);
            e.calculateThresholdForBlock(i, a, u, n, o, s, c), this.matrix = c;
        } else this.matrix = t.prototype.getBlackMatrix.call(this);
        return this.matrix;
    }, e.prototype.createBinarizer = function(t) {
        return new e(t);
    }, e.calculateThresholdForBlock = function(t, r, n, o, i, a, u) {
        for(var s = i - e.BLOCK_SIZE, c = o - e.BLOCK_SIZE, f = 0; f < n; f++){
            var h = f << e.BLOCK_SIZE_POWER;
            h > s && (h = s);
            for(var l = e.cap(f, 2, n - 3), d = 0; d < r; d++){
                var p = d << e.BLOCK_SIZE_POWER;
                p > c && (p = c);
                for(var g = e.cap(d, 2, r - 3), y = 0, w = -2; w <= 2; w++){
                    var _ = a[l + w];
                    y += _[g - 2] + _[g - 1] + _[g] + _[g + 1] + _[g + 2];
                }
                var v = y / 25;
                e.thresholdBlock(t, p, h, v, o, u);
            }
        }
    }, e.cap = function(t, e, r) {
        return t < e ? e : t > r ? r : t;
    }, e.thresholdBlock = function(t, r, n, o, i, a) {
        for(var u = 0, s = n * i + r; u < e.BLOCK_SIZE; u++, s += i)for(var c = 0; c < e.BLOCK_SIZE; c++)(255 & t[s + c]) <= o && a.set(r + c, n + u);
    }, e.calculateBlackPoints = function(t, r, n, o, i) {
        for(var a = i - e.BLOCK_SIZE, u = o - e.BLOCK_SIZE, s = new Array(n), c = 0; c < n; c++){
            s[c] = new Int32Array(r);
            var f = c << e.BLOCK_SIZE_POWER;
            f > a && (f = a);
            for(var h = 0; h < r; h++){
                var l = h << e.BLOCK_SIZE_POWER;
                l > u && (l = u);
                for(var d = 0, p = 255, g = 0, y = 0, w = f * o + l; y < e.BLOCK_SIZE; y++, w += o){
                    for(var _ = 0; _ < e.BLOCK_SIZE; _++){
                        var v = 255 & t[w + _];
                        d += v, v < p && (p = v), v > g && (g = v);
                    }
                    if (g - p > e.MIN_DYNAMIC_RANGE) for(y++, w += o; y < e.BLOCK_SIZE; y++, w += o)for(_ = 0; _ < e.BLOCK_SIZE; _++)d += 255 & t[w + _];
                }
                var m = d >> 2 * e.BLOCK_SIZE_POWER;
                if (g - p <= e.MIN_DYNAMIC_RANGE && (m = p / 2, c > 0 && h > 0)) {
                    var A = (s[c - 1][h] + 2 * s[c][h - 1] + s[c - 1][h - 1]) / 4;
                    p < A && (m = A);
                }
                s[c][h] = m;
            }
        }
        return s;
    }, e.BLOCK_SIZE_POWER = 3, e.BLOCK_SIZE = 1 << e.BLOCK_SIZE_POWER, e.BLOCK_SIZE_MASK = e.BLOCK_SIZE - 1, e.MINIMUM_DIMENSION = 5 * e.BLOCK_SIZE, e.MIN_DYNAMIC_RANGE = 24, e;
}(G), j = function() {
    function t(t, e) {
        this.width = t, this.height = e;
    }
    return t.prototype.getWidth = function() {
        return this.width;
    }, t.prototype.getHeight = function() {
        return this.height;
    }, t.prototype.isCropSupported = function() {
        return !1;
    }, t.prototype.crop = function(t, e, r, n) {
        throw new B("This luminance source does not support cropping.");
    }, t.prototype.isRotateSupported = function() {
        return !1;
    }, t.prototype.rotateCounterClockwise = function() {
        throw new B("This luminance source does not support rotation by 90 degrees.");
    }, t.prototype.rotateCounterClockwise45 = function() {
        throw new B("This luminance source does not support rotation by 45 degrees.");
    }, t.prototype.toString = function() {
        for(var t = new Uint8ClampedArray(this.width), e = new k, r = 0; r < this.height; r++){
            for(var n = this.getRow(r, t), o = 0; o < this.width; o++){
                var i = 255 & n[o], a = void 0;
                a = i < 64 ? "#" : i < 128 ? "+" : i < 192 ? "." : " ", e.append(a);
            }
            e.append("\n");
        }
        return e.toString();
    }, t;
}(), z = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Y = function(t) {
    function e(e) {
        var r = t.call(this, e.getWidth(), e.getHeight()) || this;
        return r.delegate = e, r;
    }
    return z(e, t), e.prototype.getRow = function(t, e) {
        for(var r = this.delegate.getRow(t, e), n = this.getWidth(), o = 0; o < n; o++)r[o] = 255 - (255 & r[o]);
        return r;
    }, e.prototype.getMatrix = function() {
        for(var t = this.delegate.getMatrix(), e = this.getWidth() * this.getHeight(), r = new Uint8ClampedArray(e), n = 0; n < e; n++)r[n] = 255 - (255 & t[n]);
        return r;
    }, e.prototype.isCropSupported = function() {
        return this.delegate.isCropSupported();
    }, e.prototype.crop = function(t, r, n, o) {
        return new e(this.delegate.crop(t, r, n, o));
    }, e.prototype.isRotateSupported = function() {
        return this.delegate.isRotateSupported();
    }, e.prototype.invert = function() {
        return this.delegate;
    }, e.prototype.rotateCounterClockwise = function() {
        return new e(this.delegate.rotateCounterClockwise());
    }, e.prototype.rotateCounterClockwise45 = function() {
        return new e(this.delegate.rotateCounterClockwise45());
    }, e;
}(j), Z = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), K = function(t) {
    function e(r) {
        var n = t.call(this, r.width, r.height) || this;
        return n.canvas = r, n.tempCanvasElement = null, n.buffer = e.makeBufferFromCanvasImageData(r), n;
    }
    return Z(e, t), e.makeBufferFromCanvasImageData = function(t) {
        var r = t.getContext("2d").getImageData(0, 0, t.width, t.height);
        return e.toGrayscaleBuffer(r.data, t.width, t.height);
    }, e.toGrayscaleBuffer = function(t, e, r) {
        for(var n = new Uint8ClampedArray(e * r), o = 0, i = 0, a = t.length; o < a; o += 4, i++){
            var u = void 0;
            if (0 === t[o + 3]) u = 255;
            else u = 306 * t[o] + 601 * t[o + 1] + 117 * t[o + 2] + 512 >> 10;
            n[i] = u;
        }
        return n;
    }, e.prototype.getRow = function(t, e) {
        if (t < 0 || t >= this.getHeight()) throw new l("Requested row is outside the image: " + t);
        var r = this.getWidth(), n = t * r;
        return null === e ? e = this.buffer.slice(n, n + r) : (e.length < r && (e = new Uint8ClampedArray(r)), e.set(this.buffer.slice(n, n + r))), e;
    }, e.prototype.getMatrix = function() {
        return this.buffer;
    }, e.prototype.isCropSupported = function() {
        return !0;
    }, e.prototype.crop = function(e, r, n, o) {
        return t.prototype.crop.call(this, e, r, n, o), this;
    }, e.prototype.isRotateSupported = function() {
        return !0;
    }, e.prototype.rotateCounterClockwise = function() {
        return this.rotate(-90), this;
    }, e.prototype.rotateCounterClockwise45 = function() {
        return this.rotate(-45), this;
    }, e.prototype.getTempCanvasElement = function() {
        if (null === this.tempCanvasElement) {
            var t = this.canvas.ownerDocument.createElement("canvas");
            t.width = this.canvas.width, t.height = this.canvas.height, this.tempCanvasElement = t;
        }
        return this.tempCanvasElement;
    }, e.prototype.rotate = function(t) {
        var r = this.getTempCanvasElement(), n = r.getContext("2d"), o = t * e.DEGREE_TO_RADIANS, i = this.canvas.width, a = this.canvas.height, u = Math.ceil(Math.abs(Math.cos(o)) * i + Math.abs(Math.sin(o)) * a), s = Math.ceil(Math.abs(Math.sin(o)) * i + Math.abs(Math.cos(o)) * a);
        return r.width = u, r.height = s, n.translate(u / 2, s / 2), n.rotate(o), n.drawImage(this.canvas, i / -2, a / -2), this.buffer = e.makeBufferFromCanvasImageData(r), this;
    }, e.prototype.invert = function() {
        return new Y(this);
    }, e.DEGREE_TO_RADIANS = Math.PI / 180, e;
}(j), q = function() {
    function t(t, e, r) {
        this.deviceId = t, this.label = e, this.kind = "videoinput", this.groupId = r || void 0;
    }
    return t.prototype.toJSON = function() {
        return {
            kind: this.kind,
            groupId: this.groupId,
            deviceId: this.deviceId,
            label: this.label
        };
    }, t;
}(), Q = function(t, e, r, n) {
    return new (r || (r = Promise))(function(o, i) {
        function a(t) {
            try {
                s(n.next(t));
            } catch (t) {
                i(t);
            }
        }
        function u(t) {
            try {
                s(n.throw(t));
            } catch (t) {
                i(t);
            }
        }
        function s(t) {
            var e;
            t.done ? o(t.value) : (e = t.value, e instanceof r ? e : new r(function(t) {
                t(e);
            })).then(a, u);
        }
        s((n = n.apply(t, e || [])).next());
    });
}, J = function(t, e) {
    var r, n, o, i, a = {
        label: 0,
        sent: function() {
            if (1 & o[0]) throw o[1];
            return o[1];
        },
        trys: [],
        ops: []
    };
    return i = {
        next: u(0),
        throw: u(1),
        return: u(2)
    }, "function" == typeof Symbol && (i[Symbol.iterator] = function() {
        return this;
    }), i;
    "TURBOPACK unreachable";
    function u(i) {
        return function(u) {
            return function(i) {
                if (r) throw new TypeError("Generator is already executing.");
                for(; a;)try {
                    if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;
                    switch(n = 0, o && (i = [
                        2 & i[0],
                        o.value
                    ]), i[0]){
                        case 0:
                        case 1:
                            o = i;
                            break;
                        case 4:
                            return a.label++, {
                                value: i[1],
                                done: !1
                            };
                        case 5:
                            a.label++, n = i[1], i = [
                                0
                            ];
                            continue;
                        case 7:
                            i = a.ops.pop(), a.trys.pop();
                            continue;
                        default:
                            if (!(o = a.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
                                a = 0;
                                continue;
                            }
                            if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                                a.label = i[1];
                                break;
                            }
                            if (6 === i[0] && a.label < o[1]) {
                                a.label = o[1], o = i;
                                break;
                            }
                            if (o && a.label < o[2]) {
                                a.label = o[2], a.ops.push(i);
                                break;
                            }
                            o[2] && a.ops.pop(), a.trys.pop();
                            continue;
                    }
                    i = e.call(t, a);
                } catch (t) {
                    i = [
                        6,
                        t
                    ], n = 0;
                } finally{
                    r = o = 0;
                }
                if (5 & i[0]) throw i[1];
                return {
                    value: i[0] ? i[1] : void 0,
                    done: !0
                };
            }([
                i,
                u
            ]);
        };
    }
}, $ = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, tt = function() {
    function t(t, e, r) {
        void 0 === e && (e = 500), this.reader = t, this.timeBetweenScansMillis = e, this._hints = r, this._stopContinuousDecode = !1, this._stopAsyncDecode = !1, this._timeBetweenDecodingAttempts = 0;
    }
    return Object.defineProperty(t.prototype, "hasNavigator", {
        get: function() {
            return "undefined" != typeof navigator;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "isMediaDevicesSuported", {
        get: function() {
            return this.hasNavigator && !!navigator.mediaDevices;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "canEnumerateDevices", {
        get: function() {
            return !(!this.isMediaDevicesSuported || !navigator.mediaDevices.enumerateDevices);
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "timeBetweenDecodingAttempts", {
        get: function() {
            return this._timeBetweenDecodingAttempts;
        },
        set: function(t) {
            this._timeBetweenDecodingAttempts = t < 0 ? 0 : t;
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(t.prototype, "hints", {
        get: function() {
            return this._hints;
        },
        set: function(t) {
            this._hints = t || null;
        },
        enumerable: !1,
        configurable: !0
    }), t.prototype.listVideoInputDevices = function() {
        return Q(this, void 0, void 0, function() {
            var t, e, r, n, o, i, a, u, s, c, f, h;
            return J(this, function(l) {
                switch(l.label){
                    case 0:
                        if (!this.hasNavigator) throw new Error("Can't enumerate devices, navigator is not present.");
                        if (!this.canEnumerateDevices) throw new Error("Can't enumerate devices, method not supported.");
                        return [
                            4,
                            navigator.mediaDevices.enumerateDevices()
                        ];
                    case 1:
                        t = l.sent(), e = [];
                        try {
                            for(r = $(t), n = r.next(); !n.done; n = r.next())o = n.value, "videoinput" === (i = "video" === o.kind ? "videoinput" : o.kind) && (a = o.deviceId || o.id, u = o.label || "Video device " + (e.length + 1), s = o.groupId, c = {
                                deviceId: a,
                                label: u,
                                kind: i,
                                groupId: s
                            }, e.push(c));
                        } catch (t) {
                            f = {
                                error: t
                            };
                        } finally{
                            try {
                                n && !n.done && (h = r.return) && h.call(r);
                            } finally{
                                if (f) throw f.error;
                            }
                        }
                        return [
                            2,
                            e
                        ];
                }
            });
        });
    }, t.prototype.getVideoInputDevices = function() {
        return Q(this, void 0, void 0, function() {
            return J(this, function(t) {
                switch(t.label){
                    case 0:
                        return [
                            4,
                            this.listVideoInputDevices()
                        ];
                    case 1:
                        return [
                            2,
                            t.sent().map(function(t) {
                                return new q(t.deviceId, t.label);
                            })
                        ];
                }
            });
        });
    }, t.prototype.findDeviceById = function(t) {
        return Q(this, void 0, void 0, function() {
            var e;
            return J(this, function(r) {
                switch(r.label){
                    case 0:
                        return [
                            4,
                            this.listVideoInputDevices()
                        ];
                    case 1:
                        return (e = r.sent()) ? [
                            2,
                            e.find(function(e) {
                                return e.deviceId === t;
                            })
                        ] : [
                            2,
                            null
                        ];
                }
            });
        });
    }, t.prototype.decodeFromInputVideoDevice = function(t, e) {
        return Q(this, void 0, void 0, function() {
            return J(this, function(r) {
                switch(r.label){
                    case 0:
                        return [
                            4,
                            this.decodeOnceFromVideoDevice(t, e)
                        ];
                    case 1:
                        return [
                            2,
                            r.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeOnceFromVideoDevice = function(t, e) {
        return Q(this, void 0, void 0, function() {
            var r;
            return J(this, function(n) {
                switch(n.label){
                    case 0:
                        return this.reset(), r = {
                            video: t ? {
                                deviceId: {
                                    exact: t
                                }
                            } : {
                                facingMode: "environment"
                            }
                        }, [
                            4,
                            this.decodeOnceFromConstraints(r, e)
                        ];
                    case 1:
                        return [
                            2,
                            n.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeOnceFromConstraints = function(t, e) {
        return Q(this, void 0, void 0, function() {
            var r;
            return J(this, function(n) {
                switch(n.label){
                    case 0:
                        return [
                            4,
                            navigator.mediaDevices.getUserMedia(t)
                        ];
                    case 1:
                        return r = n.sent(), [
                            4,
                            this.decodeOnceFromStream(r, e)
                        ];
                    case 2:
                        return [
                            2,
                            n.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeOnceFromStream = function(t, e) {
        return Q(this, void 0, void 0, function() {
            var r;
            return J(this, function(n) {
                switch(n.label){
                    case 0:
                        return this.reset(), [
                            4,
                            this.attachStreamToVideo(t, e)
                        ];
                    case 1:
                        return r = n.sent(), [
                            4,
                            this.decodeOnce(r)
                        ];
                    case 2:
                        return [
                            2,
                            n.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeFromInputVideoDeviceContinuously = function(t, e, r) {
        return Q(this, void 0, void 0, function() {
            return J(this, function(n) {
                switch(n.label){
                    case 0:
                        return [
                            4,
                            this.decodeFromVideoDevice(t, e, r)
                        ];
                    case 1:
                        return [
                            2,
                            n.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeFromVideoDevice = function(t, e, r) {
        return Q(this, void 0, void 0, function() {
            var n;
            return J(this, function(o) {
                switch(o.label){
                    case 0:
                        return n = {
                            video: t ? {
                                deviceId: {
                                    exact: t
                                }
                            } : {
                                facingMode: "environment"
                            }
                        }, [
                            4,
                            this.decodeFromConstraints(n, e, r)
                        ];
                    case 1:
                        return [
                            2,
                            o.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeFromConstraints = function(t, e, r) {
        return Q(this, void 0, void 0, function() {
            var n;
            return J(this, function(o) {
                switch(o.label){
                    case 0:
                        return [
                            4,
                            navigator.mediaDevices.getUserMedia(t)
                        ];
                    case 1:
                        return n = o.sent(), [
                            4,
                            this.decodeFromStream(n, e, r)
                        ];
                    case 2:
                        return [
                            2,
                            o.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeFromStream = function(t, e, r) {
        return Q(this, void 0, void 0, function() {
            var n;
            return J(this, function(o) {
                switch(o.label){
                    case 0:
                        return this.reset(), [
                            4,
                            this.attachStreamToVideo(t, e)
                        ];
                    case 1:
                        return n = o.sent(), [
                            4,
                            this.decodeContinuously(n, r)
                        ];
                    case 2:
                        return [
                            2,
                            o.sent()
                        ];
                }
            });
        });
    }, t.prototype.stopAsyncDecode = function() {
        this._stopAsyncDecode = !0;
    }, t.prototype.stopContinuousDecode = function() {
        this._stopContinuousDecode = !0;
    }, t.prototype.attachStreamToVideo = function(t, e) {
        return Q(this, void 0, void 0, function() {
            var r;
            return J(this, function(n) {
                switch(n.label){
                    case 0:
                        return r = this.prepareVideoElement(e), this.addVideoSource(r, t), this.videoElement = r, this.stream = t, [
                            4,
                            this.playVideoOnLoadAsync(r)
                        ];
                    case 1:
                        return n.sent(), [
                            2,
                            r
                        ];
                }
            });
        });
    }, t.prototype.playVideoOnLoadAsync = function(t) {
        var e = this;
        return new Promise(function(r, n) {
            return e.playVideoOnLoad(t, function() {
                return r();
            });
        });
    }, t.prototype.playVideoOnLoad = function(t, e) {
        var r = this;
        this.videoEndedListener = function() {
            return r.stopStreams();
        }, this.videoCanPlayListener = function() {
            return r.tryPlayVideo(t);
        }, t.addEventListener("ended", this.videoEndedListener), t.addEventListener("canplay", this.videoCanPlayListener), t.addEventListener("playing", e), this.tryPlayVideo(t);
    }, t.prototype.isVideoPlaying = function(t) {
        return t.currentTime > 0 && !t.paused && !t.ended && t.readyState > 2;
    }, t.prototype.tryPlayVideo = function(t) {
        return Q(this, void 0, void 0, function() {
            return J(this, function(e) {
                switch(e.label){
                    case 0:
                        if (this.isVideoPlaying(t)) return console.warn("Trying to play video that is already playing."), [
                            2
                        ];
                        e.label = 1;
                    case 1:
                        return e.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]), [
                            4,
                            t.play()
                        ];
                    case 2:
                        return e.sent(), [
                            3,
                            4
                        ];
                    case 3:
                        return e.sent(), console.warn("It was not possible to play the video."), [
                            3,
                            4
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, t.prototype.getMediaElement = function(t, e) {
        var r = document.getElementById(t);
        if (!r) throw new f("element with id '" + t + "' not found");
        if (r.nodeName.toLowerCase() !== e.toLowerCase()) throw new f("element with id '" + t + "' must be an " + e + " element");
        return r;
    }, t.prototype.decodeFromImage = function(t, e) {
        if (!t && !e) throw new f("either imageElement with a src set or an url must be provided");
        return e && !t ? this.decodeFromImageUrl(e) : this.decodeFromImageElement(t);
    }, t.prototype.decodeFromVideo = function(t, e) {
        if (!t && !e) throw new f("Either an element with a src set or an URL must be provided");
        return e && !t ? this.decodeFromVideoUrl(e) : this.decodeFromVideoElement(t);
    }, t.prototype.decodeFromVideoContinuously = function(t, e, r) {
        if (void 0 === t && void 0 === e) throw new f("Either an element with a src set or an URL must be provided");
        return e && !t ? this.decodeFromVideoUrlContinuously(e, r) : this.decodeFromVideoElementContinuously(t, r);
    }, t.prototype.decodeFromImageElement = function(t) {
        if (!t) throw new f("An image element must be provided.");
        this.reset();
        var e = this.prepareImageElement(t);
        return this.imageElement = e, this.isImageLoaded(e) ? this.decodeOnce(e, !1, !0) : this._decodeOnLoadImage(e);
    }, t.prototype.decodeFromVideoElement = function(t) {
        var e = this._decodeFromVideoElementSetup(t);
        return this._decodeOnLoadVideo(e);
    }, t.prototype.decodeFromVideoElementContinuously = function(t, e) {
        var r = this._decodeFromVideoElementSetup(t);
        return this._decodeOnLoadVideoContinuously(r, e);
    }, t.prototype._decodeFromVideoElementSetup = function(t) {
        if (!t) throw new f("A video element must be provided.");
        this.reset();
        var e = this.prepareVideoElement(t);
        return this.videoElement = e, e;
    }, t.prototype.decodeFromImageUrl = function(t) {
        if (!t) throw new f("An URL must be provided.");
        this.reset();
        var e = this.prepareImageElement();
        this.imageElement = e;
        var r = this._decodeOnLoadImage(e);
        return e.src = t, r;
    }, t.prototype.decodeFromVideoUrl = function(t) {
        if (!t) throw new f("An URL must be provided.");
        this.reset();
        var e = this.prepareVideoElement(), r = this.decodeFromVideoElement(e);
        return e.src = t, r;
    }, t.prototype.decodeFromVideoUrlContinuously = function(t, e) {
        if (!t) throw new f("An URL must be provided.");
        this.reset();
        var r = this.prepareVideoElement(), n = this.decodeFromVideoElementContinuously(r, e);
        return r.src = t, n;
    }, t.prototype._decodeOnLoadImage = function(t) {
        var e = this;
        return new Promise(function(r, n) {
            e.imageLoadedListener = function() {
                return e.decodeOnce(t, !1, !0).then(r, n);
            }, t.addEventListener("load", e.imageLoadedListener);
        });
    }, t.prototype._decodeOnLoadVideo = function(t) {
        return Q(this, void 0, void 0, function() {
            return J(this, function(e) {
                switch(e.label){
                    case 0:
                        return [
                            4,
                            this.playVideoOnLoadAsync(t)
                        ];
                    case 1:
                        return e.sent(), [
                            4,
                            this.decodeOnce(t)
                        ];
                    case 2:
                        return [
                            2,
                            e.sent()
                        ];
                }
            });
        });
    }, t.prototype._decodeOnLoadVideoContinuously = function(t, e) {
        return Q(this, void 0, void 0, function() {
            return J(this, function(r) {
                switch(r.label){
                    case 0:
                        return [
                            4,
                            this.playVideoOnLoadAsync(t)
                        ];
                    case 1:
                        return r.sent(), this.decodeContinuously(t, e), [
                            2
                        ];
                }
            });
        });
    }, t.prototype.isImageLoaded = function(t) {
        return !!t.complete && 0 !== t.naturalWidth;
    }, t.prototype.prepareImageElement = function(t) {
        var e;
        return void 0 === t && ((e = document.createElement("img")).width = 200, e.height = 200), "string" == typeof t && (e = this.getMediaElement(t, "img")), t instanceof HTMLImageElement && (e = t), e;
    }, t.prototype.prepareVideoElement = function(t) {
        var e;
        return t || "undefined" == typeof document || ((e = document.createElement("video")).width = 200, e.height = 200), "string" == typeof t && (e = this.getMediaElement(t, "video")), t instanceof HTMLVideoElement && (e = t), e.setAttribute("autoplay", "true"), e.setAttribute("muted", "true"), e.setAttribute("playsinline", "true"), e;
    }, t.prototype.decodeOnce = function(t, e, r) {
        var n = this;
        void 0 === e && (e = !0), void 0 === r && (r = !0), this._stopAsyncDecode = !1;
        var o = function(i, a) {
            if (n._stopAsyncDecode) return a(new U("Video stream has ended before any code could be detected.")), void (n._stopAsyncDecode = void 0);
            try {
                i(n.decode(t));
            } catch (t) {
                if (e && t instanceof U || (t instanceof g || t instanceof R) && r) return setTimeout(o, n._timeBetweenDecodingAttempts, i, a);
                a(t);
            }
        };
        return new Promise(function(t, e) {
            return o(t, e);
        });
    }, t.prototype.decodeContinuously = function(t, e) {
        var r = this;
        this._stopContinuousDecode = !1;
        var n = function() {
            if (r._stopContinuousDecode) r._stopContinuousDecode = void 0;
            else try {
                var o = r.decode(t);
                e(o, null), setTimeout(n, r.timeBetweenScansMillis);
            } catch (t) {
                e(null, t), (t instanceof g || t instanceof R || t instanceof U) && setTimeout(n, r._timeBetweenDecodingAttempts);
            }
        };
        n();
    }, t.prototype.decode = function(t) {
        var e = this.createBinaryBitmap(t);
        return this.decodeBitmap(e);
    }, t.prototype.createBinaryBitmap = function(t) {
        var e = this.getCaptureCanvasContext(t);
        this.drawImageOnCanvas(e, t);
        var r = this.getCaptureCanvas(t), n = new K(r), o = new W(n);
        return new d(o);
    }, t.prototype.getCaptureCanvasContext = function(t) {
        if (!this.captureCanvasContext) {
            var e = this.getCaptureCanvas(t).getContext("2d");
            this.captureCanvasContext = e;
        }
        return this.captureCanvasContext;
    }, t.prototype.getCaptureCanvas = function(t) {
        if (!this.captureCanvas) {
            var e = this.createCaptureCanvas(t);
            this.captureCanvas = e;
        }
        return this.captureCanvas;
    }, t.prototype.drawImageOnCanvas = function(t, e) {
        t.drawImage(e, 0, 0);
    }, t.prototype.decodeBitmap = function(t) {
        return this.reader.decode(t, this._hints);
    }, t.prototype.createCaptureCanvas = function(t) {
        if ("undefined" == typeof document) return this._destroyCaptureCanvas(), null;
        var e, r, n = document.createElement("canvas");
        return void 0 !== t && (t instanceof HTMLVideoElement ? (e = t.videoWidth, r = t.videoHeight) : t instanceof HTMLImageElement && (e = t.naturalWidth || t.width, r = t.naturalHeight || t.height)), n.style.width = e + "px", n.style.height = r + "px", n.width = e, n.height = r, n;
    }, t.prototype.stopStreams = function() {
        this.stream && (this.stream.getVideoTracks().forEach(function(t) {
            return t.stop();
        }), this.stream = void 0), !1 === this._stopAsyncDecode && this.stopAsyncDecode(), !1 === this._stopContinuousDecode && this.stopContinuousDecode();
    }, t.prototype.reset = function() {
        this.stopStreams(), this._destroyVideoElement(), this._destroyImageElement(), this._destroyCaptureCanvas();
    }, t.prototype._destroyVideoElement = function() {
        this.videoElement && (void 0 !== this.videoEndedListener && this.videoElement.removeEventListener("ended", this.videoEndedListener), void 0 !== this.videoPlayingEventListener && this.videoElement.removeEventListener("playing", this.videoPlayingEventListener), void 0 !== this.videoCanPlayListener && this.videoElement.removeEventListener("loadedmetadata", this.videoCanPlayListener), this.cleanVideoSource(this.videoElement), this.videoElement = void 0);
    }, t.prototype._destroyImageElement = function() {
        this.imageElement && (void 0 !== this.imageLoadedListener && this.imageElement.removeEventListener("load", this.imageLoadedListener), this.imageElement.src = void 0, this.imageElement.removeAttribute("src"), this.imageElement = void 0);
    }, t.prototype._destroyCaptureCanvas = function() {
        this.captureCanvasContext = void 0, this.captureCanvas = void 0;
    }, t.prototype.addVideoSource = function(t, e) {
        try {
            t.srcObject = e;
        } catch (r) {
            t.src = URL.createObjectURL(e);
        }
    }, t.prototype.cleanVideoSource = function(t) {
        try {
            t.srcObject = null;
        } catch (e) {
            t.src = "";
        }
        this.videoElement.removeAttribute("src");
    }, t;
}(), et = function() {
    function t(t, e, r, n, o, i) {
        void 0 === r && (r = null == e ? 0 : 8 * e.length), void 0 === i && (i = w.currentTimeMillis()), this.text = t, this.rawBytes = e, this.numBits = r, this.resultPoints = n, this.format = o, this.timestamp = i, this.text = t, this.rawBytes = e, this.numBits = null == r ? null == e ? 0 : 8 * e.length : r, this.resultPoints = n, this.format = o, this.resultMetadata = null, this.timestamp = null == i ? w.currentTimeMillis() : i;
    }
    return t.prototype.getText = function() {
        return this.text;
    }, t.prototype.getRawBytes = function() {
        return this.rawBytes;
    }, t.prototype.getNumBits = function() {
        return this.numBits;
    }, t.prototype.getResultPoints = function() {
        return this.resultPoints;
    }, t.prototype.getBarcodeFormat = function() {
        return this.format;
    }, t.prototype.getResultMetadata = function() {
        return this.resultMetadata;
    }, t.prototype.putMetadata = function(t, e) {
        null === this.resultMetadata && (this.resultMetadata = new Map), this.resultMetadata.set(t, e);
    }, t.prototype.putAllMetadata = function(t) {
        null !== t && (null === this.resultMetadata ? this.resultMetadata = t : this.resultMetadata = new Map(t));
    }, t.prototype.addResultPoints = function(t) {
        var e = this.resultPoints;
        if (null === e) this.resultPoints = t;
        else if (null !== t && t.length > 0) {
            var r = new Array(e.length + t.length);
            w.arraycopy(e, 0, r, 0, e.length), w.arraycopy(t, 0, r, e.length, t.length), this.resultPoints = r;
        }
    }, t.prototype.getTimestamp = function() {
        return this.timestamp;
    }, t.prototype.toString = function() {
        return this.text;
    }, t;
}();
!function(t) {
    t[t.AZTEC = 0] = "AZTEC", t[t.CODABAR = 1] = "CODABAR", t[t.CODE_39 = 2] = "CODE_39", t[t.CODE_93 = 3] = "CODE_93", t[t.CODE_128 = 4] = "CODE_128", t[t.DATA_MATRIX = 5] = "DATA_MATRIX", t[t.EAN_8 = 6] = "EAN_8", t[t.EAN_13 = 7] = "EAN_13", t[t.ITF = 8] = "ITF", t[t.MAXICODE = 9] = "MAXICODE", t[t.PDF_417 = 10] = "PDF_417", t[t.QR_CODE = 11] = "QR_CODE", t[t.RSS_14 = 12] = "RSS_14", t[t.RSS_EXPANDED = 13] = "RSS_EXPANDED", t[t.UPC_A = 14] = "UPC_A", t[t.UPC_E = 15] = "UPC_E", t[t.UPC_EAN_EXTENSION = 16] = "UPC_EAN_EXTENSION";
}(D || (D = {}));
var rt, nt = D;
!function(t) {
    t[t.OTHER = 0] = "OTHER", t[t.ORIENTATION = 1] = "ORIENTATION", t[t.BYTE_SEGMENTS = 2] = "BYTE_SEGMENTS", t[t.ERROR_CORRECTION_LEVEL = 3] = "ERROR_CORRECTION_LEVEL", t[t.ISSUE_NUMBER = 4] = "ISSUE_NUMBER", t[t.SUGGESTED_PRICE = 5] = "SUGGESTED_PRICE", t[t.POSSIBLE_COUNTRY = 6] = "POSSIBLE_COUNTRY", t[t.UPC_EAN_EXTENSION = 7] = "UPC_EAN_EXTENSION", t[t.PDF417_EXTRA_METADATA = 8] = "PDF417_EXTRA_METADATA", t[t.STRUCTURED_APPEND_SEQUENCE = 9] = "STRUCTURED_APPEND_SEQUENCE", t[t.STRUCTURED_APPEND_PARITY = 10] = "STRUCTURED_APPEND_PARITY";
}(rt || (rt = {}));
var ot, it = rt, at = function() {
    function t(t, e, r, n, o, i) {
        void 0 === o && (o = -1), void 0 === i && (i = -1), this.rawBytes = t, this.text = e, this.byteSegments = r, this.ecLevel = n, this.structuredAppendSequenceNumber = o, this.structuredAppendParity = i, this.numBits = null == t ? 0 : 8 * t.length;
    }
    return t.prototype.getRawBytes = function() {
        return this.rawBytes;
    }, t.prototype.getNumBits = function() {
        return this.numBits;
    }, t.prototype.setNumBits = function(t) {
        this.numBits = t;
    }, t.prototype.getText = function() {
        return this.text;
    }, t.prototype.getByteSegments = function() {
        return this.byteSegments;
    }, t.prototype.getECLevel = function() {
        return this.ecLevel;
    }, t.prototype.getErrorsCorrected = function() {
        return this.errorsCorrected;
    }, t.prototype.setErrorsCorrected = function(t) {
        this.errorsCorrected = t;
    }, t.prototype.getErasures = function() {
        return this.erasures;
    }, t.prototype.setErasures = function(t) {
        this.erasures = t;
    }, t.prototype.getOther = function() {
        return this.other;
    }, t.prototype.setOther = function(t) {
        this.other = t;
    }, t.prototype.hasStructuredAppend = function() {
        return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;
    }, t.prototype.getStructuredAppendParity = function() {
        return this.structuredAppendParity;
    }, t.prototype.getStructuredAppendSequenceNumber = function() {
        return this.structuredAppendSequenceNumber;
    }, t;
}(), ut = function() {
    function t() {}
    return t.prototype.exp = function(t) {
        return this.expTable[t];
    }, t.prototype.log = function(t) {
        if (0 === t) throw new l;
        return this.logTable[t];
    }, t.addOrSubtract = function(t, e) {
        return t ^ e;
    }, t;
}(), st = function() {
    function t(t, e) {
        if (0 === e.length) throw new l;
        this.field = t;
        var r = e.length;
        if (r > 1 && 0 === e[0]) {
            for(var n = 1; n < r && 0 === e[n];)n++;
            n === r ? this.coefficients = Int32Array.from([
                0
            ]) : (this.coefficients = new Int32Array(r - n), w.arraycopy(e, n, this.coefficients, 0, this.coefficients.length));
        } else this.coefficients = e;
    }
    return t.prototype.getCoefficients = function() {
        return this.coefficients;
    }, t.prototype.getDegree = function() {
        return this.coefficients.length - 1;
    }, t.prototype.isZero = function() {
        return 0 === this.coefficients[0];
    }, t.prototype.getCoefficient = function(t) {
        return this.coefficients[this.coefficients.length - 1 - t];
    }, t.prototype.evaluateAt = function(t) {
        if (0 === t) return this.getCoefficient(0);
        var e, r = this.coefficients;
        if (1 === t) {
            e = 0;
            for(var n = 0, o = r.length; n !== o; n++){
                var i = r[n];
                e = ut.addOrSubtract(e, i);
            }
            return e;
        }
        e = r[0];
        var a = r.length, u = this.field;
        for(n = 1; n < a; n++)e = ut.addOrSubtract(u.multiply(t, e), r[n]);
        return e;
    }, t.prototype.addOrSubtract = function(e) {
        if (!this.field.equals(e.field)) throw new l("GenericGFPolys do not have same GenericGF field");
        if (this.isZero()) return e;
        if (e.isZero()) return this;
        var r = this.coefficients, n = e.coefficients;
        if (r.length > n.length) {
            var o = r;
            r = n, n = o;
        }
        var i = new Int32Array(n.length), a = n.length - r.length;
        w.arraycopy(n, 0, i, 0, a);
        for(var u = a; u < n.length; u++)i[u] = ut.addOrSubtract(r[u - a], n[u]);
        return new t(this.field, i);
    }, t.prototype.multiply = function(e) {
        if (!this.field.equals(e.field)) throw new l("GenericGFPolys do not have same GenericGF field");
        if (this.isZero() || e.isZero()) return this.field.getZero();
        for(var r = this.coefficients, n = r.length, o = e.coefficients, i = o.length, a = new Int32Array(n + i - 1), u = this.field, s = 0; s < n; s++)for(var c = r[s], f = 0; f < i; f++)a[s + f] = ut.addOrSubtract(a[s + f], u.multiply(c, o[f]));
        return new t(u, a);
    }, t.prototype.multiplyScalar = function(e) {
        if (0 === e) return this.field.getZero();
        if (1 === e) return this;
        for(var r = this.coefficients.length, n = this.field, o = new Int32Array(r), i = this.coefficients, a = 0; a < r; a++)o[a] = n.multiply(i[a], e);
        return new t(n, o);
    }, t.prototype.multiplyByMonomial = function(e, r) {
        if (e < 0) throw new l;
        if (0 === r) return this.field.getZero();
        for(var n = this.coefficients, o = n.length, i = new Int32Array(o + e), a = this.field, u = 0; u < o; u++)i[u] = a.multiply(n[u], r);
        return new t(a, i);
    }, t.prototype.divide = function(t) {
        if (!this.field.equals(t.field)) throw new l("GenericGFPolys do not have same GenericGF field");
        if (t.isZero()) throw new l("Divide by 0");
        for(var e = this.field, r = e.getZero(), n = this, o = t.getCoefficient(t.getDegree()), i = e.inverse(o); n.getDegree() >= t.getDegree() && !n.isZero();){
            var a = n.getDegree() - t.getDegree(), u = e.multiply(n.getCoefficient(n.getDegree()), i), s = t.multiplyByMonomial(a, u), c = e.buildMonomial(a, u);
            r = r.addOrSubtract(c), n = n.addOrSubtract(s);
        }
        return [
            r,
            n
        ];
    }, t.prototype.toString = function() {
        for(var t = "", e = this.getDegree(); e >= 0; e--){
            var r = this.getCoefficient(e);
            if (0 !== r) {
                if (r < 0 ? (t += " - ", r = -r) : t.length > 0 && (t += " + "), 0 === e || 1 !== r) {
                    var n = this.field.log(r);
                    0 === n ? t += "1" : 1 === n ? t += "a" : (t += "a^", t += n);
                }
                0 !== e && (1 === e ? t += "x" : (t += "x^", t += e));
            }
        }
        return t;
    }, t;
}(), ct = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), ft = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return ct(e, t), e.kind = "ArithmeticException", e;
}(s), ht = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), lt = function(t) {
    function e(e, r, n) {
        var o = t.call(this) || this;
        o.primitive = e, o.size = r, o.generatorBase = n;
        for(var i = new Int32Array(r), a = 1, u = 0; u < r; u++)i[u] = a, (a *= 2) >= r && (a ^= e, a &= r - 1);
        o.expTable = i;
        var s = new Int32Array(r);
        for(u = 0; u < r - 1; u++)s[i[u]] = u;
        return o.logTable = s, o.zero = new st(o, Int32Array.from([
            0
        ])), o.one = new st(o, Int32Array.from([
            1
        ])), o;
    }
    return ht(e, t), e.prototype.getZero = function() {
        return this.zero;
    }, e.prototype.getOne = function() {
        return this.one;
    }, e.prototype.buildMonomial = function(t, e) {
        if (t < 0) throw new l;
        if (0 === e) return this.zero;
        var r = new Int32Array(t + 1);
        return r[0] = e, new st(this, r);
    }, e.prototype.inverse = function(t) {
        if (0 === t) throw new ft;
        return this.expTable[this.size - this.logTable[t] - 1];
    }, e.prototype.multiply = function(t, e) {
        return 0 === t || 0 === e ? 0 : this.expTable[(this.logTable[t] + this.logTable[e]) % (this.size - 1)];
    }, e.prototype.getSize = function() {
        return this.size;
    }, e.prototype.getGeneratorBase = function() {
        return this.generatorBase;
    }, e.prototype.toString = function() {
        return "GF(0x" + I.toHexString(this.primitive) + "," + this.size + ")";
    }, e.prototype.equals = function(t) {
        return t === this;
    }, e.AZTEC_DATA_12 = new e(4201, 4096, 1), e.AZTEC_DATA_10 = new e(1033, 1024, 1), e.AZTEC_DATA_6 = new e(67, 64, 1), e.AZTEC_PARAM = new e(19, 16, 1), e.QR_CODE_FIELD_256 = new e(285, 256, 0), e.DATA_MATRIX_FIELD_256 = new e(301, 256, 1), e.AZTEC_DATA_8 = e.DATA_MATRIX_FIELD_256, e.MAXICODE_FIELD_64 = e.AZTEC_DATA_6, e;
}(ut), dt = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), pt = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return dt(e, t), e.kind = "ReedSolomonException", e;
}(s), gt = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), yt = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return gt(e, t), e.kind = "IllegalStateException", e;
}(s), wt = function() {
    function t(t) {
        this.field = t;
    }
    return t.prototype.decode = function(t, e) {
        for(var r = this.field, n = new st(r, t), o = new Int32Array(e), i = !0, a = 0; a < e; a++){
            var u = n.evaluateAt(r.exp(a + r.getGeneratorBase()));
            o[o.length - 1 - a] = u, 0 !== u && (i = !1);
        }
        if (!i) {
            var s = new st(r, o), c = this.runEuclideanAlgorithm(r.buildMonomial(e, 1), s, e), f = c[0], h = c[1], l = this.findErrorLocations(f), d = this.findErrorMagnitudes(h, l);
            for(a = 0; a < l.length; a++){
                var p = t.length - 1 - r.log(l[a]);
                if (p < 0) throw new pt("Bad error location");
                t[p] = lt.addOrSubtract(t[p], d[a]);
            }
        }
    }, t.prototype.runEuclideanAlgorithm = function(t, e, r) {
        if (t.getDegree() < e.getDegree()) {
            var n = t;
            t = e, e = n;
        }
        for(var o = this.field, i = t, a = e, u = o.getZero(), s = o.getOne(); a.getDegree() >= (r / 2 | 0);){
            var c = i, f = u;
            if (u = s, (i = a).isZero()) throw new pt("r_{i-1} was zero");
            a = c;
            for(var h = o.getZero(), l = i.getCoefficient(i.getDegree()), d = o.inverse(l); a.getDegree() >= i.getDegree() && !a.isZero();){
                var p = a.getDegree() - i.getDegree(), g = o.multiply(a.getCoefficient(a.getDegree()), d);
                h = h.addOrSubtract(o.buildMonomial(p, g)), a = a.addOrSubtract(i.multiplyByMonomial(p, g));
            }
            if (s = h.multiply(u).addOrSubtract(f), a.getDegree() >= i.getDegree()) throw new yt("Division algorithm failed to reduce polynomial?");
        }
        var y = s.getCoefficient(0);
        if (0 === y) throw new pt("sigmaTilde(0) was zero");
        var w = o.inverse(y);
        return [
            s.multiplyScalar(w),
            a.multiplyScalar(w)
        ];
    }, t.prototype.findErrorLocations = function(t) {
        var e = t.getDegree();
        if (1 === e) return Int32Array.from([
            t.getCoefficient(1)
        ]);
        for(var r = new Int32Array(e), n = 0, o = this.field, i = 1; i < o.getSize() && n < e; i++)0 === t.evaluateAt(i) && (r[n] = o.inverse(i), n++);
        if (n !== e) throw new pt("Error locator degree does not match number of roots");
        return r;
    }, t.prototype.findErrorMagnitudes = function(t, e) {
        for(var r = e.length, n = new Int32Array(r), o = this.field, i = 0; i < r; i++){
            for(var a = o.inverse(e[i]), u = 1, s = 0; s < r; s++)if (i !== s) {
                var c = o.multiply(e[s], a), f = 0 == (1 & c) ? 1 | c : -2 & c;
                u = o.multiply(u, f);
            }
            n[i] = o.multiply(t.evaluateAt(a), o.inverse(u)), 0 !== o.getGeneratorBase() && (n[i] = o.multiply(n[i], a));
        }
        return n;
    }, t;
}();
!function(t) {
    t[t.UPPER = 0] = "UPPER", t[t.LOWER = 1] = "LOWER", t[t.MIXED = 2] = "MIXED", t[t.DIGIT = 3] = "DIGIT", t[t.PUNCT = 4] = "PUNCT", t[t.BINARY = 5] = "BINARY";
}(ot || (ot = {}));
var _t = function() {
    function t() {}
    return t.prototype.decode = function(e) {
        this.ddata = e;
        var r = e.getBits(), n = this.extractBits(r), o = this.correctBits(n), i = t.convertBoolArrayToByteArray(o), a = t.getEncodedData(o), u = new at(i, a, null, null);
        return u.setNumBits(o.length), u;
    }, t.highLevelDecode = function(t) {
        return this.getEncodedData(t);
    }, t.getEncodedData = function(e) {
        for(var r = e.length, n = ot.UPPER, o = ot.UPPER, i = "", a = 0; a < r;)if (o === ot.BINARY) {
            if (r - a < 5) break;
            var u = t.readCode(e, a, 5);
            if (a += 5, 0 === u) {
                if (r - a < 11) break;
                u = t.readCode(e, a, 11) + 31, a += 11;
            }
            for(var s = 0; s < u; s++){
                if (r - a < 8) {
                    a = r;
                    break;
                }
                var c = t.readCode(e, a, 8);
                i += F.castAsNonUtf8Char(c), a += 8;
            }
            o = n;
        } else {
            var f = o === ot.DIGIT ? 4 : 5;
            if (r - a < f) break;
            c = t.readCode(e, a, f);
            a += f;
            var h = t.getCharacter(o, c);
            h.startsWith("CTRL_") ? (n = o, o = t.getTable(h.charAt(5)), "L" === h.charAt(6) && (n = o)) : (i += h, o = n);
        }
        return i;
    }, t.getTable = function(t) {
        switch(t){
            case "L":
                return ot.LOWER;
            case "P":
                return ot.PUNCT;
            case "M":
                return ot.MIXED;
            case "D":
                return ot.DIGIT;
            case "B":
                return ot.BINARY;
            default:
                return ot.UPPER;
        }
    }, t.getCharacter = function(e, r) {
        switch(e){
            case ot.UPPER:
                return t.UPPER_TABLE[r];
            case ot.LOWER:
                return t.LOWER_TABLE[r];
            case ot.MIXED:
                return t.MIXED_TABLE[r];
            case ot.PUNCT:
                return t.PUNCT_TABLE[r];
            case ot.DIGIT:
                return t.DIGIT_TABLE[r];
            default:
                throw new yt("Bad table");
        }
    }, t.prototype.correctBits = function(e) {
        var r, n;
        this.ddata.getNbLayers() <= 2 ? (n = 6, r = lt.AZTEC_DATA_6) : this.ddata.getNbLayers() <= 8 ? (n = 8, r = lt.AZTEC_DATA_8) : this.ddata.getNbLayers() <= 22 ? (n = 10, r = lt.AZTEC_DATA_10) : (n = 12, r = lt.AZTEC_DATA_12);
        var o = this.ddata.getNbDatablocks(), i = e.length / n;
        if (i < o) throw new R;
        for(var a = e.length % n, u = new Int32Array(i), s = 0; s < i; s++, a += n)u[s] = t.readCode(e, a, n);
        try {
            new wt(r).decode(u, i - o);
        } catch (t) {
            throw new R(t);
        }
        var c = (1 << n) - 1, f = 0;
        for(s = 0; s < o; s++){
            if (0 === (d = u[s]) || d === c) throw new R;
            1 !== d && d !== c - 1 || f++;
        }
        var h = new Array(o * n - f), l = 0;
        for(s = 0; s < o; s++){
            var d;
            if (1 === (d = u[s]) || d === c - 1) h.fill(d > 1, l, l + n - 1), l += n - 1;
            else for(var p = n - 1; p >= 0; --p)h[l++] = 0 != (d & 1 << p);
        }
        return h;
    }, t.prototype.extractBits = function(t) {
        var e = this.ddata.isCompact(), r = this.ddata.getNbLayers(), n = (e ? 11 : 14) + 4 * r, o = new Int32Array(n), i = new Array(this.totalBitsInLayer(r, e));
        if (e) for(var a = 0; a < o.length; a++)o[a] = a;
        else {
            var u = n + 1 + 2 * I.truncDivision(I.truncDivision(n, 2) - 1, 15), s = n / 2, c = I.truncDivision(u, 2);
            for(a = 0; a < s; a++){
                var f = a + I.truncDivision(a, 15);
                o[s - a - 1] = c - f - 1, o[s + a] = c + f + 1;
            }
        }
        a = 0;
        for(var h = 0; a < r; a++){
            for(var l = 4 * (r - a) + (e ? 9 : 12), d = 2 * a, p = n - 1 - d, g = 0; g < l; g++)for(var y = 2 * g, w = 0; w < 2; w++)i[h + y + w] = t.get(o[d + w], o[d + g]), i[h + 2 * l + y + w] = t.get(o[d + g], o[p - w]), i[h + 4 * l + y + w] = t.get(o[p - w], o[p - g]), i[h + 6 * l + y + w] = t.get(o[p - g], o[d + w]);
            h += 8 * l;
        }
        return i;
    }, t.readCode = function(t, e, r) {
        for(var n = 0, o = e; o < e + r; o++)n <<= 1, t[o] && (n |= 1);
        return n;
    }, t.readByte = function(e, r) {
        var n = e.length - r;
        return n >= 8 ? t.readCode(e, r, 8) : t.readCode(e, r, n) << 8 - n;
    }, t.convertBoolArrayToByteArray = function(e) {
        for(var r = new Uint8Array((e.length + 7) / 8), n = 0; n < r.length; n++)r[n] = t.readByte(e, 8 * n);
        return r;
    }, t.prototype.totalBitsInLayer = function(t, e) {
        return ((e ? 88 : 112) + 16 * t) * t;
    }, t.UPPER_TABLE = [
        "CTRL_PS",
        " ",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "CTRL_LL",
        "CTRL_ML",
        "CTRL_DL",
        "CTRL_BS"
    ], t.LOWER_TABLE = [
        "CTRL_PS",
        " ",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "q",
        "r",
        "s",
        "t",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "CTRL_US",
        "CTRL_ML",
        "CTRL_DL",
        "CTRL_BS"
    ], t.MIXED_TABLE = [
        "CTRL_PS",
        " ",
        "\\1",
        "\\2",
        "\\3",
        "\\4",
        "\\5",
        "\\6",
        "\\7",
        "\b",
        "\t",
        "\n",
        "\\13",
        "\f",
        "\r",
        "\\33",
        "\\34",
        "\\35",
        "\\36",
        "\\37",
        "@",
        "\\",
        "^",
        "_",
        "`",
        "|",
        "~",
        "\\177",
        "CTRL_LL",
        "CTRL_UL",
        "CTRL_PL",
        "CTRL_BS"
    ], t.PUNCT_TABLE = [
        "",
        "\r",
        "\r\n",
        ". ",
        ", ",
        ": ",
        "!",
        '"',
        "#",
        "$",
        "%",
        "&",
        "'",
        "(",
        ")",
        "*",
        "+",
        ",",
        "-",
        ".",
        "/",
        ":",
        ";",
        "<",
        "=",
        ">",
        "?",
        "[",
        "]",
        "{",
        "}",
        "CTRL_UL"
    ], t.DIGIT_TABLE = [
        "CTRL_PS",
        " ",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        ",",
        ".",
        "CTRL_UL",
        "CTRL_US"
    ], t;
}(), vt = function() {
    function t() {}
    return t.round = function(t) {
        return NaN === t ? 0 : t <= Number.MIN_SAFE_INTEGER ? Number.MIN_SAFE_INTEGER : t >= Number.MAX_SAFE_INTEGER ? Number.MAX_SAFE_INTEGER : t + (t < 0 ? -.5 : .5) | 0;
    }, t.distance = function(t, e, r, n) {
        var o = t - r, i = e - n;
        return Math.sqrt(o * o + i * i);
    }, t.sum = function(t) {
        for(var e = 0, r = 0, n = t.length; r !== n; r++){
            e += t[r];
        }
        return e;
    }, t;
}(), mt = function() {
    function t() {}
    return t.floatToIntBits = function(t) {
        return t;
    }, t.MAX_VALUE = Number.MAX_SAFE_INTEGER, t;
}(), At = function() {
    function t(t, e) {
        this.x = t, this.y = e;
    }
    return t.prototype.getX = function() {
        return this.x;
    }, t.prototype.getY = function() {
        return this.y;
    }, t.prototype.equals = function(e) {
        if (e instanceof t) {
            var r = e;
            return this.x === r.x && this.y === r.y;
        }
        return !1;
    }, t.prototype.hashCode = function() {
        return 31 * mt.floatToIntBits(this.x) + mt.floatToIntBits(this.y);
    }, t.prototype.toString = function() {
        return "(" + this.x + "," + this.y + ")";
    }, t.orderBestPatterns = function(t) {
        var e, r, n, o = this.distance(t[0], t[1]), i = this.distance(t[1], t[2]), a = this.distance(t[0], t[2]);
        if (i >= o && i >= a ? (r = t[0], e = t[1], n = t[2]) : a >= i && a >= o ? (r = t[1], e = t[0], n = t[2]) : (r = t[2], e = t[0], n = t[1]), this.crossProductZ(e, r, n) < 0) {
            var u = e;
            e = n, n = u;
        }
        t[0] = e, t[1] = r, t[2] = n;
    }, t.distance = function(t, e) {
        return vt.distance(t.x, t.y, e.x, e.y);
    }, t.crossProductZ = function(t, e, r) {
        var n = e.x, o = e.y;
        return (r.x - n) * (t.y - o) - (r.y - o) * (t.x - n);
    }, t;
}(), Et = function() {
    function t(t, e) {
        this.bits = t, this.points = e;
    }
    return t.prototype.getBits = function() {
        return this.bits;
    }, t.prototype.getPoints = function() {
        return this.points;
    }, t;
}(), Ct = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), It = function(t) {
    function e(e, r, n, o, i) {
        var a = t.call(this, e, r) || this;
        return a.compact = n, a.nbDatablocks = o, a.nbLayers = i, a;
    }
    return Ct(e, t), e.prototype.getNbLayers = function() {
        return this.nbLayers;
    }, e.prototype.getNbDatablocks = function() {
        return this.nbDatablocks;
    }, e.prototype.isCompact = function() {
        return this.compact;
    }, e;
}(Et), St = function() {
    function t(e, r, n, o) {
        this.image = e, this.height = e.getHeight(), this.width = e.getWidth(), null == r && (r = t.INIT_SIZE), null == n && (n = e.getWidth() / 2 | 0), null == o && (o = e.getHeight() / 2 | 0);
        var i = r / 2 | 0;
        if (this.leftInit = n - i, this.rightInit = n + i, this.upInit = o - i, this.downInit = o + i, this.upInit < 0 || this.leftInit < 0 || this.downInit >= this.height || this.rightInit >= this.width) throw new U;
    }
    return t.prototype.detect = function() {
        for(var t = this.leftInit, e = this.rightInit, r = this.upInit, n = this.downInit, o = !1, i = !0, a = !1, u = !1, s = !1, c = !1, f = !1, h = this.width, l = this.height; i;){
            i = !1;
            for(var d = !0; (d || !u) && e < h;)(d = this.containsBlackPoint(r, n, e, !1)) ? (e++, i = !0, u = !0) : u || e++;
            if (e >= h) {
                o = !0;
                break;
            }
            for(var p = !0; (p || !s) && n < l;)(p = this.containsBlackPoint(t, e, n, !0)) ? (n++, i = !0, s = !0) : s || n++;
            if (n >= l) {
                o = !0;
                break;
            }
            for(var g = !0; (g || !c) && t >= 0;)(g = this.containsBlackPoint(r, n, t, !1)) ? (t--, i = !0, c = !0) : c || t--;
            if (t < 0) {
                o = !0;
                break;
            }
            for(var y = !0; (y || !f) && r >= 0;)(y = this.containsBlackPoint(t, e, r, !0)) ? (r--, i = !0, f = !0) : f || r--;
            if (r < 0) {
                o = !0;
                break;
            }
            i && (a = !0);
        }
        if (!o && a) {
            for(var w = e - t, _ = null, v = 1; null === _ && v < w; v++)_ = this.getBlackPointOnSegment(t, n - v, t + v, n);
            if (null == _) throw new U;
            var m = null;
            for(v = 1; null === m && v < w; v++)m = this.getBlackPointOnSegment(t, r + v, t + v, r);
            if (null == m) throw new U;
            var A = null;
            for(v = 1; null === A && v < w; v++)A = this.getBlackPointOnSegment(e, r + v, e - v, r);
            if (null == A) throw new U;
            var E = null;
            for(v = 1; null === E && v < w; v++)E = this.getBlackPointOnSegment(e, n - v, e - v, n);
            if (null == E) throw new U;
            return this.centerEdges(E, _, A, m);
        }
        throw new U;
    }, t.prototype.getBlackPointOnSegment = function(t, e, r, n) {
        for(var o = vt.round(vt.distance(t, e, r, n)), i = (r - t) / o, a = (n - e) / o, u = this.image, s = 0; s < o; s++){
            var c = vt.round(t + s * i), f = vt.round(e + s * a);
            if (u.get(c, f)) return new At(c, f);
        }
        return null;
    }, t.prototype.centerEdges = function(e, r, n, o) {
        var i = e.getX(), a = e.getY(), u = r.getX(), s = r.getY(), c = n.getX(), f = n.getY(), h = o.getX(), l = o.getY(), d = t.CORR;
        return i < this.width / 2 ? [
            new At(h - d, l + d),
            new At(u + d, s + d),
            new At(c - d, f - d),
            new At(i + d, a - d)
        ] : [
            new At(h + d, l + d),
            new At(u + d, s - d),
            new At(c - d, f + d),
            new At(i - d, a - d)
        ];
    }, t.prototype.containsBlackPoint = function(t, e, r, n) {
        var o = this.image;
        if (n) {
            for(var i = t; i <= e; i++)if (o.get(i, r)) return !0;
        } else for(var a = t; a <= e; a++)if (o.get(r, a)) return !0;
        return !1;
    }, t.INIT_SIZE = 10, t.CORR = 1, t;
}(), Ot = function() {
    function t() {}
    return t.checkAndNudgePoints = function(t, e) {
        for(var r = t.getWidth(), n = t.getHeight(), o = !0, i = 0; i < e.length && o; i += 2){
            var a = Math.floor(e[i]), u = Math.floor(e[i + 1]);
            if (a < -1 || a > r || u < -1 || u > n) throw new U;
            o = !1, -1 === a ? (e[i] = 0, o = !0) : a === r && (e[i] = r - 1, o = !0), -1 === u ? (e[i + 1] = 0, o = !0) : u === n && (e[i + 1] = n - 1, o = !0);
        }
        o = !0;
        for(i = e.length - 2; i >= 0 && o; i -= 2){
            a = Math.floor(e[i]), u = Math.floor(e[i + 1]);
            if (a < -1 || a > r || u < -1 || u > n) throw new U;
            o = !1, -1 === a ? (e[i] = 0, o = !0) : a === r && (e[i] = r - 1, o = !0), -1 === u ? (e[i + 1] = 0, o = !0) : u === n && (e[i + 1] = n - 1, o = !0);
        }
    }, t;
}(), Tt = function() {
    function t(t, e, r, n, o, i, a, u, s) {
        this.a11 = t, this.a21 = e, this.a31 = r, this.a12 = n, this.a22 = o, this.a32 = i, this.a13 = a, this.a23 = u, this.a33 = s;
    }
    return t.quadrilateralToQuadrilateral = function(e, r, n, o, i, a, u, s, c, f, h, l, d, p, g, y) {
        var w = t.quadrilateralToSquare(e, r, n, o, i, a, u, s);
        return t.squareToQuadrilateral(c, f, h, l, d, p, g, y).times(w);
    }, t.prototype.transformPoints = function(t) {
        for(var e = t.length, r = this.a11, n = this.a12, o = this.a13, i = this.a21, a = this.a22, u = this.a23, s = this.a31, c = this.a32, f = this.a33, h = 0; h < e; h += 2){
            var l = t[h], d = t[h + 1], p = o * l + u * d + f;
            t[h] = (r * l + i * d + s) / p, t[h + 1] = (n * l + a * d + c) / p;
        }
    }, t.prototype.transformPointsWithValues = function(t, e) {
        for(var r = this.a11, n = this.a12, o = this.a13, i = this.a21, a = this.a22, u = this.a23, s = this.a31, c = this.a32, f = this.a33, h = t.length, l = 0; l < h; l++){
            var d = t[l], p = e[l], g = o * d + u * p + f;
            t[l] = (r * d + i * p + s) / g, e[l] = (n * d + a * p + c) / g;
        }
    }, t.squareToQuadrilateral = function(e, r, n, o, i, a, u, s) {
        var c = e - n + i - u, f = r - o + a - s;
        if (0 === c && 0 === f) return new t(n - e, i - n, e, o - r, a - o, r, 0, 0, 1);
        var h = n - i, l = u - i, d = o - a, p = s - a, g = h * p - l * d, y = (c * p - l * f) / g, w = (h * f - c * d) / g;
        return new t(n - e + y * n, u - e + w * u, e, o - r + y * o, s - r + w * s, r, y, w, 1);
    }, t.quadrilateralToSquare = function(e, r, n, o, i, a, u, s) {
        return t.squareToQuadrilateral(e, r, n, o, i, a, u, s).buildAdjoint();
    }, t.prototype.buildAdjoint = function() {
        return new t(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);
    }, t.prototype.times = function(e) {
        return new t(this.a11 * e.a11 + this.a21 * e.a12 + this.a31 * e.a13, this.a11 * e.a21 + this.a21 * e.a22 + this.a31 * e.a23, this.a11 * e.a31 + this.a21 * e.a32 + this.a31 * e.a33, this.a12 * e.a11 + this.a22 * e.a12 + this.a32 * e.a13, this.a12 * e.a21 + this.a22 * e.a22 + this.a32 * e.a23, this.a12 * e.a31 + this.a22 * e.a32 + this.a32 * e.a33, this.a13 * e.a11 + this.a23 * e.a12 + this.a33 * e.a13, this.a13 * e.a21 + this.a23 * e.a22 + this.a33 * e.a23, this.a13 * e.a31 + this.a23 * e.a32 + this.a33 * e.a33);
    }, t;
}(), bt = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Rt = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return bt(e, t), e.prototype.sampleGrid = function(t, e, r, n, o, i, a, u, s, c, f, h, l, d, p, g, y, w, _) {
        var v = Tt.quadrilateralToQuadrilateral(n, o, i, a, u, s, c, f, h, l, d, p, g, y, w, _);
        return this.sampleGridWithTransform(t, e, r, v);
    }, e.prototype.sampleGridWithTransform = function(t, e, r, n) {
        if (e <= 0 || r <= 0) throw new U;
        for(var o = new x(e, r), i = new Float32Array(2 * e), a = 0; a < r; a++){
            for(var u = i.length, s = a + .5, c = 0; c < u; c += 2)i[c] = c / 2 + .5, i[c + 1] = s;
            n.transformPoints(i), Ot.checkAndNudgePoints(t, i);
            try {
                for(c = 0; c < u; c += 2)t.get(Math.floor(i[c]), Math.floor(i[c + 1])) && o.set(c / 2, a);
            } catch (t) {
                throw new U;
            }
        }
        return o;
    }, e;
}(Ot), Nt = function() {
    function t() {}
    return t.setGridSampler = function(e) {
        t.gridSampler = e;
    }, t.getInstance = function() {
        return t.gridSampler;
    }, t.gridSampler = new Rt, t;
}(), Dt = function() {
    function t(t, e) {
        this.x = t, this.y = e;
    }
    return t.prototype.toResultPoint = function() {
        return new At(this.getX(), this.getY());
    }, t.prototype.getX = function() {
        return this.x;
    }, t.prototype.getY = function() {
        return this.y;
    }, t;
}(), Pt = function() {
    function t(t) {
        this.EXPECTED_CORNER_BITS = new Int32Array([
            3808,
            476,
            2107,
            1799
        ]), this.image = t;
    }
    return t.prototype.detect = function() {
        return this.detectMirror(!1);
    }, t.prototype.detectMirror = function(t) {
        var e = this.getMatrixCenter(), r = this.getBullsEyeCorners(e);
        if (t) {
            var n = r[0];
            r[0] = r[2], r[2] = n;
        }
        this.extractParameters(r);
        var o = this.sampleGrid(this.image, r[this.shift % 4], r[(this.shift + 1) % 4], r[(this.shift + 2) % 4], r[(this.shift + 3) % 4]), i = this.getMatrixCornerPoints(r);
        return new It(o, i, this.compact, this.nbDataBlocks, this.nbLayers);
    }, t.prototype.extractParameters = function(t) {
        if (!(this.isValidPoint(t[0]) && this.isValidPoint(t[1]) && this.isValidPoint(t[2]) && this.isValidPoint(t[3]))) throw new U;
        var e = 2 * this.nbCenterLayers, r = new Int32Array([
            this.sampleLine(t[0], t[1], e),
            this.sampleLine(t[1], t[2], e),
            this.sampleLine(t[2], t[3], e),
            this.sampleLine(t[3], t[0], e)
        ]);
        this.shift = this.getRotation(r, e);
        for(var n = 0, o = 0; o < 4; o++){
            var i = r[(this.shift + o) % 4];
            this.compact ? (n <<= 7, n += i >> 1 & 127) : (n <<= 10, n += (i >> 2 & 992) + (i >> 1 & 31));
        }
        var a = this.getCorrectedParameterData(n, this.compact);
        this.compact ? (this.nbLayers = 1 + (a >> 6), this.nbDataBlocks = 1 + (63 & a)) : (this.nbLayers = 1 + (a >> 11), this.nbDataBlocks = 1 + (2047 & a));
    }, t.prototype.getRotation = function(t, e) {
        var r = 0;
        t.forEach(function(t, n, o) {
            r = (r << 3) + ((t >> e - 2 << 1) + (1 & t));
        }), r = ((1 & r) << 11) + (r >> 1);
        for(var n = 0; n < 4; n++)if (I.bitCount(r ^ this.EXPECTED_CORNER_BITS[n]) <= 2) return n;
        throw new U;
    }, t.prototype.getCorrectedParameterData = function(t, e) {
        var r, n;
        e ? (r = 7, n = 2) : (r = 10, n = 4);
        for(var o = r - n, i = new Int32Array(r), a = r - 1; a >= 0; --a)i[a] = 15 & t, t >>= 4;
        try {
            new wt(lt.AZTEC_PARAM).decode(i, o);
        } catch (t) {
            throw new U;
        }
        var u = 0;
        for(a = 0; a < n; a++)u = (u << 4) + i[a];
        return u;
    }, t.prototype.getBullsEyeCorners = function(t) {
        var e = t, r = t, n = t, o = t, i = !0;
        for(this.nbCenterLayers = 1; this.nbCenterLayers < 9; this.nbCenterLayers++){
            var a = this.getFirstDifferent(e, i, 1, -1), u = this.getFirstDifferent(r, i, 1, 1), s = this.getFirstDifferent(n, i, -1, 1), c = this.getFirstDifferent(o, i, -1, -1);
            if (this.nbCenterLayers > 2) {
                var f = this.distancePoint(c, a) * this.nbCenterLayers / (this.distancePoint(o, e) * (this.nbCenterLayers + 2));
                if (f < .75 || f > 1.25 || !this.isWhiteOrBlackRectangle(a, u, s, c)) break;
            }
            e = a, r = u, n = s, o = c, i = !i;
        }
        if (5 !== this.nbCenterLayers && 7 !== this.nbCenterLayers) throw new U;
        this.compact = 5 === this.nbCenterLayers;
        var h = new At(e.getX() + .5, e.getY() - .5), l = new At(r.getX() + .5, r.getY() + .5), d = new At(n.getX() - .5, n.getY() + .5), p = new At(o.getX() - .5, o.getY() - .5);
        return this.expandSquare([
            h,
            l,
            d,
            p
        ], 2 * this.nbCenterLayers - 3, 2 * this.nbCenterLayers);
    }, t.prototype.getMatrixCenter = function() {
        var t, e, r, n;
        try {
            t = (s = new St(this.image).detect())[0], e = s[1], r = s[2], n = s[3];
        } catch (a) {
            var o = this.image.getWidth() / 2, i = this.image.getHeight() / 2;
            t = this.getFirstDifferent(new Dt(o + 7, i - 7), !1, 1, -1).toResultPoint(), e = this.getFirstDifferent(new Dt(o + 7, i + 7), !1, 1, 1).toResultPoint(), r = this.getFirstDifferent(new Dt(o - 7, i + 7), !1, -1, 1).toResultPoint(), n = this.getFirstDifferent(new Dt(o - 7, i - 7), !1, -1, -1).toResultPoint();
        }
        var a = vt.round((t.getX() + n.getX() + e.getX() + r.getX()) / 4), u = vt.round((t.getY() + n.getY() + e.getY() + r.getY()) / 4);
        try {
            var s;
            t = (s = new St(this.image, 15, a, u).detect())[0], e = s[1], r = s[2], n = s[3];
        } catch (o) {
            t = this.getFirstDifferent(new Dt(a + 7, u - 7), !1, 1, -1).toResultPoint(), e = this.getFirstDifferent(new Dt(a + 7, u + 7), !1, 1, 1).toResultPoint(), r = this.getFirstDifferent(new Dt(a - 7, u + 7), !1, -1, 1).toResultPoint(), n = this.getFirstDifferent(new Dt(a - 7, u - 7), !1, -1, -1).toResultPoint();
        }
        return a = vt.round((t.getX() + n.getX() + e.getX() + r.getX()) / 4), u = vt.round((t.getY() + n.getY() + e.getY() + r.getY()) / 4), new Dt(a, u);
    }, t.prototype.getMatrixCornerPoints = function(t) {
        return this.expandSquare(t, 2 * this.nbCenterLayers, this.getDimension());
    }, t.prototype.sampleGrid = function(t, e, r, n, o) {
        var i = Nt.getInstance(), a = this.getDimension(), u = a / 2 - this.nbCenterLayers, s = a / 2 + this.nbCenterLayers;
        return i.sampleGrid(t, a, a, u, u, s, u, s, s, u, s, e.getX(), e.getY(), r.getX(), r.getY(), n.getX(), n.getY(), o.getX(), o.getY());
    }, t.prototype.sampleLine = function(t, e, r) {
        for(var n = 0, o = this.distanceResultPoint(t, e), i = o / r, a = t.getX(), u = t.getY(), s = i * (e.getX() - t.getX()) / o, c = i * (e.getY() - t.getY()) / o, f = 0; f < r; f++)this.image.get(vt.round(a + f * s), vt.round(u + f * c)) && (n |= 1 << r - f - 1);
        return n;
    }, t.prototype.isWhiteOrBlackRectangle = function(t, e, r, n) {
        t = new Dt(t.getX() - 3, t.getY() + 3), e = new Dt(e.getX() - 3, e.getY() - 3), r = new Dt(r.getX() + 3, r.getY() - 3), n = new Dt(n.getX() + 3, n.getY() + 3);
        var o = this.getColor(n, t);
        if (0 === o) return !1;
        var i = this.getColor(t, e);
        return i === o && (i = this.getColor(e, r)) === o && (i = this.getColor(r, n)) === o;
    }, t.prototype.getColor = function(t, e) {
        for(var r = this.distancePoint(t, e), n = (e.getX() - t.getX()) / r, o = (e.getY() - t.getY()) / r, i = 0, a = t.getX(), u = t.getY(), s = this.image.get(t.getX(), t.getY()), c = Math.ceil(r), f = 0; f < c; f++)a += n, u += o, this.image.get(vt.round(a), vt.round(u)) !== s && i++;
        var h = i / r;
        return h > .1 && h < .9 ? 0 : h <= .1 === s ? 1 : -1;
    }, t.prototype.getFirstDifferent = function(t, e, r, n) {
        for(var o = t.getX() + r, i = t.getY() + n; this.isValid(o, i) && this.image.get(o, i) === e;)o += r, i += n;
        for(o -= r, i -= n; this.isValid(o, i) && this.image.get(o, i) === e;)o += r;
        for(o -= r; this.isValid(o, i) && this.image.get(o, i) === e;)i += n;
        return new Dt(o, i -= n);
    }, t.prototype.expandSquare = function(t, e, r) {
        var n = r / (2 * e), o = t[0].getX() - t[2].getX(), i = t[0].getY() - t[2].getY(), a = (t[0].getX() + t[2].getX()) / 2, u = (t[0].getY() + t[2].getY()) / 2, s = new At(a + n * o, u + n * i), c = new At(a - n * o, u - n * i);
        return o = t[1].getX() - t[3].getX(), i = t[1].getY() - t[3].getY(), a = (t[1].getX() + t[3].getX()) / 2, u = (t[1].getY() + t[3].getY()) / 2, [
            s,
            new At(a + n * o, u + n * i),
            c,
            new At(a - n * o, u - n * i)
        ];
    }, t.prototype.isValid = function(t, e) {
        return t >= 0 && t < this.image.getWidth() && e > 0 && e < this.image.getHeight();
    }, t.prototype.isValidPoint = function(t) {
        var e = vt.round(t.getX()), r = vt.round(t.getY());
        return this.isValid(e, r);
    }, t.prototype.distancePoint = function(t, e) {
        return vt.distance(t.getX(), t.getY(), e.getX(), e.getY());
    }, t.prototype.distanceResultPoint = function(t, e) {
        return vt.distance(t.getX(), t.getY(), e.getX(), e.getY());
    }, t.prototype.getDimension = function() {
        return this.compact ? 4 * this.nbLayers + 11 : this.nbLayers <= 4 ? 4 * this.nbLayers + 15 : 4 * this.nbLayers + 2 * (I.truncDivision(this.nbLayers - 4, 8) + 1) + 15;
    }, t;
}(), Mt = function() {
    function t() {}
    return t.prototype.decode = function(t, e) {
        void 0 === e && (e = null);
        var r = null, n = new Pt(t.getBlackMatrix()), o = null, i = null;
        try {
            o = (a = n.detectMirror(!1)).getPoints(), this.reportFoundResultPoints(e, o), i = (new _t).decode(a);
        } catch (t) {
            r = t;
        }
        if (null == i) try {
            var a;
            o = (a = n.detectMirror(!0)).getPoints(), this.reportFoundResultPoints(e, o), i = (new _t).decode(a);
        } catch (t) {
            if (null != r) throw r;
            throw t;
        }
        var u = new et(i.getText(), i.getRawBytes(), i.getNumBits(), o, nt.AZTEC, w.currentTimeMillis()), s = i.getByteSegments();
        null != s && u.putMetadata(it.BYTE_SEGMENTS, s);
        var c = i.getECLevel();
        return null != c && u.putMetadata(it.ERROR_CORRECTION_LEVEL, c), u;
    }, t.prototype.reportFoundResultPoints = function(t, e) {
        if (null != t) {
            var r = t.get(T.NEED_RESULT_POINT_CALLBACK);
            null != r && e.forEach(function(t, e, n) {
                r.foundPossibleResultPoint(t);
            });
        }
    }, t.prototype.reset = function() {}, t;
}(), Bt = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e) {
        return void 0 === e && (e = 500), t.call(this, new Mt, e) || this;
    }
    Bt(e, t);
}(tt);
var Lt = function() {
    function t() {}
    return t.prototype.decode = function(t, e) {
        try {
            return this.doDecode(t, e);
        } catch (c) {
            if (e && !0 === e.get(T.TRY_HARDER) && t.isRotateSupported()) {
                var r = t.rotateCounterClockwise(), n = this.doDecode(r, e), o = n.getResultMetadata(), i = 270;
                null !== o && !0 === o.get(it.ORIENTATION) && (i += o.get(it.ORIENTATION) % 360), n.putMetadata(it.ORIENTATION, i);
                var a = n.getResultPoints();
                if (null !== a) for(var u = r.getHeight(), s = 0; s < a.length; s++)a[s] = new At(u - a[s].getY() - 1, a[s].getX());
                return n;
            }
            throw new U;
        }
    }, t.prototype.reset = function() {}, t.prototype.doDecode = function(t, e) {
        var r, n = t.getWidth(), o = t.getHeight(), i = new S(n), a = e && !0 === e.get(T.TRY_HARDER), u = Math.max(1, o >> (a ? 8 : 5));
        r = a ? o : 15;
        for(var s = Math.trunc(o / 2), c = 0; c < r; c++){
            var f = Math.trunc((c + 1) / 2), h = s + u * (0 == (1 & c) ? f : -f);
            if (h < 0 || h >= o) break;
            try {
                i = t.getBlackRow(h, i);
            } catch (t) {
                continue;
            }
            for(var l = function(t) {
                if (1 === t && (i.reverse(), e && !0 === e.get(T.NEED_RESULT_POINT_CALLBACK))) {
                    var r = new Map;
                    e.forEach(function(t, e) {
                        return r.set(e, t);
                    }), r.delete(T.NEED_RESULT_POINT_CALLBACK), e = r;
                }
                try {
                    var o = d.decodeRow(h, i, e);
                    if (1 === t) {
                        o.putMetadata(it.ORIENTATION, 180);
                        var a = o.getResultPoints();
                        null !== a && (a[0] = new At(n - a[0].getX() - 1, a[0].getY()), a[1] = new At(n - a[1].getX() - 1, a[1].getY()));
                    }
                    return {
                        value: o
                    };
                } catch (t) {}
            }, d = this, p = 0; p < 2; p++){
                var g = l(p);
                if ("object" == typeof g) return g.value;
            }
        }
        throw new U;
    }, t.recordPattern = function(t, e, r) {
        for(var n = r.length, o = 0; o < n; o++)r[o] = 0;
        var i = t.getSize();
        if (e >= i) throw new U;
        for(var a = !t.get(e), u = 0, s = e; s < i;){
            if (t.get(s) !== a) r[u]++;
            else {
                if (++u === n) break;
                r[u] = 1, a = !a;
            }
            s++;
        }
        if (u !== n && (u !== n - 1 || s !== i)) throw new U;
    }, t.recordPatternInReverse = function(e, r, n) {
        for(var o = n.length, i = e.get(r); r > 0 && o >= 0;)e.get(--r) !== i && (o--, i = !i);
        if (o >= 0) throw new U;
        t.recordPattern(e, r + 1, n);
    }, t.patternMatchVariance = function(t, e, r) {
        for(var n = t.length, o = 0, i = 0, a = 0; a < n; a++)o += t[a], i += e[a];
        if (o < i) return Number.POSITIVE_INFINITY;
        var u = o / i;
        r *= u;
        for(var s = 0, c = 0; c < n; c++){
            var f = t[c], h = e[c] * u, l = f > h ? f - h : h - f;
            if (l > r) return Number.POSITIVE_INFINITY;
            s += l;
        }
        return s / o;
    }, t;
}(), Ft = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), kt = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return Ft(e, t), e.findStartPattern = function(t) {
        for(var r = t.getSize(), n = t.getNextSet(0), o = 0, i = Int32Array.from([
            0,
            0,
            0,
            0,
            0,
            0
        ]), a = n, u = !1, s = n; s < r; s++)if (t.get(s) !== u) i[o]++;
        else {
            if (5 === o) {
                for(var c = e.MAX_AVG_VARIANCE, f = -1, h = e.CODE_START_A; h <= e.CODE_START_C; h++){
                    var l = Lt.patternMatchVariance(i, e.CODE_PATTERNS[h], e.MAX_INDIVIDUAL_VARIANCE);
                    l < c && (c = l, f = h);
                }
                if (f >= 0 && t.isRange(Math.max(0, a - (s - a) / 2), a, !1)) return Int32Array.from([
                    a,
                    s,
                    f
                ]);
                a += i[0] + i[1], (i = i.slice(2, i.length - 1))[o - 1] = 0, i[o] = 0, o--;
            } else o++;
            i[o] = 1, u = !u;
        }
        throw new U;
    }, e.decodeCode = function(t, r, n) {
        Lt.recordPattern(t, n, r);
        for(var o = e.MAX_AVG_VARIANCE, i = -1, a = 0; a < e.CODE_PATTERNS.length; a++){
            var u = e.CODE_PATTERNS[a], s = this.patternMatchVariance(r, u, e.MAX_INDIVIDUAL_VARIANCE);
            s < o && (o = s, i = a);
        }
        if (i >= 0) return i;
        throw new U;
    }, e.prototype.decodeRow = function(t, r, n) {
        var o, i = n && !0 === n.get(T.ASSUME_GS1), a = e.findStartPattern(r), u = a[2], s = 0, c = new Uint8Array(20);
        switch(c[s++] = u, u){
            case e.CODE_START_A:
                o = e.CODE_CODE_A;
                break;
            case e.CODE_START_B:
                o = e.CODE_CODE_B;
                break;
            case e.CODE_START_C:
                o = e.CODE_CODE_C;
                break;
            default:
                throw new R;
        }
        for(var f = !1, h = !1, l = "", d = a[0], p = a[1], y = Int32Array.from([
            0,
            0,
            0,
            0,
            0,
            0
        ]), w = 0, _ = 0, v = u, m = 0, A = !0, E = !1, C = !1; !f;){
            var I = h;
            switch(h = !1, w = _, _ = e.decodeCode(r, y, p), c[s++] = _, _ !== e.CODE_STOP && (A = !0), _ !== e.CODE_STOP && (v += ++m * _), d = p, p += y.reduce(function(t, e) {
                return t + e;
            }, 0), _){
                case e.CODE_START_A:
                case e.CODE_START_B:
                case e.CODE_START_C:
                    throw new R;
            }
            switch(o){
                case e.CODE_CODE_A:
                    if (_ < 64) l += C === E ? String.fromCharCode(" ".charCodeAt(0) + _) : String.fromCharCode(" ".charCodeAt(0) + _ + 128), C = !1;
                    else if (_ < 96) l += C === E ? String.fromCharCode(_ - 64) : String.fromCharCode(_ + 64), C = !1;
                    else switch(_ !== e.CODE_STOP && (A = !1), _){
                        case e.CODE_FNC_1:
                            i && (0 === l.length ? l += "]C1" : l += String.fromCharCode(29));
                            break;
                        case e.CODE_FNC_2:
                        case e.CODE_FNC_3:
                            break;
                        case e.CODE_FNC_4_A:
                            !E && C ? (E = !0, C = !1) : E && C ? (E = !1, C = !1) : C = !0;
                            break;
                        case e.CODE_SHIFT:
                            h = !0, o = e.CODE_CODE_B;
                            break;
                        case e.CODE_CODE_B:
                            o = e.CODE_CODE_B;
                            break;
                        case e.CODE_CODE_C:
                            o = e.CODE_CODE_C;
                            break;
                        case e.CODE_STOP:
                            f = !0;
                    }
                    break;
                case e.CODE_CODE_B:
                    if (_ < 96) l += C === E ? String.fromCharCode(" ".charCodeAt(0) + _) : String.fromCharCode(" ".charCodeAt(0) + _ + 128), C = !1;
                    else switch(_ !== e.CODE_STOP && (A = !1), _){
                        case e.CODE_FNC_1:
                            i && (0 === l.length ? l += "]C1" : l += String.fromCharCode(29));
                            break;
                        case e.CODE_FNC_2:
                        case e.CODE_FNC_3:
                            break;
                        case e.CODE_FNC_4_B:
                            !E && C ? (E = !0, C = !1) : E && C ? (E = !1, C = !1) : C = !0;
                            break;
                        case e.CODE_SHIFT:
                            h = !0, o = e.CODE_CODE_A;
                            break;
                        case e.CODE_CODE_A:
                            o = e.CODE_CODE_A;
                            break;
                        case e.CODE_CODE_C:
                            o = e.CODE_CODE_C;
                            break;
                        case e.CODE_STOP:
                            f = !0;
                    }
                    break;
                case e.CODE_CODE_C:
                    if (_ < 100) _ < 10 && (l += "0"), l += _;
                    else switch(_ !== e.CODE_STOP && (A = !1), _){
                        case e.CODE_FNC_1:
                            i && (0 === l.length ? l += "]C1" : l += String.fromCharCode(29));
                            break;
                        case e.CODE_CODE_A:
                            o = e.CODE_CODE_A;
                            break;
                        case e.CODE_CODE_B:
                            o = e.CODE_CODE_B;
                            break;
                        case e.CODE_STOP:
                            f = !0;
                    }
            }
            I && (o = o === e.CODE_CODE_A ? e.CODE_CODE_B : e.CODE_CODE_A);
        }
        var S = p - d;
        if (p = r.getNextUnset(p), !r.isRange(p, Math.min(r.getSize(), p + (p - d) / 2), !1)) throw new U;
        if ((v -= m * w) % 103 !== w) throw new g;
        var O = l.length;
        if (0 === O) throw new U;
        O > 0 && A && (l = o === e.CODE_CODE_C ? l.substring(0, O - 2) : l.substring(0, O - 1));
        for(var b = (a[1] + a[0]) / 2, N = d + S / 2, D = c.length, P = new Uint8Array(D), M = 0; M < D; M++)P[M] = c[M];
        var B = [
            new At(b, t),
            new At(N, t)
        ];
        return new et(l, P, 0, B, nt.CODE_128, (new Date).getTime());
    }, e.CODE_PATTERNS = [
        Int32Array.from([
            2,
            1,
            2,
            2,
            2,
            2
        ]),
        Int32Array.from([
            2,
            2,
            2,
            1,
            2,
            2
        ]),
        Int32Array.from([
            2,
            2,
            2,
            2,
            2,
            1
        ]),
        Int32Array.from([
            1,
            2,
            1,
            2,
            2,
            3
        ]),
        Int32Array.from([
            1,
            2,
            1,
            3,
            2,
            2
        ]),
        Int32Array.from([
            1,
            3,
            1,
            2,
            2,
            2
        ]),
        Int32Array.from([
            1,
            2,
            2,
            2,
            1,
            3
        ]),
        Int32Array.from([
            1,
            2,
            2,
            3,
            1,
            2
        ]),
        Int32Array.from([
            1,
            3,
            2,
            2,
            1,
            2
        ]),
        Int32Array.from([
            2,
            2,
            1,
            2,
            1,
            3
        ]),
        Int32Array.from([
            2,
            2,
            1,
            3,
            1,
            2
        ]),
        Int32Array.from([
            2,
            3,
            1,
            2,
            1,
            2
        ]),
        Int32Array.from([
            1,
            1,
            2,
            2,
            3,
            2
        ]),
        Int32Array.from([
            1,
            2,
            2,
            1,
            3,
            2
        ]),
        Int32Array.from([
            1,
            2,
            2,
            2,
            3,
            1
        ]),
        Int32Array.from([
            1,
            1,
            3,
            2,
            2,
            2
        ]),
        Int32Array.from([
            1,
            2,
            3,
            1,
            2,
            2
        ]),
        Int32Array.from([
            1,
            2,
            3,
            2,
            2,
            1
        ]),
        Int32Array.from([
            2,
            2,
            3,
            2,
            1,
            1
        ]),
        Int32Array.from([
            2,
            2,
            1,
            1,
            3,
            2
        ]),
        Int32Array.from([
            2,
            2,
            1,
            2,
            3,
            1
        ]),
        Int32Array.from([
            2,
            1,
            3,
            2,
            1,
            2
        ]),
        Int32Array.from([
            2,
            2,
            3,
            1,
            1,
            2
        ]),
        Int32Array.from([
            3,
            1,
            2,
            1,
            3,
            1
        ]),
        Int32Array.from([
            3,
            1,
            1,
            2,
            2,
            2
        ]),
        Int32Array.from([
            3,
            2,
            1,
            1,
            2,
            2
        ]),
        Int32Array.from([
            3,
            2,
            1,
            2,
            2,
            1
        ]),
        Int32Array.from([
            3,
            1,
            2,
            2,
            1,
            2
        ]),
        Int32Array.from([
            3,
            2,
            2,
            1,
            1,
            2
        ]),
        Int32Array.from([
            3,
            2,
            2,
            2,
            1,
            1
        ]),
        Int32Array.from([
            2,
            1,
            2,
            1,
            2,
            3
        ]),
        Int32Array.from([
            2,
            1,
            2,
            3,
            2,
            1
        ]),
        Int32Array.from([
            2,
            3,
            2,
            1,
            2,
            1
        ]),
        Int32Array.from([
            1,
            1,
            1,
            3,
            2,
            3
        ]),
        Int32Array.from([
            1,
            3,
            1,
            1,
            2,
            3
        ]),
        Int32Array.from([
            1,
            3,
            1,
            3,
            2,
            1
        ]),
        Int32Array.from([
            1,
            1,
            2,
            3,
            1,
            3
        ]),
        Int32Array.from([
            1,
            3,
            2,
            1,
            1,
            3
        ]),
        Int32Array.from([
            1,
            3,
            2,
            3,
            1,
            1
        ]),
        Int32Array.from([
            2,
            1,
            1,
            3,
            1,
            3
        ]),
        Int32Array.from([
            2,
            3,
            1,
            1,
            1,
            3
        ]),
        Int32Array.from([
            2,
            3,
            1,
            3,
            1,
            1
        ]),
        Int32Array.from([
            1,
            1,
            2,
            1,
            3,
            3
        ]),
        Int32Array.from([
            1,
            1,
            2,
            3,
            3,
            1
        ]),
        Int32Array.from([
            1,
            3,
            2,
            1,
            3,
            1
        ]),
        Int32Array.from([
            1,
            1,
            3,
            1,
            2,
            3
        ]),
        Int32Array.from([
            1,
            1,
            3,
            3,
            2,
            1
        ]),
        Int32Array.from([
            1,
            3,
            3,
            1,
            2,
            1
        ]),
        Int32Array.from([
            3,
            1,
            3,
            1,
            2,
            1
        ]),
        Int32Array.from([
            2,
            1,
            1,
            3,
            3,
            1
        ]),
        Int32Array.from([
            2,
            3,
            1,
            1,
            3,
            1
        ]),
        Int32Array.from([
            2,
            1,
            3,
            1,
            1,
            3
        ]),
        Int32Array.from([
            2,
            1,
            3,
            3,
            1,
            1
        ]),
        Int32Array.from([
            2,
            1,
            3,
            1,
            3,
            1
        ]),
        Int32Array.from([
            3,
            1,
            1,
            1,
            2,
            3
        ]),
        Int32Array.from([
            3,
            1,
            1,
            3,
            2,
            1
        ]),
        Int32Array.from([
            3,
            3,
            1,
            1,
            2,
            1
        ]),
        Int32Array.from([
            3,
            1,
            2,
            1,
            1,
            3
        ]),
        Int32Array.from([
            3,
            1,
            2,
            3,
            1,
            1
        ]),
        Int32Array.from([
            3,
            3,
            2,
            1,
            1,
            1
        ]),
        Int32Array.from([
            3,
            1,
            4,
            1,
            1,
            1
        ]),
        Int32Array.from([
            2,
            2,
            1,
            4,
            1,
            1
        ]),
        Int32Array.from([
            4,
            3,
            1,
            1,
            1,
            1
        ]),
        Int32Array.from([
            1,
            1,
            1,
            2,
            2,
            4
        ]),
        Int32Array.from([
            1,
            1,
            1,
            4,
            2,
            2
        ]),
        Int32Array.from([
            1,
            2,
            1,
            1,
            2,
            4
        ]),
        Int32Array.from([
            1,
            2,
            1,
            4,
            2,
            1
        ]),
        Int32Array.from([
            1,
            4,
            1,
            1,
            2,
            2
        ]),
        Int32Array.from([
            1,
            4,
            1,
            2,
            2,
            1
        ]),
        Int32Array.from([
            1,
            1,
            2,
            2,
            1,
            4
        ]),
        Int32Array.from([
            1,
            1,
            2,
            4,
            1,
            2
        ]),
        Int32Array.from([
            1,
            2,
            2,
            1,
            1,
            4
        ]),
        Int32Array.from([
            1,
            2,
            2,
            4,
            1,
            1
        ]),
        Int32Array.from([
            1,
            4,
            2,
            1,
            1,
            2
        ]),
        Int32Array.from([
            1,
            4,
            2,
            2,
            1,
            1
        ]),
        Int32Array.from([
            2,
            4,
            1,
            2,
            1,
            1
        ]),
        Int32Array.from([
            2,
            2,
            1,
            1,
            1,
            4
        ]),
        Int32Array.from([
            4,
            1,
            3,
            1,
            1,
            1
        ]),
        Int32Array.from([
            2,
            4,
            1,
            1,
            1,
            2
        ]),
        Int32Array.from([
            1,
            3,
            4,
            1,
            1,
            1
        ]),
        Int32Array.from([
            1,
            1,
            1,
            2,
            4,
            2
        ]),
        Int32Array.from([
            1,
            2,
            1,
            1,
            4,
            2
        ]),
        Int32Array.from([
            1,
            2,
            1,
            2,
            4,
            1
        ]),
        Int32Array.from([
            1,
            1,
            4,
            2,
            1,
            2
        ]),
        Int32Array.from([
            1,
            2,
            4,
            1,
            1,
            2
        ]),
        Int32Array.from([
            1,
            2,
            4,
            2,
            1,
            1
        ]),
        Int32Array.from([
            4,
            1,
            1,
            2,
            1,
            2
        ]),
        Int32Array.from([
            4,
            2,
            1,
            1,
            1,
            2
        ]),
        Int32Array.from([
            4,
            2,
            1,
            2,
            1,
            1
        ]),
        Int32Array.from([
            2,
            1,
            2,
            1,
            4,
            1
        ]),
        Int32Array.from([
            2,
            1,
            4,
            1,
            2,
            1
        ]),
        Int32Array.from([
            4,
            1,
            2,
            1,
            2,
            1
        ]),
        Int32Array.from([
            1,
            1,
            1,
            1,
            4,
            3
        ]),
        Int32Array.from([
            1,
            1,
            1,
            3,
            4,
            1
        ]),
        Int32Array.from([
            1,
            3,
            1,
            1,
            4,
            1
        ]),
        Int32Array.from([
            1,
            1,
            4,
            1,
            1,
            3
        ]),
        Int32Array.from([
            1,
            1,
            4,
            3,
            1,
            1
        ]),
        Int32Array.from([
            4,
            1,
            1,
            1,
            1,
            3
        ]),
        Int32Array.from([
            4,
            1,
            1,
            3,
            1,
            1
        ]),
        Int32Array.from([
            1,
            1,
            3,
            1,
            4,
            1
        ]),
        Int32Array.from([
            1,
            1,
            4,
            1,
            3,
            1
        ]),
        Int32Array.from([
            3,
            1,
            1,
            1,
            4,
            1
        ]),
        Int32Array.from([
            4,
            1,
            1,
            1,
            3,
            1
        ]),
        Int32Array.from([
            2,
            1,
            1,
            4,
            1,
            2
        ]),
        Int32Array.from([
            2,
            1,
            1,
            2,
            1,
            4
        ]),
        Int32Array.from([
            2,
            1,
            1,
            2,
            3,
            2
        ]),
        Int32Array.from([
            2,
            3,
            3,
            1,
            1,
            1,
            2
        ])
    ], e.MAX_AVG_VARIANCE = .25, e.MAX_INDIVIDUAL_VARIANCE = .7, e.CODE_SHIFT = 98, e.CODE_CODE_C = 99, e.CODE_CODE_B = 100, e.CODE_CODE_A = 101, e.CODE_FNC_1 = 102, e.CODE_FNC_2 = 97, e.CODE_FNC_3 = 96, e.CODE_FNC_4_A = 101, e.CODE_FNC_4_B = 100, e.CODE_START_A = 103, e.CODE_START_B = 104, e.CODE_START_C = 105, e.CODE_STOP = 106, e;
}(Lt), xt = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Vt = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Ut = function(t) {
    function e(e, r) {
        void 0 === e && (e = !1), void 0 === r && (r = !1);
        var n = t.call(this) || this;
        return n.usingCheckDigit = e, n.extendedMode = r, n.decodeRowResult = "", n.counters = new Int32Array(9), n;
    }
    return xt(e, t), e.prototype.decodeRow = function(t, r, n) {
        var o, i, a, u, s = this.counters;
        s.fill(0), this.decodeRowResult = "";
        var c, f, h = e.findAsteriskPattern(r, s), l = r.getNextSet(h[1]), d = r.getSize();
        do {
            e.recordPattern(r, l, s);
            var p = e.toNarrowWidePattern(s);
            if (p < 0) throw new U;
            c = e.patternToChar(p), this.decodeRowResult += c, f = l;
            try {
                for(var y = (o = void 0, Vt(s)), w = y.next(); !w.done; w = y.next()){
                    l += w.value;
                }
            } catch (t) {
                o = {
                    error: t
                };
            } finally{
                try {
                    w && !w.done && (i = y.return) && i.call(y);
                } finally{
                    if (o) throw o.error;
                }
            }
            l = r.getNextSet(l);
        }while ("*" !== c)
        this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1);
        var _, v = 0;
        try {
            for(var m = Vt(s), A = m.next(); !A.done; A = m.next()){
                v += A.value;
            }
        } catch (t) {
            a = {
                error: t
            };
        } finally{
            try {
                A && !A.done && (u = m.return) && u.call(m);
            } finally{
                if (a) throw a.error;
            }
        }
        if (l !== d && 2 * (l - f - v) < v) throw new U;
        if (this.usingCheckDigit) {
            for(var E = this.decodeRowResult.length - 1, C = 0, I = 0; I < E; I++)C += e.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(I));
            if (this.decodeRowResult.charAt(E) !== e.ALPHABET_STRING.charAt(C % 43)) throw new g;
            this.decodeRowResult = this.decodeRowResult.substring(0, E);
        }
        if (0 === this.decodeRowResult.length) throw new U;
        _ = this.extendedMode ? e.decodeExtended(this.decodeRowResult) : this.decodeRowResult;
        var S = (h[1] + h[0]) / 2, O = f + v / 2;
        return new et(_, null, 0, [
            new At(S, t),
            new At(O, t)
        ], nt.CODE_39, (new Date).getTime());
    }, e.findAsteriskPattern = function(t, r) {
        for(var n = t.getSize(), o = t.getNextSet(0), i = 0, a = o, u = !1, s = r.length, c = o; c < n; c++)if (t.get(c) !== u) r[i]++;
        else {
            if (i === s - 1) {
                if (this.toNarrowWidePattern(r) === e.ASTERISK_ENCODING && t.isRange(Math.max(0, a - Math.floor((c - a) / 2)), a, !1)) return [
                    a,
                    c
                ];
                a += r[0] + r[1], r.copyWithin(0, 2, 2 + i - 1), r[i - 1] = 0, r[i] = 0, i--;
            } else i++;
            r[i] = 1, u = !u;
        }
        throw new U;
    }, e.toNarrowWidePattern = function(t) {
        var e, r, n, o = t.length, i = 0;
        do {
            var a = 2147483647;
            try {
                for(var u = (e = void 0, Vt(t)), s = u.next(); !s.done; s = u.next()){
                    (l = s.value) < a && l > i && (a = l);
                }
            } catch (t) {
                e = {
                    error: t
                };
            } finally{
                try {
                    s && !s.done && (r = u.return) && r.call(u);
                } finally{
                    if (e) throw e.error;
                }
            }
            i = a, n = 0;
            for(var c = 0, f = 0, h = 0; h < o; h++){
                (l = t[h]) > i && (f |= 1 << o - 1 - h, n++, c += l);
            }
            if (3 === n) {
                for(h = 0; h < o && n > 0; h++){
                    var l;
                    if ((l = t[h]) > i && (n--, 2 * l >= c)) return -1;
                }
                return f;
            }
        }while (n > 3)
        return -1;
    }, e.patternToChar = function(t) {
        for(var r = 0; r < e.CHARACTER_ENCODINGS.length; r++)if (e.CHARACTER_ENCODINGS[r] === t) return e.ALPHABET_STRING.charAt(r);
        if (t === e.ASTERISK_ENCODING) return "*";
        throw new U;
    }, e.decodeExtended = function(t) {
        for(var e = t.length, r = "", n = 0; n < e; n++){
            var o = t.charAt(n);
            if ("+" === o || "$" === o || "%" === o || "/" === o) {
                var i = t.charAt(n + 1), a = "\0";
                switch(o){
                    case "+":
                        if (!(i >= "A" && i <= "Z")) throw new R;
                        a = String.fromCharCode(i.charCodeAt(0) + 32);
                        break;
                    case "$":
                        if (!(i >= "A" && i <= "Z")) throw new R;
                        a = String.fromCharCode(i.charCodeAt(0) - 64);
                        break;
                    case "%":
                        if (i >= "A" && i <= "E") a = String.fromCharCode(i.charCodeAt(0) - 38);
                        else if (i >= "F" && i <= "J") a = String.fromCharCode(i.charCodeAt(0) - 11);
                        else if (i >= "K" && i <= "O") a = String.fromCharCode(i.charCodeAt(0) + 16);
                        else if (i >= "P" && i <= "T") a = String.fromCharCode(i.charCodeAt(0) + 43);
                        else if ("U" === i) a = "\0";
                        else if ("V" === i) a = "@";
                        else if ("W" === i) a = "`";
                        else {
                            if ("X" !== i && "Y" !== i && "Z" !== i) throw new R;
                            a = "";
                        }
                        break;
                    case "/":
                        if (i >= "A" && i <= "O") a = String.fromCharCode(i.charCodeAt(0) - 32);
                        else {
                            if ("Z" !== i) throw new R;
                            a = ":";
                        }
                }
                r += a, n++;
            } else r += o;
        }
        return r;
    }, e.ALPHABET_STRING = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%", e.CHARACTER_ENCODINGS = [
        52,
        289,
        97,
        352,
        49,
        304,
        112,
        37,
        292,
        100,
        265,
        73,
        328,
        25,
        280,
        88,
        13,
        268,
        76,
        28,
        259,
        67,
        322,
        19,
        274,
        82,
        7,
        262,
        70,
        22,
        385,
        193,
        448,
        145,
        400,
        208,
        133,
        388,
        196,
        168,
        162,
        138,
        42
    ], e.ASTERISK_ENCODING = 148, e;
}(Lt), Ht = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Gt = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Xt = function(t) {
    function e() {
        var e = null !== t && t.apply(this, arguments) || this;
        return e.narrowLineWidth = -1, e;
    }
    return Ht(e, t), e.prototype.decodeRow = function(t, r, n) {
        var o, i, a = this.decodeStart(r), u = this.decodeEnd(r), s = new k;
        e.decodeMiddle(r, a[1], u[0], s);
        var c = s.toString(), f = null;
        null != n && (f = n.get(T.ALLOWED_LENGTHS)), null == f && (f = e.DEFAULT_ALLOWED_LENGTHS);
        var h = c.length, l = !1, d = 0;
        try {
            for(var p = Gt(f), g = p.next(); !g.done; g = p.next()){
                var y = g.value;
                if (h === y) {
                    l = !0;
                    break;
                }
                y > d && (d = y);
            }
        } catch (t) {
            o = {
                error: t
            };
        } finally{
            try {
                g && !g.done && (i = p.return) && i.call(p);
            } finally{
                if (o) throw o.error;
            }
        }
        if (!l && h > d && (l = !0), !l) throw new R;
        var w = [
            new At(a[1], t),
            new At(u[0], t)
        ];
        return new et(c, null, 0, w, nt.ITF, (new Date).getTime());
    }, e.decodeMiddle = function(t, r, n, o) {
        var i = new Int32Array(10), a = new Int32Array(5), u = new Int32Array(5);
        for(i.fill(0), a.fill(0), u.fill(0); r < n;){
            Lt.recordPattern(t, r, i);
            for(var s = 0; s < 5; s++){
                var c = 2 * s;
                a[s] = i[c], u[s] = i[c + 1];
            }
            var f = e.decodeDigit(a);
            o.append(f.toString()), f = this.decodeDigit(u), o.append(f.toString()), i.forEach(function(t) {
                r += t;
            });
        }
    }, e.prototype.decodeStart = function(t) {
        var r = e.skipWhiteSpace(t), n = e.findGuardPattern(t, r, e.START_PATTERN);
        return this.narrowLineWidth = (n[1] - n[0]) / 4, this.validateQuietZone(t, n[0]), n;
    }, e.prototype.validateQuietZone = function(t, e) {
        var r = 10 * this.narrowLineWidth;
        r = r < e ? r : e;
        for(var n = e - 1; r > 0 && n >= 0 && !t.get(n); n--)r--;
        if (0 !== r) throw new U;
    }, e.skipWhiteSpace = function(t) {
        var e = t.getSize(), r = t.getNextSet(0);
        if (r === e) throw new U;
        return r;
    }, e.prototype.decodeEnd = function(t) {
        t.reverse();
        try {
            var r = e.skipWhiteSpace(t), n = void 0;
            try {
                n = e.findGuardPattern(t, r, e.END_PATTERN_REVERSED[0]);
            } catch (o) {
                o instanceof U && (n = e.findGuardPattern(t, r, e.END_PATTERN_REVERSED[1]));
            }
            this.validateQuietZone(t, n[0]);
            var o = n[0];
            return n[0] = t.getSize() - n[1], n[1] = t.getSize() - o, n;
        } finally{
            t.reverse();
        }
    }, e.findGuardPattern = function(t, r, n) {
        var o = n.length, i = new Int32Array(o), a = t.getSize(), u = !1, s = 0, c = r;
        i.fill(0);
        for(var f = r; f < a; f++)if (t.get(f) !== u) i[s]++;
        else {
            if (s === o - 1) {
                if (Lt.patternMatchVariance(i, n, e.MAX_INDIVIDUAL_VARIANCE) < e.MAX_AVG_VARIANCE) return [
                    c,
                    f
                ];
                c += i[0] + i[1], w.arraycopy(i, 2, i, 0, s - 1), i[s - 1] = 0, i[s] = 0, s--;
            } else s++;
            i[s] = 1, u = !u;
        }
        throw new U;
    }, e.decodeDigit = function(t) {
        for(var r = e.MAX_AVG_VARIANCE, n = -1, o = e.PATTERNS.length, i = 0; i < o; i++){
            var a = e.PATTERNS[i], u = Lt.patternMatchVariance(t, a, e.MAX_INDIVIDUAL_VARIANCE);
            u < r ? (r = u, n = i) : u === r && (n = -1);
        }
        if (n >= 0) return n % 10;
        throw new U;
    }, e.PATTERNS = [
        Int32Array.from([
            1,
            1,
            2,
            2,
            1
        ]),
        Int32Array.from([
            2,
            1,
            1,
            1,
            2
        ]),
        Int32Array.from([
            1,
            2,
            1,
            1,
            2
        ]),
        Int32Array.from([
            2,
            2,
            1,
            1,
            1
        ]),
        Int32Array.from([
            1,
            1,
            2,
            1,
            2
        ]),
        Int32Array.from([
            2,
            1,
            2,
            1,
            1
        ]),
        Int32Array.from([
            1,
            2,
            2,
            1,
            1
        ]),
        Int32Array.from([
            1,
            1,
            1,
            2,
            2
        ]),
        Int32Array.from([
            2,
            1,
            1,
            2,
            1
        ]),
        Int32Array.from([
            1,
            2,
            1,
            2,
            1
        ]),
        Int32Array.from([
            1,
            1,
            3,
            3,
            1
        ]),
        Int32Array.from([
            3,
            1,
            1,
            1,
            3
        ]),
        Int32Array.from([
            1,
            3,
            1,
            1,
            3
        ]),
        Int32Array.from([
            3,
            3,
            1,
            1,
            1
        ]),
        Int32Array.from([
            1,
            1,
            3,
            1,
            3
        ]),
        Int32Array.from([
            3,
            1,
            3,
            1,
            1
        ]),
        Int32Array.from([
            1,
            3,
            3,
            1,
            1
        ]),
        Int32Array.from([
            1,
            1,
            1,
            3,
            3
        ]),
        Int32Array.from([
            3,
            1,
            1,
            3,
            1
        ]),
        Int32Array.from([
            1,
            3,
            1,
            3,
            1
        ])
    ], e.MAX_AVG_VARIANCE = .38, e.MAX_INDIVIDUAL_VARIANCE = .5, e.DEFAULT_ALLOWED_LENGTHS = [
        6,
        8,
        10,
        12,
        14
    ], e.START_PATTERN = Int32Array.from([
        1,
        1,
        1,
        1
    ]), e.END_PATTERN_REVERSED = [
        Int32Array.from([
            1,
            1,
            2
        ]),
        Int32Array.from([
            1,
            1,
            3
        ])
    ], e;
}(Lt), Wt = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), jt = function(t) {
    function e() {
        var e = null !== t && t.apply(this, arguments) || this;
        return e.decodeRowStringBuffer = "", e;
    }
    return Wt(e, t), e.findStartGuardPattern = function(t) {
        for(var r, n = !1, o = 0, i = Int32Array.from([
            0,
            0,
            0
        ]); !n;){
            i = Int32Array.from([
                0,
                0,
                0
            ]);
            var a = (r = e.findGuardPattern(t, o, !1, this.START_END_PATTERN, i))[0], u = a - ((o = r[1]) - a);
            u >= 0 && (n = t.isRange(u, a, !1));
        }
        return r;
    }, e.checkChecksum = function(t) {
        return e.checkStandardUPCEANChecksum(t);
    }, e.checkStandardUPCEANChecksum = function(t) {
        var r = t.length;
        if (0 === r) return !1;
        var n = parseInt(t.charAt(r - 1), 10);
        return e.getStandardUPCEANChecksum(t.substring(0, r - 1)) === n;
    }, e.getStandardUPCEANChecksum = function(t) {
        for(var e = t.length, r = 0, n = e - 1; n >= 0; n -= 2){
            if ((o = t.charAt(n).charCodeAt(0) - "0".charCodeAt(0)) < 0 || o > 9) throw new R;
            r += o;
        }
        r *= 3;
        for(n = e - 2; n >= 0; n -= 2){
            var o;
            if ((o = t.charAt(n).charCodeAt(0) - "0".charCodeAt(0)) < 0 || o > 9) throw new R;
            r += o;
        }
        return (1e3 - r) % 10;
    }, e.decodeEnd = function(t, r) {
        return e.findGuardPattern(t, r, !1, e.START_END_PATTERN, new Int32Array(e.START_END_PATTERN.length).fill(0));
    }, e.findGuardPatternWithoutCounters = function(t, e, r, n) {
        return this.findGuardPattern(t, e, r, n, new Int32Array(n.length));
    }, e.findGuardPattern = function(t, r, n, o, i) {
        for(var a = t.getSize(), u = 0, s = r = n ? t.getNextUnset(r) : t.getNextSet(r), c = o.length, f = n, h = r; h < a; h++)if (t.get(h) !== f) i[u]++;
        else {
            if (u === c - 1) {
                if (Lt.patternMatchVariance(i, o, e.MAX_INDIVIDUAL_VARIANCE) < e.MAX_AVG_VARIANCE) return Int32Array.from([
                    s,
                    h
                ]);
                s += i[0] + i[1];
                for(var l = i.slice(2, i.length - 1), d = 0; d < u - 1; d++)i[d] = l[d];
                i[u - 1] = 0, i[u] = 0, u--;
            } else u++;
            i[u] = 1, f = !f;
        }
        throw new U;
    }, e.decodeDigit = function(t, r, n, o) {
        this.recordPattern(t, n, r);
        for(var i = this.MAX_AVG_VARIANCE, a = -1, u = o.length, s = 0; s < u; s++){
            var c = o[s], f = Lt.patternMatchVariance(r, c, e.MAX_INDIVIDUAL_VARIANCE);
            f < i && (i = f, a = s);
        }
        if (a >= 0) return a;
        throw new U;
    }, e.MAX_AVG_VARIANCE = .48, e.MAX_INDIVIDUAL_VARIANCE = .7, e.START_END_PATTERN = Int32Array.from([
        1,
        1,
        1
    ]), e.MIDDLE_PATTERN = Int32Array.from([
        1,
        1,
        1,
        1,
        1
    ]), e.END_PATTERN = Int32Array.from([
        1,
        1,
        1,
        1,
        1,
        1
    ]), e.L_PATTERNS = [
        Int32Array.from([
            3,
            2,
            1,
            1
        ]),
        Int32Array.from([
            2,
            2,
            2,
            1
        ]),
        Int32Array.from([
            2,
            1,
            2,
            2
        ]),
        Int32Array.from([
            1,
            4,
            1,
            1
        ]),
        Int32Array.from([
            1,
            1,
            3,
            2
        ]),
        Int32Array.from([
            1,
            2,
            3,
            1
        ]),
        Int32Array.from([
            1,
            1,
            1,
            4
        ]),
        Int32Array.from([
            1,
            3,
            1,
            2
        ]),
        Int32Array.from([
            1,
            2,
            1,
            3
        ]),
        Int32Array.from([
            3,
            1,
            1,
            2
        ])
    ], e;
}(Lt), zt = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Yt = function() {
    function t() {
        this.CHECK_DIGIT_ENCODINGS = [
            24,
            20,
            18,
            17,
            12,
            6,
            3,
            10,
            9,
            5
        ], this.decodeMiddleCounters = Int32Array.from([
            0,
            0,
            0,
            0
        ]), this.decodeRowStringBuffer = "";
    }
    return t.prototype.decodeRow = function(e, r, n) {
        var o = this.decodeRowStringBuffer, i = this.decodeMiddle(r, n, o), a = o.toString(), u = t.parseExtensionString(a), s = [
            new At((n[0] + n[1]) / 2, e),
            new At(i, e)
        ], c = new et(a, null, 0, s, nt.UPC_EAN_EXTENSION, (new Date).getTime());
        return null != u && c.putAllMetadata(u), c;
    }, t.prototype.decodeMiddle = function(e, r, n) {
        var o, i, a = this.decodeMiddleCounters;
        a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 0;
        for(var u = e.getSize(), s = r[1], c = 0, f = 0; f < 5 && s < u; f++){
            var h = jt.decodeDigit(e, a, s, jt.L_AND_G_PATTERNS);
            n += String.fromCharCode("0".charCodeAt(0) + h % 10);
            try {
                for(var l = (o = void 0, zt(a)), d = l.next(); !d.done; d = l.next()){
                    s += d.value;
                }
            } catch (t) {
                o = {
                    error: t
                };
            } finally{
                try {
                    d && !d.done && (i = l.return) && i.call(l);
                } finally{
                    if (o) throw o.error;
                }
            }
            h >= 10 && (c |= 1 << 4 - f), 4 !== f && (s = e.getNextSet(s), s = e.getNextUnset(s));
        }
        if (5 !== n.length) throw new U;
        var p = this.determineCheckDigit(c);
        if (t.extensionChecksum(n.toString()) !== p) throw new U;
        return s;
    }, t.extensionChecksum = function(t) {
        for(var e = t.length, r = 0, n = e - 2; n >= 0; n -= 2)r += t.charAt(n).charCodeAt(0) - "0".charCodeAt(0);
        r *= 3;
        for(n = e - 1; n >= 0; n -= 2)r += t.charAt(n).charCodeAt(0) - "0".charCodeAt(0);
        return (r *= 3) % 10;
    }, t.prototype.determineCheckDigit = function(t) {
        for(var e = 0; e < 10; e++)if (t === this.CHECK_DIGIT_ENCODINGS[e]) return e;
        throw new U;
    }, t.parseExtensionString = function(e) {
        if (5 !== e.length) return null;
        var r = t.parseExtension5String(e);
        return null == r ? null : new Map([
            [
                it.SUGGESTED_PRICE,
                r
            ]
        ]);
    }, t.parseExtension5String = function(t) {
        var e;
        switch(t.charAt(0)){
            case "0":
                e = "£";
                break;
            case "5":
                e = "$";
                break;
            case "9":
                switch(t){
                    case "90000":
                        return null;
                    case "99991":
                        return "0.00";
                    case "99990":
                        return "Used";
                }
                e = "";
                break;
            default:
                e = "";
        }
        var r = parseInt(t.substring(1)), n = r % 100;
        return e + (r / 100).toString() + "." + (n < 10 ? "0" + n : n.toString());
    }, t;
}(), Zt = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Kt = function() {
    function t() {
        this.decodeMiddleCounters = Int32Array.from([
            0,
            0,
            0,
            0
        ]), this.decodeRowStringBuffer = "";
    }
    return t.prototype.decodeRow = function(e, r, n) {
        var o = this.decodeRowStringBuffer, i = this.decodeMiddle(r, n, o), a = o.toString(), u = t.parseExtensionString(a), s = [
            new At((n[0] + n[1]) / 2, e),
            new At(i, e)
        ], c = new et(a, null, 0, s, nt.UPC_EAN_EXTENSION, (new Date).getTime());
        return null != u && c.putAllMetadata(u), c;
    }, t.prototype.decodeMiddle = function(t, e, r) {
        var n, o, i = this.decodeMiddleCounters;
        i[0] = 0, i[1] = 0, i[2] = 0, i[3] = 0;
        for(var a = t.getSize(), u = e[1], s = 0, c = 0; c < 2 && u < a; c++){
            var f = jt.decodeDigit(t, i, u, jt.L_AND_G_PATTERNS);
            r += String.fromCharCode("0".charCodeAt(0) + f % 10);
            try {
                for(var h = (n = void 0, Zt(i)), l = h.next(); !l.done; l = h.next()){
                    u += l.value;
                }
            } catch (t) {
                n = {
                    error: t
                };
            } finally{
                try {
                    l && !l.done && (o = h.return) && o.call(h);
                } finally{
                    if (n) throw n.error;
                }
            }
            f >= 10 && (s |= 1 << 1 - c), 1 !== c && (u = t.getNextSet(u), u = t.getNextUnset(u));
        }
        if (2 !== r.length) throw new U;
        if (parseInt(r.toString()) % 4 !== s) throw new U;
        return u;
    }, t.parseExtensionString = function(t) {
        return 2 !== t.length ? null : new Map([
            [
                it.ISSUE_NUMBER,
                parseInt(t)
            ]
        ]);
    }, t;
}(), qt = function() {
    function t() {}
    return t.decodeRow = function(t, e, r) {
        var n = jt.findGuardPattern(e, r, !1, this.EXTENSION_START_PATTERN, new Int32Array(this.EXTENSION_START_PATTERN.length).fill(0));
        try {
            return (new Yt).decodeRow(t, e, n);
        } catch (r) {
            return (new Kt).decodeRow(t, e, n);
        }
    }, t.EXTENSION_START_PATTERN = Int32Array.from([
        1,
        1,
        2
    ]), t;
}(), Qt = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Jt = function(t) {
    function e() {
        var r = t.call(this) || this;
        r.decodeRowStringBuffer = "", e.L_AND_G_PATTERNS = e.L_PATTERNS.map(function(t) {
            return Int32Array.from(t);
        });
        for(var n = 10; n < 20; n++){
            for(var o = e.L_PATTERNS[n - 10], i = new Int32Array(o.length), a = 0; a < o.length; a++)i[a] = o[o.length - a - 1];
            e.L_AND_G_PATTERNS[n] = i;
        }
        return r;
    }
    return Qt(e, t), e.prototype.decodeRow = function(t, r, n) {
        var o = e.findStartGuardPattern(r), i = null == n ? null : n.get(T.NEED_RESULT_POINT_CALLBACK);
        if (null != i) {
            var a = new At((o[0] + o[1]) / 2, t);
            i.foundPossibleResultPoint(a);
        }
        var u = this.decodeMiddle(r, o, this.decodeRowStringBuffer), s = u.rowOffset, c = u.resultString;
        if (null != i) {
            var f = new At(s, t);
            i.foundPossibleResultPoint(f);
        }
        var h = e.decodeEnd(r, s);
        if (null != i) {
            var l = new At((h[0] + h[1]) / 2, t);
            i.foundPossibleResultPoint(l);
        }
        var d = h[1], p = d + (d - h[0]);
        if (p >= r.getSize() || !r.isRange(d, p, !1)) throw new U;
        var y = c.toString();
        if (y.length < 8) throw new R;
        if (!e.checkChecksum(y)) throw new g;
        var w = (o[1] + o[0]) / 2, _ = (h[1] + h[0]) / 2, v = this.getBarcodeFormat(), m = [
            new At(w, t),
            new At(_, t)
        ], A = new et(y, null, 0, m, v, (new Date).getTime()), E = 0;
        try {
            var C = qt.decodeRow(t, r, h[1]);
            A.putMetadata(it.UPC_EAN_EXTENSION, C.getText()), A.putAllMetadata(C.getResultMetadata()), A.addResultPoints(C.getResultPoints()), E = C.getText().length;
        } catch (t) {}
        var I = null == n ? null : n.get(T.ALLOWED_EAN_EXTENSIONS);
        if (null != I) {
            var S = !1;
            for(var O in I)if (E.toString() === O) {
                S = !0;
                break;
            }
            if (!S) throw new U;
        }
        return v === nt.EAN_13 || nt.UPC_A, A;
    }, e.checkChecksum = function(t) {
        return e.checkStandardUPCEANChecksum(t);
    }, e.checkStandardUPCEANChecksum = function(t) {
        var r = t.length;
        if (0 === r) return !1;
        var n = parseInt(t.charAt(r - 1), 10);
        return e.getStandardUPCEANChecksum(t.substring(0, r - 1)) === n;
    }, e.getStandardUPCEANChecksum = function(t) {
        for(var e = t.length, r = 0, n = e - 1; n >= 0; n -= 2){
            if ((o = t.charAt(n).charCodeAt(0) - "0".charCodeAt(0)) < 0 || o > 9) throw new R;
            r += o;
        }
        r *= 3;
        for(n = e - 2; n >= 0; n -= 2){
            var o;
            if ((o = t.charAt(n).charCodeAt(0) - "0".charCodeAt(0)) < 0 || o > 9) throw new R;
            r += o;
        }
        return (1e3 - r) % 10;
    }, e.decodeEnd = function(t, r) {
        return e.findGuardPattern(t, r, !1, e.START_END_PATTERN, new Int32Array(e.START_END_PATTERN.length).fill(0));
    }, e;
}(jt), $t = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), te = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, ee = function(t) {
    function e() {
        var e = t.call(this) || this;
        return e.decodeMiddleCounters = Int32Array.from([
            0,
            0,
            0,
            0
        ]), e;
    }
    return $t(e, t), e.prototype.decodeMiddle = function(t, r, n) {
        var o, i, a, u, s = this.decodeMiddleCounters;
        s[0] = 0, s[1] = 0, s[2] = 0, s[3] = 0;
        for(var c = t.getSize(), f = r[1], h = 0, l = 0; l < 6 && f < c; l++){
            var d = Jt.decodeDigit(t, s, f, Jt.L_AND_G_PATTERNS);
            n += String.fromCharCode("0".charCodeAt(0) + d % 10);
            try {
                for(var p = (o = void 0, te(s)), g = p.next(); !g.done; g = p.next()){
                    f += g.value;
                }
            } catch (t) {
                o = {
                    error: t
                };
            } finally{
                try {
                    g && !g.done && (i = p.return) && i.call(p);
                } finally{
                    if (o) throw o.error;
                }
            }
            d >= 10 && (h |= 1 << 5 - l);
        }
        n = e.determineFirstDigit(n, h), f = Jt.findGuardPattern(t, f, !0, Jt.MIDDLE_PATTERN, new Int32Array(Jt.MIDDLE_PATTERN.length).fill(0))[1];
        for(l = 0; l < 6 && f < c; l++){
            d = Jt.decodeDigit(t, s, f, Jt.L_PATTERNS);
            n += String.fromCharCode("0".charCodeAt(0) + d);
            try {
                for(var y = (a = void 0, te(s)), w = y.next(); !w.done; w = y.next()){
                    f += w.value;
                }
            } catch (t) {
                a = {
                    error: t
                };
            } finally{
                try {
                    w && !w.done && (u = y.return) && u.call(y);
                } finally{
                    if (a) throw a.error;
                }
            }
        }
        return {
            rowOffset: f,
            resultString: n
        };
    }, e.prototype.getBarcodeFormat = function() {
        return nt.EAN_13;
    }, e.determineFirstDigit = function(t, e) {
        for(var r = 0; r < 10; r++)if (e === this.FIRST_DIGIT_ENCODINGS[r]) return t = String.fromCharCode("0".charCodeAt(0) + r) + t;
        throw new U;
    }, e.FIRST_DIGIT_ENCODINGS = [
        0,
        11,
        13,
        14,
        19,
        25,
        28,
        21,
        22,
        26
    ], e;
}(Jt), re = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), ne = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, oe = function(t) {
    function e() {
        var e = t.call(this) || this;
        return e.decodeMiddleCounters = Int32Array.from([
            0,
            0,
            0,
            0
        ]), e;
    }
    return re(e, t), e.prototype.decodeMiddle = function(t, e, r) {
        var n, o, i, a, u = this.decodeMiddleCounters;
        u[0] = 0, u[1] = 0, u[2] = 0, u[3] = 0;
        for(var s = t.getSize(), c = e[1], f = 0; f < 4 && c < s; f++){
            var h = Jt.decodeDigit(t, u, c, Jt.L_PATTERNS);
            r += String.fromCharCode("0".charCodeAt(0) + h);
            try {
                for(var l = (n = void 0, ne(u)), d = l.next(); !d.done; d = l.next()){
                    c += d.value;
                }
            } catch (t) {
                n = {
                    error: t
                };
            } finally{
                try {
                    d && !d.done && (o = l.return) && o.call(l);
                } finally{
                    if (n) throw n.error;
                }
            }
        }
        c = Jt.findGuardPattern(t, c, !0, Jt.MIDDLE_PATTERN, new Int32Array(Jt.MIDDLE_PATTERN.length).fill(0))[1];
        for(f = 0; f < 4 && c < s; f++){
            h = Jt.decodeDigit(t, u, c, Jt.L_PATTERNS);
            r += String.fromCharCode("0".charCodeAt(0) + h);
            try {
                for(var p = (i = void 0, ne(u)), g = p.next(); !g.done; g = p.next()){
                    c += g.value;
                }
            } catch (t) {
                i = {
                    error: t
                };
            } finally{
                try {
                    g && !g.done && (a = p.return) && a.call(p);
                } finally{
                    if (i) throw i.error;
                }
            }
        }
        return {
            rowOffset: c,
            resultString: r
        };
    }, e.prototype.getBarcodeFormat = function() {
        return nt.EAN_8;
    }, e;
}(Jt), ie = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), ae = function(t) {
    function e() {
        var e = null !== t && t.apply(this, arguments) || this;
        return e.ean13Reader = new ee, e;
    }
    return ie(e, t), e.prototype.getBarcodeFormat = function() {
        return nt.UPC_A;
    }, e.prototype.decode = function(t, e) {
        return this.maybeReturnResult(this.ean13Reader.decode(t));
    }, e.prototype.decodeRow = function(t, e, r) {
        return this.maybeReturnResult(this.ean13Reader.decodeRow(t, e, r));
    }, e.prototype.decodeMiddle = function(t, e, r) {
        return this.ean13Reader.decodeMiddle(t, e, r);
    }, e.prototype.maybeReturnResult = function(t) {
        var e = t.getText();
        if ("0" === e.charAt(0)) {
            var r = new et(e.substring(1), null, null, t.getResultPoints(), nt.UPC_A);
            return null != t.getResultMetadata() && r.putAllMetadata(t.getResultMetadata()), r;
        }
        throw new U;
    }, e.prototype.reset = function() {
        this.ean13Reader.reset();
    }, e;
}(Jt), ue = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), se = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, ce = function(t) {
    function e() {
        var e = t.call(this) || this;
        return e.decodeMiddleCounters = new Int32Array(4), e;
    }
    return ue(e, t), e.prototype.decodeMiddle = function(t, r, n) {
        var o, i, a = this.decodeMiddleCounters.map(function(t) {
            return t;
        });
        a[0] = 0, a[1] = 0, a[2] = 0, a[3] = 0;
        for(var u = t.getSize(), s = r[1], c = 0, f = 0; f < 6 && s < u; f++){
            var h = e.decodeDigit(t, a, s, e.L_AND_G_PATTERNS);
            n += String.fromCharCode("0".charCodeAt(0) + h % 10);
            try {
                for(var l = (o = void 0, se(a)), d = l.next(); !d.done; d = l.next()){
                    s += d.value;
                }
            } catch (t) {
                o = {
                    error: t
                };
            } finally{
                try {
                    d && !d.done && (i = l.return) && i.call(l);
                } finally{
                    if (o) throw o.error;
                }
            }
            h >= 10 && (c |= 1 << 5 - f);
        }
        return e.determineNumSysAndCheckDigit(new k(n), c), s;
    }, e.prototype.decodeEnd = function(t, r) {
        return e.findGuardPatternWithoutCounters(t, r, !0, e.MIDDLE_END_PATTERN);
    }, e.prototype.checkChecksum = function(t) {
        return Jt.checkChecksum(e.convertUPCEtoUPCA(t));
    }, e.determineNumSysAndCheckDigit = function(t, e) {
        for(var r = 0; r <= 1; r++)for(var n = 0; n < 10; n++)if (e === this.NUMSYS_AND_CHECK_DIGIT_PATTERNS[r][n]) return t.insert(0, "0" + r), void t.append("0" + n);
        throw U.getNotFoundInstance();
    }, e.prototype.getBarcodeFormat = function() {
        return nt.UPC_E;
    }, e.convertUPCEtoUPCA = function(t) {
        var e = t.slice(1, 7).split("").map(function(t) {
            return t.charCodeAt(0);
        }), r = new k;
        r.append(t.charAt(0));
        var n = e[5];
        switch(n){
            case 0:
            case 1:
            case 2:
                r.appendChars(e, 0, 2), r.append(n), r.append("0000"), r.appendChars(e, 2, 3);
                break;
            case 3:
                r.appendChars(e, 0, 3), r.append("00000"), r.appendChars(e, 3, 2);
                break;
            case 4:
                r.appendChars(e, 0, 4), r.append("00000"), r.append(e[4]);
                break;
            default:
                r.appendChars(e, 0, 5), r.append("0000"), r.append(n);
        }
        return t.length >= 8 && r.append(t.charAt(7)), r.toString();
    }, e.MIDDLE_END_PATTERN = Int32Array.from([
        1,
        1,
        1,
        1,
        1,
        1
    ]), e.NUMSYS_AND_CHECK_DIGIT_PATTERNS = [
        Int32Array.from([
            56,
            52,
            50,
            49,
            44,
            38,
            35,
            42,
            41,
            37
        ]),
        Int32Array.from([
            7,
            11,
            13,
            14,
            19,
            25,
            28,
            21,
            22,
            1
        ])
    ], e;
}(Jt), fe = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), he = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, le = function(t) {
    function e(e) {
        var r = t.call(this) || this, n = null == e ? null : e.get(T.POSSIBLE_FORMATS), o = [];
        return null != n && (n.indexOf(nt.EAN_13) > -1 ? o.push(new ee) : n.indexOf(nt.UPC_A) > -1 && o.push(new ae), n.indexOf(nt.EAN_8) > -1 && o.push(new oe), n.indexOf(nt.UPC_E) > -1 && o.push(new ce)), 0 === o.length && (o.push(new ee), o.push(new oe), o.push(new ce)), r.readers = o, r;
    }
    return fe(e, t), e.prototype.decodeRow = function(t, e, r) {
        var n, o;
        try {
            for(var i = he(this.readers), a = i.next(); !a.done; a = i.next()){
                var u = a.value;
                try {
                    var s = u.decodeRow(t, e, r), c = s.getBarcodeFormat() === nt.EAN_13 && "0" === s.getText().charAt(0), f = null == r ? null : r.get(T.POSSIBLE_FORMATS), h = null == f || f.includes(nt.UPC_A);
                    if (c && h) {
                        var l = s.getRawBytes(), d = new et(s.getText().substring(1), l, l.length, s.getResultPoints(), nt.UPC_A);
                        return d.putAllMetadata(s.getResultMetadata()), d;
                    }
                    return s;
                } catch (t) {}
            }
        } catch (t) {
            n = {
                error: t
            };
        } finally{
            try {
                a && !a.done && (o = i.return) && o.call(i);
            } finally{
                if (n) throw n.error;
            }
        }
        throw new U;
    }, e.prototype.reset = function() {
        var t, e;
        try {
            for(var r = he(this.readers), n = r.next(); !n.done; n = r.next()){
                n.value.reset();
            }
        } catch (e) {
            t = {
                error: e
            };
        } finally{
            try {
                n && !n.done && (e = r.return) && e.call(r);
            } finally{
                if (t) throw t.error;
            }
        }
    }, e;
}(Lt), de = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), pe = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, ge = function(t) {
    function e() {
        var e = t.call(this) || this;
        return e.decodeFinderCounters = new Int32Array(4), e.dataCharacterCounters = new Int32Array(8), e.oddRoundingErrors = new Array(4), e.evenRoundingErrors = new Array(4), e.oddCounts = new Array(e.dataCharacterCounters.length / 2), e.evenCounts = new Array(e.dataCharacterCounters.length / 2), e;
    }
    return de(e, t), e.prototype.getDecodeFinderCounters = function() {
        return this.decodeFinderCounters;
    }, e.prototype.getDataCharacterCounters = function() {
        return this.dataCharacterCounters;
    }, e.prototype.getOddRoundingErrors = function() {
        return this.oddRoundingErrors;
    }, e.prototype.getEvenRoundingErrors = function() {
        return this.evenRoundingErrors;
    }, e.prototype.getOddCounts = function() {
        return this.oddCounts;
    }, e.prototype.getEvenCounts = function() {
        return this.evenCounts;
    }, e.prototype.parseFinderValue = function(t, r) {
        for(var n = 0; n < r.length; n++)if (Lt.patternMatchVariance(t, r[n], e.MAX_INDIVIDUAL_VARIANCE) < e.MAX_AVG_VARIANCE) return n;
        throw new U;
    }, e.count = function(t) {
        return vt.sum(new Int32Array(t));
    }, e.increment = function(t, e) {
        for(var r = 0, n = e[0], o = 1; o < t.length; o++)e[o] > n && (n = e[o], r = o);
        t[r]++;
    }, e.decrement = function(t, e) {
        for(var r = 0, n = e[0], o = 1; o < t.length; o++)e[o] < n && (n = e[o], r = o);
        t[r]--;
    }, e.isFinderPattern = function(t) {
        var r, n, o = t[0] + t[1], i = o / (o + t[2] + t[3]);
        if (i >= e.MIN_FINDER_PATTERN_RATIO && i <= e.MAX_FINDER_PATTERN_RATIO) {
            var a = Number.MAX_SAFE_INTEGER, u = Number.MIN_SAFE_INTEGER;
            try {
                for(var s = pe(t), c = s.next(); !c.done; c = s.next()){
                    var f = c.value;
                    f > u && (u = f), f < a && (a = f);
                }
            } catch (t) {
                r = {
                    error: t
                };
            } finally{
                try {
                    c && !c.done && (n = s.return) && n.call(s);
                } finally{
                    if (r) throw r.error;
                }
            }
            return u < 10 * a;
        }
        return !1;
    }, e.MAX_AVG_VARIANCE = .2, e.MAX_INDIVIDUAL_VARIANCE = .45, e.MIN_FINDER_PATTERN_RATIO = 9.5 / 12, e.MAX_FINDER_PATTERN_RATIO = 12.5 / 14, e;
}(Lt), ye = function() {
    function t(t, e) {
        this.value = t, this.checksumPortion = e;
    }
    return t.prototype.getValue = function() {
        return this.value;
    }, t.prototype.getChecksumPortion = function() {
        return this.checksumPortion;
    }, t.prototype.toString = function() {
        return this.value + "(" + this.checksumPortion + ")";
    }, t.prototype.equals = function(e) {
        if (!(e instanceof t)) return !1;
        var r = e;
        return this.value === r.value && this.checksumPortion === r.checksumPortion;
    }, t.prototype.hashCode = function() {
        return this.value ^ this.checksumPortion;
    }, t;
}(), we = function() {
    function t(t, e, r, n, o) {
        this.value = t, this.startEnd = e, this.value = t, this.startEnd = e, this.resultPoints = new Array, this.resultPoints.push(new At(r, o)), this.resultPoints.push(new At(n, o));
    }
    return t.prototype.getValue = function() {
        return this.value;
    }, t.prototype.getStartEnd = function() {
        return this.startEnd;
    }, t.prototype.getResultPoints = function() {
        return this.resultPoints;
    }, t.prototype.equals = function(e) {
        if (!(e instanceof t)) return !1;
        var r = e;
        return this.value === r.value;
    }, t.prototype.hashCode = function() {
        return this.value;
    }, t;
}(), _e = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, ve = function() {
    function t() {}
    return t.getRSSvalue = function(e, r, n) {
        var o, i, a = 0;
        try {
            for(var u = _e(e), s = u.next(); !s.done; s = u.next()){
                a += s.value;
            }
        } catch (t) {
            o = {
                error: t
            };
        } finally{
            try {
                s && !s.done && (i = u.return) && i.call(u);
            } finally{
                if (o) throw o.error;
            }
        }
        for(var c = 0, f = 0, h = e.length, l = 0; l < h - 1; l++){
            var d = void 0;
            for(d = 1, f |= 1 << l; d < e[l]; d++, f &= ~(1 << l)){
                var p = t.combins(a - d - 1, h - l - 2);
                if (n && 0 === f && a - d - (h - l - 1) >= h - l - 1 && (p -= t.combins(a - d - (h - l), h - l - 2)), h - l - 1 > 1) {
                    for(var g = 0, y = a - d - (h - l - 2); y > r; y--)g += t.combins(a - d - y - 1, h - l - 3);
                    p -= g * (h - 1 - l);
                } else a - d > r && p--;
                c += p;
            }
            a -= d;
        }
        return c;
    }, t.combins = function(t, e) {
        var r, n;
        t - e > e ? (n = e, r = t - e) : (n = t - e, r = e);
        for(var o = 1, i = 1, a = t; a > r; a--)o *= a, i <= n && (o /= i, i++);
        for(; i <= n;)o /= i, i++;
        return o;
    }, t;
}(), me = function() {
    function t() {}
    return t.buildBitArray = function(t) {
        var e = 2 * t.length - 1;
        null == t[t.length - 1].getRightChar() && (e -= 1);
        for(var r = new S(12 * e), n = 0, o = t[0].getRightChar().getValue(), i = 11; i >= 0; --i)0 != (o & 1 << i) && r.set(n), n++;
        for(i = 1; i < t.length; ++i){
            for(var a = t[i], u = a.getLeftChar().getValue(), s = 11; s >= 0; --s)0 != (u & 1 << s) && r.set(n), n++;
            if (null != a.getRightChar()) {
                var c = a.getRightChar().getValue();
                for(s = 11; s >= 0; --s)0 != (c & 1 << s) && r.set(n), n++;
            }
        }
        return r;
    }, t;
}(), Ae = function() {
    function t(t, e) {
        e ? this.decodedInformation = null : (this.finished = t, this.decodedInformation = e);
    }
    return t.prototype.getDecodedInformation = function() {
        return this.decodedInformation;
    }, t.prototype.isFinished = function() {
        return this.finished;
    }, t;
}(), Ee = function() {
    function t(t) {
        this.newPosition = t;
    }
    return t.prototype.getNewPosition = function() {
        return this.newPosition;
    }, t;
}(), Ce = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Ie = function(t) {
    function e(e, r) {
        var n = t.call(this, e) || this;
        return n.value = r, n;
    }
    return Ce(e, t), e.prototype.getValue = function() {
        return this.value;
    }, e.prototype.isFNC1 = function() {
        return this.value === e.FNC1;
    }, e.FNC1 = "$", e;
}(Ee), Se = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Oe = function(t) {
    function e(e, r, n) {
        var o = t.call(this, e) || this;
        return n ? (o.remaining = !0, o.remainingValue = o.remainingValue) : (o.remaining = !1, o.remainingValue = 0), o.newString = r, o;
    }
    return Se(e, t), e.prototype.getNewString = function() {
        return this.newString;
    }, e.prototype.isRemaining = function() {
        return this.remaining;
    }, e.prototype.getRemainingValue = function() {
        return this.remainingValue;
    }, e;
}(Ee), Te = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), be = function(t) {
    function e(e, r, n) {
        var o = t.call(this, e) || this;
        if (r < 0 || r > 10 || n < 0 || n > 10) throw new R;
        return o.firstDigit = r, o.secondDigit = n, o;
    }
    return Te(e, t), e.prototype.getFirstDigit = function() {
        return this.firstDigit;
    }, e.prototype.getSecondDigit = function() {
        return this.secondDigit;
    }, e.prototype.getValue = function() {
        return 10 * this.firstDigit + this.secondDigit;
    }, e.prototype.isFirstDigitFNC1 = function() {
        return this.firstDigit === e.FNC1;
    }, e.prototype.isSecondDigitFNC1 = function() {
        return this.secondDigit === e.FNC1;
    }, e.prototype.isAnyFNC1 = function() {
        return this.firstDigit === e.FNC1 || this.secondDigit === e.FNC1;
    }, e.FNC1 = 10, e;
}(Ee), Re = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Ne = function() {
    function t() {}
    return t.parseFieldsInGeneralPurpose = function(e) {
        var r, n, o, i, a, u, s, c;
        if (!e) return null;
        if (e.length < 2) throw new U;
        var f = e.substring(0, 2);
        try {
            for(var h = Re(t.TWO_DIGIT_DATA_LENGTH), l = h.next(); !l.done; l = h.next()){
                if ((A = l.value)[0] === f) return A[1] === t.VARIABLE_LENGTH ? t.processVariableAI(2, A[2], e) : t.processFixedAI(2, A[1], e);
            }
        } catch (t) {
            r = {
                error: t
            };
        } finally{
            try {
                l && !l.done && (n = h.return) && n.call(h);
            } finally{
                if (r) throw r.error;
            }
        }
        if (e.length < 3) throw new U;
        var d = e.substring(0, 3);
        try {
            for(var p = Re(t.THREE_DIGIT_DATA_LENGTH), g = p.next(); !g.done; g = p.next()){
                if ((A = g.value)[0] === d) return A[1] === t.VARIABLE_LENGTH ? t.processVariableAI(3, A[2], e) : t.processFixedAI(3, A[1], e);
            }
        } catch (t) {
            o = {
                error: t
            };
        } finally{
            try {
                g && !g.done && (i = p.return) && i.call(p);
            } finally{
                if (o) throw o.error;
            }
        }
        try {
            for(var y = Re(t.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH), w = y.next(); !w.done; w = y.next()){
                if ((A = w.value)[0] === d) return A[1] === t.VARIABLE_LENGTH ? t.processVariableAI(4, A[2], e) : t.processFixedAI(4, A[1], e);
            }
        } catch (t) {
            a = {
                error: t
            };
        } finally{
            try {
                w && !w.done && (u = y.return) && u.call(y);
            } finally{
                if (a) throw a.error;
            }
        }
        if (e.length < 4) throw new U;
        var _ = e.substring(0, 4);
        try {
            for(var v = Re(t.FOUR_DIGIT_DATA_LENGTH), m = v.next(); !m.done; m = v.next()){
                var A;
                if ((A = m.value)[0] === _) return A[1] === t.VARIABLE_LENGTH ? t.processVariableAI(4, A[2], e) : t.processFixedAI(4, A[1], e);
            }
        } catch (t) {
            s = {
                error: t
            };
        } finally{
            try {
                m && !m.done && (c = v.return) && c.call(v);
            } finally{
                if (s) throw s.error;
            }
        }
        throw new U;
    }, t.processFixedAI = function(e, r, n) {
        if (n.length < e) throw new U;
        var o = n.substring(0, e);
        if (n.length < e + r) throw new U;
        var i = n.substring(e, e + r), a = n.substring(e + r), u = "(" + o + ")" + i, s = t.parseFieldsInGeneralPurpose(a);
        return null == s ? u : u + s;
    }, t.processVariableAI = function(e, r, n) {
        var o, i = n.substring(0, e);
        o = n.length < e + r ? n.length : e + r;
        var a = n.substring(e, o), u = n.substring(o), s = "(" + i + ")" + a, c = t.parseFieldsInGeneralPurpose(u);
        return null == c ? s : s + c;
    }, t.VARIABLE_LENGTH = [], t.TWO_DIGIT_DATA_LENGTH = [
        [
            "00",
            18
        ],
        [
            "01",
            14
        ],
        [
            "02",
            14
        ],
        [
            "10",
            t.VARIABLE_LENGTH,
            20
        ],
        [
            "11",
            6
        ],
        [
            "12",
            6
        ],
        [
            "13",
            6
        ],
        [
            "15",
            6
        ],
        [
            "17",
            6
        ],
        [
            "20",
            2
        ],
        [
            "21",
            t.VARIABLE_LENGTH,
            20
        ],
        [
            "22",
            t.VARIABLE_LENGTH,
            29
        ],
        [
            "30",
            t.VARIABLE_LENGTH,
            8
        ],
        [
            "37",
            t.VARIABLE_LENGTH,
            8
        ],
        [
            "90",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "91",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "92",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "93",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "94",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "95",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "96",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "97",
            t.VARIABLE_LENGTH,
            3
        ],
        [
            "98",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "99",
            t.VARIABLE_LENGTH,
            30
        ]
    ], t.THREE_DIGIT_DATA_LENGTH = [
        [
            "240",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "241",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "242",
            t.VARIABLE_LENGTH,
            6
        ],
        [
            "250",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "251",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "253",
            t.VARIABLE_LENGTH,
            17
        ],
        [
            "254",
            t.VARIABLE_LENGTH,
            20
        ],
        [
            "400",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "401",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "402",
            17
        ],
        [
            "403",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "410",
            13
        ],
        [
            "411",
            13
        ],
        [
            "412",
            13
        ],
        [
            "413",
            13
        ],
        [
            "414",
            13
        ],
        [
            "420",
            t.VARIABLE_LENGTH,
            20
        ],
        [
            "421",
            t.VARIABLE_LENGTH,
            15
        ],
        [
            "422",
            3
        ],
        [
            "423",
            t.VARIABLE_LENGTH,
            15
        ],
        [
            "424",
            3
        ],
        [
            "425",
            3
        ],
        [
            "426",
            3
        ]
    ], t.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH = [
        [
            "310",
            6
        ],
        [
            "311",
            6
        ],
        [
            "312",
            6
        ],
        [
            "313",
            6
        ],
        [
            "314",
            6
        ],
        [
            "315",
            6
        ],
        [
            "316",
            6
        ],
        [
            "320",
            6
        ],
        [
            "321",
            6
        ],
        [
            "322",
            6
        ],
        [
            "323",
            6
        ],
        [
            "324",
            6
        ],
        [
            "325",
            6
        ],
        [
            "326",
            6
        ],
        [
            "327",
            6
        ],
        [
            "328",
            6
        ],
        [
            "329",
            6
        ],
        [
            "330",
            6
        ],
        [
            "331",
            6
        ],
        [
            "332",
            6
        ],
        [
            "333",
            6
        ],
        [
            "334",
            6
        ],
        [
            "335",
            6
        ],
        [
            "336",
            6
        ],
        [
            "340",
            6
        ],
        [
            "341",
            6
        ],
        [
            "342",
            6
        ],
        [
            "343",
            6
        ],
        [
            "344",
            6
        ],
        [
            "345",
            6
        ],
        [
            "346",
            6
        ],
        [
            "347",
            6
        ],
        [
            "348",
            6
        ],
        [
            "349",
            6
        ],
        [
            "350",
            6
        ],
        [
            "351",
            6
        ],
        [
            "352",
            6
        ],
        [
            "353",
            6
        ],
        [
            "354",
            6
        ],
        [
            "355",
            6
        ],
        [
            "356",
            6
        ],
        [
            "357",
            6
        ],
        [
            "360",
            6
        ],
        [
            "361",
            6
        ],
        [
            "362",
            6
        ],
        [
            "363",
            6
        ],
        [
            "364",
            6
        ],
        [
            "365",
            6
        ],
        [
            "366",
            6
        ],
        [
            "367",
            6
        ],
        [
            "368",
            6
        ],
        [
            "369",
            6
        ],
        [
            "390",
            t.VARIABLE_LENGTH,
            15
        ],
        [
            "391",
            t.VARIABLE_LENGTH,
            18
        ],
        [
            "392",
            t.VARIABLE_LENGTH,
            15
        ],
        [
            "393",
            t.VARIABLE_LENGTH,
            18
        ],
        [
            "703",
            t.VARIABLE_LENGTH,
            30
        ]
    ], t.FOUR_DIGIT_DATA_LENGTH = [
        [
            "7001",
            13
        ],
        [
            "7002",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "7003",
            10
        ],
        [
            "8001",
            14
        ],
        [
            "8002",
            t.VARIABLE_LENGTH,
            20
        ],
        [
            "8003",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "8004",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "8005",
            6
        ],
        [
            "8006",
            18
        ],
        [
            "8007",
            t.VARIABLE_LENGTH,
            30
        ],
        [
            "8008",
            t.VARIABLE_LENGTH,
            12
        ],
        [
            "8018",
            18
        ],
        [
            "8020",
            t.VARIABLE_LENGTH,
            25
        ],
        [
            "8100",
            6
        ],
        [
            "8101",
            10
        ],
        [
            "8102",
            2
        ],
        [
            "8110",
            t.VARIABLE_LENGTH,
            70
        ],
        [
            "8200",
            t.VARIABLE_LENGTH,
            70
        ]
    ], t;
}(), De = function() {
    function t(t) {
        this.buffer = new k, this.information = t;
    }
    return t.prototype.decodeAllCodes = function(t, e) {
        for(var r = e, n = null;;){
            var o = this.decodeGeneralPurposeField(r, n), i = Ne.parseFieldsInGeneralPurpose(o.getNewString());
            if (null != i && t.append(i), n = o.isRemaining() ? "" + o.getRemainingValue() : null, r === o.getNewPosition()) break;
            r = o.getNewPosition();
        }
        return t.toString();
    }, t.prototype.isStillNumeric = function(t) {
        if (t + 7 > this.information.getSize()) return t + 4 <= this.information.getSize();
        for(var e = t; e < t + 3; ++e)if (this.information.get(e)) return !0;
        return this.information.get(t + 3);
    }, t.prototype.decodeNumeric = function(t) {
        if (t + 7 > this.information.getSize()) {
            var e = this.extractNumericValueFromBitArray(t, 4);
            return new be(this.information.getSize(), 0 === e ? be.FNC1 : e - 1, be.FNC1);
        }
        var r = this.extractNumericValueFromBitArray(t, 7);
        return new be(t + 7, (r - 8) / 11, (r - 8) % 11);
    }, t.prototype.extractNumericValueFromBitArray = function(e, r) {
        return t.extractNumericValueFromBitArray(this.information, e, r);
    }, t.extractNumericValueFromBitArray = function(t, e, r) {
        for(var n = 0, o = 0; o < r; ++o)t.get(e + o) && (n |= 1 << r - o - 1);
        return n;
    }, t.prototype.decodeGeneralPurposeField = function(t, e) {
        this.buffer.setLengthToZero(), null != e && this.buffer.append(e), this.current.setPosition(t);
        var r = this.parseBlocks();
        return null != r && r.isRemaining() ? new Oe(this.current.getPosition(), this.buffer.toString(), r.getRemainingValue()) : new Oe(this.current.getPosition(), this.buffer.toString());
    }, t.prototype.parseBlocks = function() {
        var t, e;
        do {
            var r = this.current.getPosition();
            if (t = this.current.isAlpha() ? (e = this.parseAlphaBlock()).isFinished() : this.current.isIsoIec646() ? (e = this.parseIsoIec646Block()).isFinished() : (e = this.parseNumericBlock()).isFinished(), !(r !== this.current.getPosition()) && !t) break;
        }while (!t)
        return e.getDecodedInformation();
    }, t.prototype.parseNumericBlock = function() {
        for(; this.isStillNumeric(this.current.getPosition());){
            var t = this.decodeNumeric(this.current.getPosition());
            if (this.current.setPosition(t.getNewPosition()), t.isFirstDigitFNC1()) {
                var e = void 0;
                return e = t.isSecondDigitFNC1() ? new Oe(this.current.getPosition(), this.buffer.toString()) : new Oe(this.current.getPosition(), this.buffer.toString(), t.getSecondDigit()), new Ae(!0, e);
            }
            if (this.buffer.append(t.getFirstDigit()), t.isSecondDigitFNC1()) {
                e = new Oe(this.current.getPosition(), this.buffer.toString());
                return new Ae(!0, e);
            }
            this.buffer.append(t.getSecondDigit());
        }
        return this.isNumericToAlphaNumericLatch(this.current.getPosition()) && (this.current.setAlpha(), this.current.incrementPosition(4)), new Ae(!1);
    }, t.prototype.parseIsoIec646Block = function() {
        for(; this.isStillIsoIec646(this.current.getPosition());){
            var t = this.decodeIsoIec646(this.current.getPosition());
            if (this.current.setPosition(t.getNewPosition()), t.isFNC1()) {
                var e = new Oe(this.current.getPosition(), this.buffer.toString());
                return new Ae(!0, e);
            }
            this.buffer.append(t.getValue());
        }
        return this.isAlphaOr646ToNumericLatch(this.current.getPosition()) ? (this.current.incrementPosition(3), this.current.setNumeric()) : this.isAlphaTo646ToAlphaLatch(this.current.getPosition()) && (this.current.getPosition() + 5 < this.information.getSize() ? this.current.incrementPosition(5) : this.current.setPosition(this.information.getSize()), this.current.setAlpha()), new Ae(!1);
    }, t.prototype.parseAlphaBlock = function() {
        for(; this.isStillAlpha(this.current.getPosition());){
            var t = this.decodeAlphanumeric(this.current.getPosition());
            if (this.current.setPosition(t.getNewPosition()), t.isFNC1()) {
                var e = new Oe(this.current.getPosition(), this.buffer.toString());
                return new Ae(!0, e);
            }
            this.buffer.append(t.getValue());
        }
        return this.isAlphaOr646ToNumericLatch(this.current.getPosition()) ? (this.current.incrementPosition(3), this.current.setNumeric()) : this.isAlphaTo646ToAlphaLatch(this.current.getPosition()) && (this.current.getPosition() + 5 < this.information.getSize() ? this.current.incrementPosition(5) : this.current.setPosition(this.information.getSize()), this.current.setIsoIec646()), new Ae(!1);
    }, t.prototype.isStillIsoIec646 = function(t) {
        if (t + 5 > this.information.getSize()) return !1;
        var e = this.extractNumericValueFromBitArray(t, 5);
        if (e >= 5 && e < 16) return !0;
        if (t + 7 > this.information.getSize()) return !1;
        var r = this.extractNumericValueFromBitArray(t, 7);
        if (r >= 64 && r < 116) return !0;
        if (t + 8 > this.information.getSize()) return !1;
        var n = this.extractNumericValueFromBitArray(t, 8);
        return n >= 232 && n < 253;
    }, t.prototype.decodeIsoIec646 = function(t) {
        var e = this.extractNumericValueFromBitArray(t, 5);
        if (15 === e) return new Ie(t + 5, Ie.FNC1);
        if (e >= 5 && e < 15) return new Ie(t + 5, "0" + (e - 5));
        var r, n = this.extractNumericValueFromBitArray(t, 7);
        if (n >= 64 && n < 90) return new Ie(t + 7, "" + (n + 1));
        if (n >= 90 && n < 116) return new Ie(t + 7, "" + (n + 7));
        switch(this.extractNumericValueFromBitArray(t, 8)){
            case 232:
                r = "!";
                break;
            case 233:
                r = '"';
                break;
            case 234:
                r = "%";
                break;
            case 235:
                r = "&";
                break;
            case 236:
                r = "'";
                break;
            case 237:
                r = "(";
                break;
            case 238:
                r = ")";
                break;
            case 239:
                r = "*";
                break;
            case 240:
                r = "+";
                break;
            case 241:
                r = ",";
                break;
            case 242:
                r = "-";
                break;
            case 243:
                r = ".";
                break;
            case 244:
                r = "/";
                break;
            case 245:
                r = ":";
                break;
            case 246:
                r = ";";
                break;
            case 247:
                r = "<";
                break;
            case 248:
                r = "=";
                break;
            case 249:
                r = ">";
                break;
            case 250:
                r = "?";
                break;
            case 251:
                r = "_";
                break;
            case 252:
                r = " ";
                break;
            default:
                throw new R;
        }
        return new Ie(t + 8, r);
    }, t.prototype.isStillAlpha = function(t) {
        if (t + 5 > this.information.getSize()) return !1;
        var e = this.extractNumericValueFromBitArray(t, 5);
        if (e >= 5 && e < 16) return !0;
        if (t + 6 > this.information.getSize()) return !1;
        var r = this.extractNumericValueFromBitArray(t, 6);
        return r >= 16 && r < 63;
    }, t.prototype.decodeAlphanumeric = function(t) {
        var e = this.extractNumericValueFromBitArray(t, 5);
        if (15 === e) return new Ie(t + 5, Ie.FNC1);
        if (e >= 5 && e < 15) return new Ie(t + 5, "0" + (e - 5));
        var r, n = this.extractNumericValueFromBitArray(t, 6);
        if (n >= 32 && n < 58) return new Ie(t + 6, "" + (n + 33));
        switch(n){
            case 58:
                r = "*";
                break;
            case 59:
                r = ",";
                break;
            case 60:
                r = "-";
                break;
            case 61:
                r = ".";
                break;
            case 62:
                r = "/";
                break;
            default:
                throw new yt("Decoding invalid alphanumeric value: " + n);
        }
        return new Ie(t + 6, r);
    }, t.prototype.isAlphaTo646ToAlphaLatch = function(t) {
        if (t + 1 > this.information.getSize()) return !1;
        for(var e = 0; e < 5 && e + t < this.information.getSize(); ++e)if (2 === e) {
            if (!this.information.get(t + 2)) return !1;
        } else if (this.information.get(t + e)) return !1;
        return !0;
    }, t.prototype.isAlphaOr646ToNumericLatch = function(t) {
        if (t + 3 > this.information.getSize()) return !1;
        for(var e = t; e < t + 3; ++e)if (this.information.get(e)) return !1;
        return !0;
    }, t.prototype.isNumericToAlphaNumericLatch = function(t) {
        if (t + 1 > this.information.getSize()) return !1;
        for(var e = 0; e < 4 && e + t < this.information.getSize(); ++e)if (this.information.get(t + e)) return !1;
        return !0;
    }, t;
}(), Pe = function() {
    function t(t) {
        this.information = t, this.generalDecoder = new De(t);
    }
    return t.prototype.getInformation = function() {
        return this.information;
    }, t.prototype.getGeneralDecoder = function() {
        return this.generalDecoder;
    }, t;
}(), Me = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Be = function(t) {
    function e(e) {
        return t.call(this, e) || this;
    }
    return Me(e, t), e.prototype.encodeCompressedGtin = function(t, e) {
        t.append("(01)");
        var r = t.length();
        t.append("9"), this.encodeCompressedGtinWithoutAI(t, e, r);
    }, e.prototype.encodeCompressedGtinWithoutAI = function(t, r, n) {
        for(var o = 0; o < 4; ++o){
            var i = this.getGeneralDecoder().extractNumericValueFromBitArray(r + 10 * o, 10);
            i / 100 == 0 && t.append("0"), i / 10 == 0 && t.append("0"), t.append(i);
        }
        e.appendCheckDigit(t, n);
    }, e.appendCheckDigit = function(t, e) {
        for(var r = 0, n = 0; n < 13; n++){
            var o = t.charAt(n + e).charCodeAt(0) - "0".charCodeAt(0);
            r += 0 == (1 & n) ? 3 * o : o;
        }
        10 === (r = 10 - r % 10) && (r = 0), t.append(r);
    }, e.GTIN_SIZE = 40, e;
}(Pe), Le = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Fe = function(t) {
    function e(e) {
        return t.call(this, e) || this;
    }
    return Le(e, t), e.prototype.parseInformation = function() {
        var t = new k;
        t.append("(01)");
        var r = t.length(), n = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE, 4);
        return t.append(n), this.encodeCompressedGtinWithoutAI(t, e.HEADER_SIZE + 4, r), this.getGeneralDecoder().decodeAllCodes(t, e.HEADER_SIZE + 44);
    }, e.HEADER_SIZE = 4, e;
}(Be), ke = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), xe = function(t) {
    function e(e) {
        return t.call(this, e) || this;
    }
    return ke(e, t), e.prototype.parseInformation = function() {
        var t = new k;
        return this.getGeneralDecoder().decodeAllCodes(t, e.HEADER_SIZE);
    }, e.HEADER_SIZE = 5, e;
}(Pe), Ve = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Ue = function(t) {
    function e(e) {
        return t.call(this, e) || this;
    }
    return Ve(e, t), e.prototype.encodeCompressedWeight = function(t, e, r) {
        var n = this.getGeneralDecoder().extractNumericValueFromBitArray(e, r);
        this.addWeightCode(t, n);
        for(var o = this.checkWeight(n), i = 1e5, a = 0; a < 5; ++a)o / i == 0 && t.append("0"), i /= 10;
        t.append(o);
    }, e;
}(Be), He = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Ge = function(t) {
    function e(e) {
        return t.call(this, e) || this;
    }
    return He(e, t), e.prototype.parseInformation = function() {
        if (this.getInformation().getSize() != e.HEADER_SIZE + Ue.GTIN_SIZE + e.WEIGHT_SIZE) throw new U;
        var t = new k;
        return this.encodeCompressedGtin(t, e.HEADER_SIZE), this.encodeCompressedWeight(t, e.HEADER_SIZE + Ue.GTIN_SIZE, e.WEIGHT_SIZE), t.toString();
    }, e.HEADER_SIZE = 5, e.WEIGHT_SIZE = 15, e;
}(Ue), Xe = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), We = function(t) {
    function e(e) {
        return t.call(this, e) || this;
    }
    return Xe(e, t), e.prototype.addWeightCode = function(t, e) {
        t.append("(3103)");
    }, e.prototype.checkWeight = function(t) {
        return t;
    }, e;
}(Ge), je = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), ze = function(t) {
    function e(e) {
        return t.call(this, e) || this;
    }
    return je(e, t), e.prototype.addWeightCode = function(t, e) {
        e < 1e4 ? t.append("(3202)") : t.append("(3203)");
    }, e.prototype.checkWeight = function(t) {
        return t < 1e4 ? t : t - 1e4;
    }, e;
}(Ge), Ye = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Ze = function(t) {
    function e(e) {
        return t.call(this, e) || this;
    }
    return Ye(e, t), e.prototype.parseInformation = function() {
        if (this.getInformation().getSize() < e.HEADER_SIZE + Be.GTIN_SIZE) throw new U;
        var t = new k;
        this.encodeCompressedGtin(t, e.HEADER_SIZE);
        var r = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE + Be.GTIN_SIZE, e.LAST_DIGIT_SIZE);
        t.append("(392"), t.append(r), t.append(")");
        var n = this.getGeneralDecoder().decodeGeneralPurposeField(e.HEADER_SIZE + Be.GTIN_SIZE + e.LAST_DIGIT_SIZE, null);
        return t.append(n.getNewString()), t.toString();
    }, e.HEADER_SIZE = 8, e.LAST_DIGIT_SIZE = 2, e;
}(Be), Ke = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), qe = function(t) {
    function e(e) {
        return t.call(this, e) || this;
    }
    return Ke(e, t), e.prototype.parseInformation = function() {
        if (this.getInformation().getSize() < e.HEADER_SIZE + Be.GTIN_SIZE) throw new U;
        var t = new k;
        this.encodeCompressedGtin(t, e.HEADER_SIZE);
        var r = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE + Be.GTIN_SIZE, e.LAST_DIGIT_SIZE);
        t.append("(393"), t.append(r), t.append(")");
        var n = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE + Be.GTIN_SIZE + e.LAST_DIGIT_SIZE, e.FIRST_THREE_DIGITS_SIZE);
        n / 100 == 0 && t.append("0"), n / 10 == 0 && t.append("0"), t.append(n);
        var o = this.getGeneralDecoder().decodeGeneralPurposeField(e.HEADER_SIZE + Be.GTIN_SIZE + e.LAST_DIGIT_SIZE + e.FIRST_THREE_DIGITS_SIZE, null);
        return t.append(o.getNewString()), t.toString();
    }, e.HEADER_SIZE = 8, e.LAST_DIGIT_SIZE = 2, e.FIRST_THREE_DIGITS_SIZE = 10, e;
}(Be), Qe = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Je = function(t) {
    function e(e, r, n) {
        var o = t.call(this, e) || this;
        return o.dateCode = n, o.firstAIdigits = r, o;
    }
    return Qe(e, t), e.prototype.parseInformation = function() {
        if (this.getInformation().getSize() != e.HEADER_SIZE + e.GTIN_SIZE + e.WEIGHT_SIZE + e.DATE_SIZE) throw new U;
        var t = new k;
        return this.encodeCompressedGtin(t, e.HEADER_SIZE), this.encodeCompressedWeight(t, e.HEADER_SIZE + e.GTIN_SIZE, e.WEIGHT_SIZE), this.encodeCompressedDate(t, e.HEADER_SIZE + e.GTIN_SIZE + e.WEIGHT_SIZE), t.toString();
    }, e.prototype.encodeCompressedDate = function(t, r) {
        var n = this.getGeneralDecoder().extractNumericValueFromBitArray(r, e.DATE_SIZE);
        if (38400 != n) {
            t.append("("), t.append(this.dateCode), t.append(")");
            var o = n % 32, i = (n /= 32) % 12 + 1, a = n /= 12;
            a / 10 == 0 && t.append("0"), t.append(a), i / 10 == 0 && t.append("0"), t.append(i), o / 10 == 0 && t.append("0"), t.append(o);
        }
    }, e.prototype.addWeightCode = function(t, e) {
        t.append("("), t.append(this.firstAIdigits), t.append(e / 1e5), t.append(")");
    }, e.prototype.checkWeight = function(t) {
        return t % 1e5;
    }, e.HEADER_SIZE = 8, e.WEIGHT_SIZE = 20, e.DATE_SIZE = 16, e;
}(Ue);
var $e = function() {
    function t(t, e, r, n) {
        this.leftchar = t, this.rightchar = e, this.finderpattern = r, this.maybeLast = n;
    }
    return t.prototype.mayBeLast = function() {
        return this.maybeLast;
    }, t.prototype.getLeftChar = function() {
        return this.leftchar;
    }, t.prototype.getRightChar = function() {
        return this.rightchar;
    }, t.prototype.getFinderPattern = function() {
        return this.finderpattern;
    }, t.prototype.mustBeLast = function() {
        return null == this.rightchar;
    }, t.prototype.toString = function() {
        return "[ " + this.leftchar + ", " + this.rightchar + " : " + (null == this.finderpattern ? "null" : this.finderpattern.getValue()) + " ]";
    }, t.equals = function(e, r) {
        return e instanceof t && t.equalsOrNull(e.leftchar, r.leftchar) && t.equalsOrNull(e.rightchar, r.rightchar) && t.equalsOrNull(e.finderpattern, r.finderpattern);
    }, t.equalsOrNull = function(e, r) {
        return null === e ? null === r : t.equals(e, r);
    }, t.prototype.hashCode = function() {
        return this.leftchar.getValue() ^ this.rightchar.getValue() ^ this.finderpattern.getValue();
    }, t;
}(), tr = function() {
    function t(t, e, r) {
        this.pairs = t, this.rowNumber = e, this.wasReversed = r;
    }
    return t.prototype.getPairs = function() {
        return this.pairs;
    }, t.prototype.getRowNumber = function() {
        return this.rowNumber;
    }, t.prototype.isReversed = function() {
        return this.wasReversed;
    }, t.prototype.isEquivalent = function(t) {
        return this.checkEqualitity(this, t);
    }, t.prototype.toString = function() {
        return "{ " + this.pairs + " }";
    }, t.prototype.equals = function(e, r) {
        return e instanceof t && this.checkEqualitity(e, r) && e.wasReversed === r.wasReversed;
    }, t.prototype.checkEqualitity = function(t, e) {
        var r;
        if (t && e) return t.forEach(function(t, n) {
            e.forEach(function(e) {
                t.getLeftChar().getValue() === e.getLeftChar().getValue() && t.getRightChar().getValue() === e.getRightChar().getValue() && t.getFinderPatter().getValue() === e.getFinderPatter().getValue() && (r = !0);
            });
        }), r;
    }, t;
}(), er = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), rr = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, nr = function(t) {
    function e() {
        var r = null !== t && t.apply(this, arguments) || this;
        return r.pairs = new Array(e.MAX_PAIRS), r.rows = new Array, r.startEnd = [
            2
        ], r;
    }
    return er(e, t), e.prototype.decodeRow = function(t, r, n) {
        this.pairs.length = 0, this.startFromEven = !1;
        try {
            return e.constructResult(this.decodeRow2pairs(t, r));
        } catch (t) {}
        return this.pairs.length = 0, this.startFromEven = !0, e.constructResult(this.decodeRow2pairs(t, r));
    }, e.prototype.reset = function() {
        this.pairs.length = 0, this.rows.length = 0;
    }, e.prototype.decodeRow2pairs = function(t, e) {
        for(var r, n = !1; !n;)try {
            this.pairs.push(this.retrieveNextPair(e, this.pairs, t));
        } catch (t) {
            if (t instanceof U) {
                if (!this.pairs.length) throw new U;
                n = !0;
            }
        }
        if (this.checkChecksum()) return this.pairs;
        if (r = !!this.rows.length, this.storeRow(t, !1), r) {
            var o = this.checkRowsBoolean(!1);
            if (null != o) return o;
            if (null != (o = this.checkRowsBoolean(!0))) return o;
        }
        throw new U;
    }, e.prototype.checkRowsBoolean = function(t) {
        if (this.rows.length > 25) return this.rows.length = 0, null;
        this.pairs.length = 0, t && (this.rows = this.rows.reverse());
        var e = null;
        try {
            e = this.checkRows(new Array, 0);
        } catch (t) {
            console.log(t);
        }
        return t && (this.rows = this.rows.reverse()), e;
    }, e.prototype.checkRows = function(t, r) {
        for(var n, o, i = r; i < this.rows.length; i++){
            var a = this.rows[i];
            this.pairs.length = 0;
            try {
                for(var u = (n = void 0, rr(t)), s = u.next(); !s.done; s = u.next()){
                    var c = s.value;
                    this.pairs.push(c.getPairs());
                }
            } catch (t) {
                n = {
                    error: t
                };
            } finally{
                try {
                    s && !s.done && (o = u.return) && o.call(u);
                } finally{
                    if (n) throw n.error;
                }
            }
            if (this.pairs.push(a.getPairs()), e.isValidSequence(this.pairs)) {
                if (this.checkChecksum()) return this.pairs;
                var f = new Array(t);
                f.push(a);
                try {
                    return this.checkRows(f, i + 1);
                } catch (t) {
                    console.log(t);
                }
            }
        }
        throw new U;
    }, e.isValidSequence = function(t) {
        var r, n;
        try {
            for(var o = rr(e.FINDER_PATTERN_SEQUENCES), i = o.next(); !i.done; i = o.next()){
                var a = i.value;
                if (!(t.length > a.length)) {
                    for(var u = !0, s = 0; s < t.length; s++)if (t[s].getFinderPattern().getValue() != a[s]) {
                        u = !1;
                        break;
                    }
                    if (u) return !0;
                }
            }
        } catch (t) {
            r = {
                error: t
            };
        } finally{
            try {
                i && !i.done && (n = o.return) && n.call(o);
            } finally{
                if (r) throw r.error;
            }
        }
        return !1;
    }, e.prototype.storeRow = function(t, r) {
        for(var n = 0, o = !1, i = !1; n < this.rows.length;){
            var a = this.rows[n];
            if (a.getRowNumber() > t) {
                i = a.isEquivalent(this.pairs);
                break;
            }
            o = a.isEquivalent(this.pairs), n++;
        }
        i || o || e.isPartialRow(this.pairs, this.rows) || (this.rows.push(n, new tr(this.pairs, t, r)), this.removePartialRows(this.pairs, this.rows));
    }, e.prototype.removePartialRows = function(t, e) {
        var r, n, o, i, a, u;
        try {
            for(var s = rr(e), c = s.next(); !c.done; c = s.next()){
                var f = c.value;
                if (f.getPairs().length !== t.length) {
                    try {
                        for(var h = (o = void 0, rr(f.getPairs())), l = h.next(); !l.done; l = h.next()){
                            var d = l.value, p = !1;
                            try {
                                for(var g = (a = void 0, rr(t)), y = g.next(); !y.done; y = g.next()){
                                    var w = y.value;
                                    if ($e.equals(d, w)) {
                                        p = !0;
                                        break;
                                    }
                                }
                            } catch (t) {
                                a = {
                                    error: t
                                };
                            } finally{
                                try {
                                    y && !y.done && (u = g.return) && u.call(g);
                                } finally{
                                    if (a) throw a.error;
                                }
                            }
                            p || !1;
                        }
                    } catch (t) {
                        o = {
                            error: t
                        };
                    } finally{
                        try {
                            l && !l.done && (i = h.return) && i.call(h);
                        } finally{
                            if (o) throw o.error;
                        }
                    }
                }
            }
        } catch (t) {
            r = {
                error: t
            };
        } finally{
            try {
                c && !c.done && (n = s.return) && n.call(s);
            } finally{
                if (r) throw r.error;
            }
        }
    }, e.isPartialRow = function(t, e) {
        var r, n, o, i, a, u;
        try {
            for(var s = rr(e), c = s.next(); !c.done; c = s.next()){
                var f = c.value, h = !0;
                try {
                    for(var l = (o = void 0, rr(t)), d = l.next(); !d.done; d = l.next()){
                        var p = d.value, g = !1;
                        try {
                            for(var y = (a = void 0, rr(f.getPairs())), w = y.next(); !w.done; w = y.next()){
                                var _ = w.value;
                                if (p.equals(_)) {
                                    g = !0;
                                    break;
                                }
                            }
                        } catch (t) {
                            a = {
                                error: t
                            };
                        } finally{
                            try {
                                w && !w.done && (u = y.return) && u.call(y);
                            } finally{
                                if (a) throw a.error;
                            }
                        }
                        if (!g) {
                            h = !1;
                            break;
                        }
                    }
                } catch (t) {
                    o = {
                        error: t
                    };
                } finally{
                    try {
                        d && !d.done && (i = l.return) && i.call(l);
                    } finally{
                        if (o) throw o.error;
                    }
                }
                if (h) return !0;
            }
        } catch (t) {
            r = {
                error: t
            };
        } finally{
            try {
                c && !c.done && (n = s.return) && n.call(s);
            } finally{
                if (r) throw r.error;
            }
        }
        return !1;
    }, e.prototype.getRows = function() {
        return this.rows;
    }, e.constructResult = function(t) {
        var e = (function(t) {
            try {
                if (t.get(1)) return new Fe(t);
                if (!t.get(2)) return new xe(t);
                switch(De.extractNumericValueFromBitArray(t, 1, 4)){
                    case 4:
                        return new We(t);
                    case 5:
                        return new ze(t);
                }
                switch(De.extractNumericValueFromBitArray(t, 1, 5)){
                    case 12:
                        return new Ze(t);
                    case 13:
                        return new qe(t);
                }
                switch(De.extractNumericValueFromBitArray(t, 1, 7)){
                    case 56:
                        return new Je(t, "310", "11");
                    case 57:
                        return new Je(t, "320", "11");
                    case 58:
                        return new Je(t, "310", "13");
                    case 59:
                        return new Je(t, "320", "13");
                    case 60:
                        return new Je(t, "310", "15");
                    case 61:
                        return new Je(t, "320", "15");
                    case 62:
                        return new Je(t, "310", "17");
                    case 63:
                        return new Je(t, "320", "17");
                }
            } catch (e) {
                throw console.log(e), new yt("unknown decoder: " + t);
            }
        })(me.buildBitArray(t)).parseInformation(), r = t[0].getFinderPattern().getResultPoints(), n = t[t.length - 1].getFinderPattern().getResultPoints(), o = [
            r[0],
            r[1],
            n[0],
            n[1]
        ];
        return new et(e, null, null, o, nt.RSS_EXPANDED, null);
    }, e.prototype.checkChecksum = function() {
        var t = this.pairs.get(0), e = t.getLeftChar(), r = t.getRightChar();
        if (null == r) return !1;
        for(var n = r.getChecksumPortion(), o = 2, i = 1; i < this.pairs.size(); ++i){
            var a = this.pairs.get(i);
            n += a.getLeftChar().getChecksumPortion(), o++;
            var u = a.getRightChar();
            null != u && (n += u.getChecksumPortion(), o++);
        }
        return 211 * (o - 4) + (n %= 211) == e.getValue();
    }, e.getNextSecondBar = function(t, e) {
        var r;
        return t.get(e) ? (r = t.getNextUnset(e), r = t.getNextSet(r)) : (r = t.getNextSet(e), r = t.getNextUnset(r)), r;
    }, e.prototype.retrieveNextPair = function(t, r, n) {
        var o, i = r.length % 2 == 0;
        this.startFromEven && (i = !i);
        var a = !0, u = -1;
        do {
            this.findNextPair(t, r, u), null == (o = this.parseFoundFinderPattern(t, n, i)) ? u = e.getNextSecondBar(t, this.startEnd[0]) : a = !1;
        }while (a)
        var s, c = this.decodeDataCharacter(t, o, i, !0);
        if (!this.isEmptyPair(r) && r[r.length - 1].mustBeLast()) throw new U;
        try {
            s = this.decodeDataCharacter(t, o, i, !1);
        } catch (t) {
            s = null, console.log(t);
        }
        return new $e(c, s, o, !0);
    }, e.prototype.isEmptyPair = function(t) {
        return 0 === t.length;
    }, e.prototype.findNextPair = function(t, r, n) {
        var o = this.getDecodeFinderCounters();
        o[0] = 0, o[1] = 0, o[2] = 0, o[3] = 0;
        var i, a = t.getSize();
        if (n >= 0) i = n;
        else if (this.isEmptyPair(r)) i = 0;
        else {
            i = r[r.length - 1].getFinderPattern().getStartEnd()[1];
        }
        var u = r.length % 2 != 0;
        this.startFromEven && (u = !u);
        for(var s = !1; i < a && (s = !t.get(i));)i++;
        for(var c = 0, f = i, h = i; h < a; h++)if (t.get(h) != s) o[c]++;
        else {
            if (3 == c) {
                if (u && e.reverseCounters(o), e.isFinderPattern(o)) return this.startEnd[0] = f, void (this.startEnd[1] = h);
                u && e.reverseCounters(o), f += o[0] + o[1], o[0] = o[2], o[1] = o[3], o[2] = 0, o[3] = 0, c--;
            } else c++;
            o[c] = 1, s = !s;
        }
        throw new U;
    }, e.reverseCounters = function(t) {
        for(var e = t.length, r = 0; r < e / 2; ++r){
            var n = t[r];
            t[r] = t[e - r - 1], t[e - r - 1] = n;
        }
    }, e.prototype.parseFoundFinderPattern = function(t, r, n) {
        var o, i, a;
        if (n) {
            for(var u = this.startEnd[0] - 1; u >= 0 && !t.get(u);)u--;
            u++, o = this.startEnd[0] - u, i = u, a = this.startEnd[1];
        } else i = this.startEnd[0], o = (a = t.getNextUnset(this.startEnd[1] + 1)) - this.startEnd[1];
        var s, c = this.getDecodeFinderCounters();
        w.arraycopy(c, 0, c, 1, c.length - 1), c[0] = o;
        try {
            s = this.parseFinderValue(c, e.FINDER_PATTERNS);
        } catch (t) {
            return null;
        }
        return new we(s, [
            i,
            a
        ], i, a, r);
    }, e.prototype.decodeDataCharacter = function(t, r, n, o) {
        for(var i = this.getDataCharacterCounters(), a = 0; a < i.length; a++)i[a] = 0;
        if (o) e.recordPatternInReverse(t, r.getStartEnd()[0], i);
        else {
            e.recordPattern(t, r.getStartEnd()[1], i);
            for(var u = 0, s = i.length - 1; u < s; u++, s--){
                var c = i[u];
                i[u] = i[s], i[s] = c;
            }
        }
        var f = vt.sum(new Int32Array(i)) / 17, h = (r.getStartEnd()[1] - r.getStartEnd()[0]) / 15;
        if (Math.abs(f - h) / h > .3) throw new U;
        var l = this.getOddCounts(), d = this.getEvenCounts(), p = this.getOddRoundingErrors(), g = this.getEvenRoundingErrors();
        for(u = 0; u < i.length; u++){
            var y = 1 * i[u] / f, w = y + .5;
            if (w < 1) {
                if (y < .3) throw new U;
                w = 1;
            } else if (w > 8) {
                if (y > 8.7) throw new U;
                w = 8;
            }
            var _ = u / 2;
            0 == (1 & u) ? (l[_] = w, p[_] = y - w) : (d[_] = w, g[_] = y - w);
        }
        this.adjustOddEvenCounts(17);
        var v = 4 * r.getValue() + (n ? 0 : 2) + (o ? 0 : 1) - 1, m = 0, A = 0;
        for(u = l.length - 1; u >= 0; u--){
            if (e.isNotA1left(r, n, o)) {
                var E = e.WEIGHTS[v][2 * u];
                A += l[u] * E;
            }
            m += l[u];
        }
        var C = 0;
        for(u = d.length - 1; u >= 0; u--)if (e.isNotA1left(r, n, o)) {
            E = e.WEIGHTS[v][2 * u + 1];
            C += d[u] * E;
        }
        var I = A + C;
        if (0 != (1 & m) || m > 13 || m < 4) throw new U;
        var S = (13 - m) / 2, O = e.SYMBOL_WIDEST[S], T = 9 - O, b = ve.getRSSvalue(l, O, !0), R = ve.getRSSvalue(d, T, !1), N = e.EVEN_TOTAL_SUBSET[S], D = e.GSUM[S];
        return new ye(b * N + R + D, I);
    }, e.isNotA1left = function(t, e, r) {
        return !(0 == t.getValue() && e && r);
    }, e.prototype.adjustOddEvenCounts = function(t) {
        var r = vt.sum(new Int32Array(this.getOddCounts())), n = vt.sum(new Int32Array(this.getEvenCounts())), o = !1, i = !1;
        r > 13 ? i = !0 : r < 4 && (o = !0);
        var a = !1, u = !1;
        n > 13 ? u = !0 : n < 4 && (a = !0);
        var s = r + n - t, c = 1 == (1 & r), f = 0 == (1 & n);
        if (1 == s) if (c) {
            if (f) throw new U;
            i = !0;
        } else {
            if (!f) throw new U;
            u = !0;
        }
        else if (-1 == s) if (c) {
            if (f) throw new U;
            o = !0;
        } else {
            if (!f) throw new U;
            a = !0;
        }
        else {
            if (0 != s) throw new U;
            if (c) {
                if (!f) throw new U;
                r < n ? (o = !0, u = !0) : (i = !0, a = !0);
            } else if (f) throw new U;
        }
        if (o) {
            if (i) throw new U;
            e.increment(this.getOddCounts(), this.getOddRoundingErrors());
        }
        if (i && e.decrement(this.getOddCounts(), this.getOddRoundingErrors()), a) {
            if (u) throw new U;
            e.increment(this.getEvenCounts(), this.getOddRoundingErrors());
        }
        u && e.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());
    }, e.SYMBOL_WIDEST = [
        7,
        5,
        4,
        3,
        1
    ], e.EVEN_TOTAL_SUBSET = [
        4,
        20,
        52,
        104,
        204
    ], e.GSUM = [
        0,
        348,
        1388,
        2948,
        3988
    ], e.FINDER_PATTERNS = [
        Int32Array.from([
            1,
            8,
            4,
            1
        ]),
        Int32Array.from([
            3,
            6,
            4,
            1
        ]),
        Int32Array.from([
            3,
            4,
            6,
            1
        ]),
        Int32Array.from([
            3,
            2,
            8,
            1
        ]),
        Int32Array.from([
            2,
            6,
            5,
            1
        ]),
        Int32Array.from([
            2,
            2,
            9,
            1
        ])
    ], e.WEIGHTS = [
        [
            1,
            3,
            9,
            27,
            81,
            32,
            96,
            77
        ],
        [
            20,
            60,
            180,
            118,
            143,
            7,
            21,
            63
        ],
        [
            189,
            145,
            13,
            39,
            117,
            140,
            209,
            205
        ],
        [
            193,
            157,
            49,
            147,
            19,
            57,
            171,
            91
        ],
        [
            62,
            186,
            136,
            197,
            169,
            85,
            44,
            132
        ],
        [
            185,
            133,
            188,
            142,
            4,
            12,
            36,
            108
        ],
        [
            113,
            128,
            173,
            97,
            80,
            29,
            87,
            50
        ],
        [
            150,
            28,
            84,
            41,
            123,
            158,
            52,
            156
        ],
        [
            46,
            138,
            203,
            187,
            139,
            206,
            196,
            166
        ],
        [
            76,
            17,
            51,
            153,
            37,
            111,
            122,
            155
        ],
        [
            43,
            129,
            176,
            106,
            107,
            110,
            119,
            146
        ],
        [
            16,
            48,
            144,
            10,
            30,
            90,
            59,
            177
        ],
        [
            109,
            116,
            137,
            200,
            178,
            112,
            125,
            164
        ],
        [
            70,
            210,
            208,
            202,
            184,
            130,
            179,
            115
        ],
        [
            134,
            191,
            151,
            31,
            93,
            68,
            204,
            190
        ],
        [
            148,
            22,
            66,
            198,
            172,
            94,
            71,
            2
        ],
        [
            6,
            18,
            54,
            162,
            64,
            192,
            154,
            40
        ],
        [
            120,
            149,
            25,
            75,
            14,
            42,
            126,
            167
        ],
        [
            79,
            26,
            78,
            23,
            69,
            207,
            199,
            175
        ],
        [
            103,
            98,
            83,
            38,
            114,
            131,
            182,
            124
        ],
        [
            161,
            61,
            183,
            127,
            170,
            88,
            53,
            159
        ],
        [
            55,
            165,
            73,
            8,
            24,
            72,
            5,
            15
        ],
        [
            45,
            135,
            194,
            160,
            58,
            174,
            100,
            89
        ]
    ], e.FINDER_PAT_A = 0, e.FINDER_PAT_B = 1, e.FINDER_PAT_C = 2, e.FINDER_PAT_D = 3, e.FINDER_PAT_E = 4, e.FINDER_PAT_F = 5, e.FINDER_PATTERN_SEQUENCES = [
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_A
        ],
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_B,
            e.FINDER_PAT_B
        ],
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_C,
            e.FINDER_PAT_B,
            e.FINDER_PAT_D
        ],
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_E,
            e.FINDER_PAT_B,
            e.FINDER_PAT_D,
            e.FINDER_PAT_C
        ],
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_E,
            e.FINDER_PAT_B,
            e.FINDER_PAT_D,
            e.FINDER_PAT_D,
            e.FINDER_PAT_F
        ],
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_E,
            e.FINDER_PAT_B,
            e.FINDER_PAT_D,
            e.FINDER_PAT_E,
            e.FINDER_PAT_F,
            e.FINDER_PAT_F
        ],
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_A,
            e.FINDER_PAT_B,
            e.FINDER_PAT_B,
            e.FINDER_PAT_C,
            e.FINDER_PAT_C,
            e.FINDER_PAT_D,
            e.FINDER_PAT_D
        ],
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_A,
            e.FINDER_PAT_B,
            e.FINDER_PAT_B,
            e.FINDER_PAT_C,
            e.FINDER_PAT_C,
            e.FINDER_PAT_D,
            e.FINDER_PAT_E,
            e.FINDER_PAT_E
        ],
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_A,
            e.FINDER_PAT_B,
            e.FINDER_PAT_B,
            e.FINDER_PAT_C,
            e.FINDER_PAT_C,
            e.FINDER_PAT_D,
            e.FINDER_PAT_E,
            e.FINDER_PAT_F,
            e.FINDER_PAT_F
        ],
        [
            e.FINDER_PAT_A,
            e.FINDER_PAT_A,
            e.FINDER_PAT_B,
            e.FINDER_PAT_B,
            e.FINDER_PAT_C,
            e.FINDER_PAT_D,
            e.FINDER_PAT_D,
            e.FINDER_PAT_E,
            e.FINDER_PAT_E,
            e.FINDER_PAT_F,
            e.FINDER_PAT_F
        ]
    ], e.MAX_PAIRS = 11, e;
}(ge), or = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), ir = function(t) {
    function e(e, r, n) {
        var o = t.call(this, e, r) || this;
        return o.count = 0, o.finderPattern = n, o;
    }
    return or(e, t), e.prototype.getFinderPattern = function() {
        return this.finderPattern;
    }, e.prototype.getCount = function() {
        return this.count;
    }, e.prototype.incrementCount = function() {
        this.count++;
    }, e;
}(ye), ar = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), ur = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, sr = function(t) {
    function e() {
        var e = null !== t && t.apply(this, arguments) || this;
        return e.possibleLeftPairs = [], e.possibleRightPairs = [], e;
    }
    return ar(e, t), e.prototype.decodeRow = function(t, r, n) {
        var o, i, a, u, s = this.decodePair(r, !1, t, n);
        e.addOrTally(this.possibleLeftPairs, s), r.reverse();
        var c = this.decodePair(r, !0, t, n);
        e.addOrTally(this.possibleRightPairs, c), r.reverse();
        try {
            for(var f = ur(this.possibleLeftPairs), h = f.next(); !h.done; h = f.next()){
                var l = h.value;
                if (l.getCount() > 1) try {
                    for(var d = (a = void 0, ur(this.possibleRightPairs)), p = d.next(); !p.done; p = d.next()){
                        var g = p.value;
                        if (g.getCount() > 1 && e.checkChecksum(l, g)) return e.constructResult(l, g);
                    }
                } catch (t) {
                    a = {
                        error: t
                    };
                } finally{
                    try {
                        p && !p.done && (u = d.return) && u.call(d);
                    } finally{
                        if (a) throw a.error;
                    }
                }
            }
        } catch (t) {
            o = {
                error: t
            };
        } finally{
            try {
                h && !h.done && (i = f.return) && i.call(f);
            } finally{
                if (o) throw o.error;
            }
        }
        throw new U;
    }, e.addOrTally = function(t, e) {
        var r, n;
        if (null != e) {
            var o = !1;
            try {
                for(var i = ur(t), a = i.next(); !a.done; a = i.next()){
                    var u = a.value;
                    if (u.getValue() === e.getValue()) {
                        u.incrementCount(), o = !0;
                        break;
                    }
                }
            } catch (t) {
                r = {
                    error: t
                };
            } finally{
                try {
                    a && !a.done && (n = i.return) && n.call(i);
                } finally{
                    if (r) throw r.error;
                }
            }
            o || t.push(e);
        }
    }, e.prototype.reset = function() {
        this.possibleLeftPairs.length = 0, this.possibleRightPairs.length = 0;
    }, e.constructResult = function(t, e) {
        for(var r = 4537077 * t.getValue() + e.getValue(), n = new String(r).toString(), o = new k, i = 13 - n.length; i > 0; i--)o.append("0");
        o.append(n);
        var a = 0;
        for(i = 0; i < 13; i++){
            var u = o.charAt(i).charCodeAt(0) - "0".charCodeAt(0);
            a += 0 == (1 & i) ? 3 * u : u;
        }
        10 === (a = 10 - a % 10) && (a = 0), o.append(a.toString());
        var s = t.getFinderPattern().getResultPoints(), c = e.getFinderPattern().getResultPoints();
        return new et(o.toString(), null, 0, [
            s[0],
            s[1],
            c[0],
            c[1]
        ], nt.RSS_14, (new Date).getTime());
    }, e.checkChecksum = function(t, e) {
        var r = (t.getChecksumPortion() + 16 * e.getChecksumPortion()) % 79, n = 9 * t.getFinderPattern().getValue() + e.getFinderPattern().getValue();
        return n > 72 && n--, n > 8 && n--, r === n;
    }, e.prototype.decodePair = function(t, e, r, n) {
        try {
            var o = this.findFinderPattern(t, e), i = this.parseFoundFinderPattern(t, r, e, o), a = null == n ? null : n.get(T.NEED_RESULT_POINT_CALLBACK);
            if (null != a) {
                var u = (o[0] + o[1]) / 2;
                e && (u = t.getSize() - 1 - u), a.foundPossibleResultPoint(new At(u, r));
            }
            var s = this.decodeDataCharacter(t, i, !0), c = this.decodeDataCharacter(t, i, !1);
            return new ir(1597 * s.getValue() + c.getValue(), s.getChecksumPortion() + 4 * c.getChecksumPortion(), i);
        } catch (t) {
            return null;
        }
    }, e.prototype.decodeDataCharacter = function(t, r, n) {
        for(var o = this.getDataCharacterCounters(), i = 0; i < o.length; i++)o[i] = 0;
        if (n) Lt.recordPatternInReverse(t, r.getStartEnd()[0], o);
        else {
            Lt.recordPattern(t, r.getStartEnd()[1] + 1, o);
            for(var a = 0, u = o.length - 1; a < u; a++, u--){
                var s = o[a];
                o[a] = o[u], o[u] = s;
            }
        }
        var c = n ? 16 : 15, f = vt.sum(new Int32Array(o)) / c, h = this.getOddCounts(), l = this.getEvenCounts(), d = this.getOddRoundingErrors(), p = this.getEvenRoundingErrors();
        for(a = 0; a < o.length; a++){
            var g = o[a] / f, y = Math.floor(g + .5);
            y < 1 ? y = 1 : y > 8 && (y = 8);
            var w = Math.floor(a / 2);
            0 == (1 & a) ? (h[w] = y, d[w] = g - y) : (l[w] = y, p[w] = g - y);
        }
        this.adjustOddEvenCounts(n, c);
        var _ = 0, v = 0;
        for(a = h.length - 1; a >= 0; a--)v *= 9, v += h[a], _ += h[a];
        var m = 0, A = 0;
        for(a = l.length - 1; a >= 0; a--)m *= 9, m += l[a], A += l[a];
        var E = v + 3 * m;
        if (n) {
            if (0 != (1 & _) || _ > 12 || _ < 4) throw new U;
            var C = (12 - _) / 2, I = 9 - (R = e.OUTSIDE_ODD_WIDEST[C]), S = ve.getRSSvalue(h, R, !1), O = ve.getRSSvalue(l, I, !0), T = e.OUTSIDE_EVEN_TOTAL_SUBSET[C], b = e.OUTSIDE_GSUM[C];
            return new ye(S * T + O + b, E);
        }
        if (0 != (1 & A) || A > 10 || A < 4) throw new U;
        C = (10 - A) / 2, I = 9 - (R = e.INSIDE_ODD_WIDEST[C]), S = ve.getRSSvalue(h, R, !0), O = ve.getRSSvalue(l, I, !1);
        var R, N = e.INSIDE_ODD_TOTAL_SUBSET[C];
        b = e.INSIDE_GSUM[C];
        return new ye(O * N + S + b, E);
    }, e.prototype.findFinderPattern = function(t, e) {
        var r = this.getDecodeFinderCounters();
        r[0] = 0, r[1] = 0, r[2] = 0, r[3] = 0;
        for(var n = t.getSize(), o = !1, i = 0; i < n && e !== (o = !t.get(i));)i++;
        for(var a = 0, u = i, s = i; s < n; s++)if (t.get(s) !== o) r[a]++;
        else {
            if (3 === a) {
                if (ge.isFinderPattern(r)) return [
                    u,
                    s
                ];
                u += r[0] + r[1], r[0] = r[2], r[1] = r[3], r[2] = 0, r[3] = 0, a--;
            } else a++;
            r[a] = 1, o = !o;
        }
        throw new U;
    }, e.prototype.parseFoundFinderPattern = function(t, r, n, o) {
        for(var i = t.get(o[0]), a = o[0] - 1; a >= 0 && i !== t.get(a);)a--;
        a++;
        var u = o[0] - a, s = this.getDecodeFinderCounters(), c = new Int32Array(s.length);
        w.arraycopy(s, 0, c, 1, s.length - 1), c[0] = u;
        var f = this.parseFinderValue(c, e.FINDER_PATTERNS), h = a, l = o[1];
        return n && (h = t.getSize() - 1 - h, l = t.getSize() - 1 - l), new we(f, [
            a,
            o[1]
        ], h, l, r);
    }, e.prototype.adjustOddEvenCounts = function(t, e) {
        var r = vt.sum(new Int32Array(this.getOddCounts())), n = vt.sum(new Int32Array(this.getEvenCounts())), o = !1, i = !1, a = !1, u = !1;
        t ? (r > 12 ? i = !0 : r < 4 && (o = !0), n > 12 ? u = !0 : n < 4 && (a = !0)) : (r > 11 ? i = !0 : r < 5 && (o = !0), n > 10 ? u = !0 : n < 4 && (a = !0));
        var s = r + n - e, c = (1 & r) == (t ? 1 : 0), f = 1 == (1 & n);
        if (1 === s) if (c) {
            if (f) throw new U;
            i = !0;
        } else {
            if (!f) throw new U;
            u = !0;
        }
        else if (-1 === s) if (c) {
            if (f) throw new U;
            o = !0;
        } else {
            if (!f) throw new U;
            a = !0;
        }
        else {
            if (0 !== s) throw new U;
            if (c) {
                if (!f) throw new U;
                r < n ? (o = !0, u = !0) : (i = !0, a = !0);
            } else if (f) throw new U;
        }
        if (o) {
            if (i) throw new U;
            ge.increment(this.getOddCounts(), this.getOddRoundingErrors());
        }
        if (i && ge.decrement(this.getOddCounts(), this.getOddRoundingErrors()), a) {
            if (u) throw new U;
            ge.increment(this.getEvenCounts(), this.getOddRoundingErrors());
        }
        u && ge.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());
    }, e.OUTSIDE_EVEN_TOTAL_SUBSET = [
        1,
        10,
        34,
        70,
        126
    ], e.INSIDE_ODD_TOTAL_SUBSET = [
        4,
        20,
        48,
        81
    ], e.OUTSIDE_GSUM = [
        0,
        161,
        961,
        2015,
        2715
    ], e.INSIDE_GSUM = [
        0,
        336,
        1036,
        1516
    ], e.OUTSIDE_ODD_WIDEST = [
        8,
        6,
        4,
        3,
        1
    ], e.INSIDE_ODD_WIDEST = [
        2,
        4,
        6,
        8
    ], e.FINDER_PATTERNS = [
        Int32Array.from([
            3,
            8,
            2,
            1
        ]),
        Int32Array.from([
            3,
            5,
            5,
            1
        ]),
        Int32Array.from([
            3,
            3,
            7,
            1
        ]),
        Int32Array.from([
            3,
            1,
            9,
            1
        ]),
        Int32Array.from([
            2,
            7,
            4,
            1
        ]),
        Int32Array.from([
            2,
            5,
            6,
            1
        ]),
        Int32Array.from([
            2,
            3,
            8,
            1
        ]),
        Int32Array.from([
            1,
            5,
            7,
            1
        ]),
        Int32Array.from([
            1,
            3,
            9,
            1
        ])
    ], e;
}(ge), cr = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), fr = function(t) {
    function e(e) {
        var r = t.call(this) || this;
        r.readers = [];
        var n = e ? e.get(T.POSSIBLE_FORMATS) : null, o = e && void 0 !== e.get(T.ASSUME_CODE_39_CHECK_DIGIT);
        return n && ((n.includes(nt.EAN_13) || n.includes(nt.UPC_A) || n.includes(nt.EAN_8) || n.includes(nt.UPC_E)) && r.readers.push(new le(e)), n.includes(nt.CODE_39) && r.readers.push(new Ut(o)), n.includes(nt.CODE_128) && r.readers.push(new kt), n.includes(nt.ITF) && r.readers.push(new Xt), n.includes(nt.RSS_14) && r.readers.push(new sr), n.includes(nt.RSS_EXPANDED) && (console.warn("RSS Expanded reader IS NOT ready for production yet! use at your own risk."), r.readers.push(new nr))), 0 === r.readers.length && (r.readers.push(new le(e)), r.readers.push(new Ut), r.readers.push(new le(e)), r.readers.push(new kt), r.readers.push(new Xt), r.readers.push(new sr)), r;
    }
    return cr(e, t), e.prototype.decodeRow = function(t, e, r) {
        for(var n = 0; n < this.readers.length; n++)try {
            return this.readers[n].decodeRow(t, e, r);
        } catch (t) {}
        throw new U;
    }, e.prototype.reset = function() {
        this.readers.forEach(function(t) {
            return t.reset();
        });
    }, e;
}(Lt), hr = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r) {
        return void 0 === e && (e = 500), t.call(this, new fr(r), e, r) || this;
    }
    hr(e, t);
}(tt);
var lr, dr = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, pr = function() {
    function t(t, e, r) {
        this.ecCodewords = t, this.ecBlocks = [
            e
        ], r && this.ecBlocks.push(r);
    }
    return t.prototype.getECCodewords = function() {
        return this.ecCodewords;
    }, t.prototype.getECBlocks = function() {
        return this.ecBlocks;
    }, t;
}(), gr = function() {
    function t(t, e) {
        this.count = t, this.dataCodewords = e;
    }
    return t.prototype.getCount = function() {
        return this.count;
    }, t.prototype.getDataCodewords = function() {
        return this.dataCodewords;
    }, t;
}(), yr = function() {
    function t(t, e, r, n, o, i) {
        var a, u;
        this.versionNumber = t, this.symbolSizeRows = e, this.symbolSizeColumns = r, this.dataRegionSizeRows = n, this.dataRegionSizeColumns = o, this.ecBlocks = i;
        var s = 0, c = i.getECCodewords(), f = i.getECBlocks();
        try {
            for(var h = dr(f), l = h.next(); !l.done; l = h.next()){
                var d = l.value;
                s += d.getCount() * (d.getDataCodewords() + c);
            }
        } catch (t) {
            a = {
                error: t
            };
        } finally{
            try {
                l && !l.done && (u = h.return) && u.call(h);
            } finally{
                if (a) throw a.error;
            }
        }
        this.totalCodewords = s;
    }
    return t.prototype.getVersionNumber = function() {
        return this.versionNumber;
    }, t.prototype.getSymbolSizeRows = function() {
        return this.symbolSizeRows;
    }, t.prototype.getSymbolSizeColumns = function() {
        return this.symbolSizeColumns;
    }, t.prototype.getDataRegionSizeRows = function() {
        return this.dataRegionSizeRows;
    }, t.prototype.getDataRegionSizeColumns = function() {
        return this.dataRegionSizeColumns;
    }, t.prototype.getTotalCodewords = function() {
        return this.totalCodewords;
    }, t.prototype.getECBlocks = function() {
        return this.ecBlocks;
    }, t.getVersionForDimensions = function(e, r) {
        var n, o;
        if (0 != (1 & e) || 0 != (1 & r)) throw new R;
        try {
            for(var i = dr(t.VERSIONS), a = i.next(); !a.done; a = i.next()){
                var u = a.value;
                if (u.symbolSizeRows === e && u.symbolSizeColumns === r) return u;
            }
        } catch (t) {
            n = {
                error: t
            };
        } finally{
            try {
                a && !a.done && (o = i.return) && o.call(i);
            } finally{
                if (n) throw n.error;
            }
        }
        throw new R;
    }, t.prototype.toString = function() {
        return "" + this.versionNumber;
    }, t.buildVersions = function() {
        return [
            new t(1, 10, 10, 8, 8, new pr(5, new gr(1, 3))),
            new t(2, 12, 12, 10, 10, new pr(7, new gr(1, 5))),
            new t(3, 14, 14, 12, 12, new pr(10, new gr(1, 8))),
            new t(4, 16, 16, 14, 14, new pr(12, new gr(1, 12))),
            new t(5, 18, 18, 16, 16, new pr(14, new gr(1, 18))),
            new t(6, 20, 20, 18, 18, new pr(18, new gr(1, 22))),
            new t(7, 22, 22, 20, 20, new pr(20, new gr(1, 30))),
            new t(8, 24, 24, 22, 22, new pr(24, new gr(1, 36))),
            new t(9, 26, 26, 24, 24, new pr(28, new gr(1, 44))),
            new t(10, 32, 32, 14, 14, new pr(36, new gr(1, 62))),
            new t(11, 36, 36, 16, 16, new pr(42, new gr(1, 86))),
            new t(12, 40, 40, 18, 18, new pr(48, new gr(1, 114))),
            new t(13, 44, 44, 20, 20, new pr(56, new gr(1, 144))),
            new t(14, 48, 48, 22, 22, new pr(68, new gr(1, 174))),
            new t(15, 52, 52, 24, 24, new pr(42, new gr(2, 102))),
            new t(16, 64, 64, 14, 14, new pr(56, new gr(2, 140))),
            new t(17, 72, 72, 16, 16, new pr(36, new gr(4, 92))),
            new t(18, 80, 80, 18, 18, new pr(48, new gr(4, 114))),
            new t(19, 88, 88, 20, 20, new pr(56, new gr(4, 144))),
            new t(20, 96, 96, 22, 22, new pr(68, new gr(4, 174))),
            new t(21, 104, 104, 24, 24, new pr(56, new gr(6, 136))),
            new t(22, 120, 120, 18, 18, new pr(68, new gr(6, 175))),
            new t(23, 132, 132, 20, 20, new pr(62, new gr(8, 163))),
            new t(24, 144, 144, 22, 22, new pr(62, new gr(8, 156), new gr(2, 155))),
            new t(25, 8, 18, 6, 16, new pr(7, new gr(1, 5))),
            new t(26, 8, 32, 6, 14, new pr(11, new gr(1, 10))),
            new t(27, 12, 26, 10, 24, new pr(14, new gr(1, 16))),
            new t(28, 12, 36, 10, 16, new pr(18, new gr(1, 22))),
            new t(29, 16, 36, 14, 16, new pr(24, new gr(1, 32))),
            new t(30, 16, 48, 14, 22, new pr(28, new gr(1, 49)))
        ];
    }, t.VERSIONS = t.buildVersions(), t;
}(), wr = function() {
    function t(e) {
        var r = e.getHeight();
        if (r < 8 || r > 144 || 0 != (1 & r)) throw new R;
        this.version = t.readVersion(e), this.mappingBitMatrix = this.extractDataRegion(e), this.readMappingMatrix = new x(this.mappingBitMatrix.getWidth(), this.mappingBitMatrix.getHeight());
    }
    return t.prototype.getVersion = function() {
        return this.version;
    }, t.readVersion = function(t) {
        var e = t.getHeight(), r = t.getWidth();
        return yr.getVersionForDimensions(e, r);
    }, t.prototype.readCodewords = function() {
        var t = new Int8Array(this.version.getTotalCodewords()), e = 0, r = 4, n = 0, o = this.mappingBitMatrix.getHeight(), i = this.mappingBitMatrix.getWidth(), a = !1, u = !1, s = !1, c = !1;
        do {
            if (r !== o || 0 !== n || a) if (r !== o - 2 || 0 !== n || 0 == (3 & i) || u) if (r !== o + 4 || 2 !== n || 0 != (7 & i) || s) if (r !== o - 2 || 0 !== n || 4 != (7 & i) || c) {
                do {
                    r < o && n >= 0 && !this.readMappingMatrix.get(n, r) && (t[e++] = 255 & this.readUtah(r, n, o, i)), r -= 2, n += 2;
                }while (r >= 0 && n < i)
                r += 1, n += 3;
                do {
                    r >= 0 && n < i && !this.readMappingMatrix.get(n, r) && (t[e++] = 255 & this.readUtah(r, n, o, i)), r += 2, n -= 2;
                }while (r < o && n >= 0)
                r += 3, n += 1;
            } else t[e++] = 255 & this.readCorner4(o, i), r -= 2, n += 2, c = !0;
            else t[e++] = 255 & this.readCorner3(o, i), r -= 2, n += 2, s = !0;
            else t[e++] = 255 & this.readCorner2(o, i), r -= 2, n += 2, u = !0;
            else t[e++] = 255 & this.readCorner1(o, i), r -= 2, n += 2, a = !0;
        }while (r < o || n < i)
        if (e !== this.version.getTotalCodewords()) throw new R;
        return t;
    }, t.prototype.readModule = function(t, e, r, n) {
        return t < 0 && (t += r, e += 4 - (r + 4 & 7)), e < 0 && (e += n, t += 4 - (n + 4 & 7)), this.readMappingMatrix.set(e, t), this.mappingBitMatrix.get(e, t);
    }, t.prototype.readUtah = function(t, e, r, n) {
        var o = 0;
        return this.readModule(t - 2, e - 2, r, n) && (o |= 1), o <<= 1, this.readModule(t - 2, e - 1, r, n) && (o |= 1), o <<= 1, this.readModule(t - 1, e - 2, r, n) && (o |= 1), o <<= 1, this.readModule(t - 1, e - 1, r, n) && (o |= 1), o <<= 1, this.readModule(t - 1, e, r, n) && (o |= 1), o <<= 1, this.readModule(t, e - 2, r, n) && (o |= 1), o <<= 1, this.readModule(t, e - 1, r, n) && (o |= 1), o <<= 1, this.readModule(t, e, r, n) && (o |= 1), o;
    }, t.prototype.readCorner1 = function(t, e) {
        var r = 0;
        return this.readModule(t - 1, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, 1, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(2, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(3, e - 1, t, e) && (r |= 1), r;
    }, t.prototype.readCorner2 = function(t, e) {
        var r = 0;
        return this.readModule(t - 3, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 2, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, 0, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 4, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 3, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 1, t, e) && (r |= 1), r;
    }, t.prototype.readCorner3 = function(t, e) {
        var r = 0;
        return this.readModule(t - 1, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 3, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 3, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 1, t, e) && (r |= 1), r;
    }, t.prototype.readCorner4 = function(t, e) {
        var r = 0;
        return this.readModule(t - 3, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 2, 0, t, e) && (r |= 1), r <<= 1, this.readModule(t - 1, 0, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 2, t, e) && (r |= 1), r <<= 1, this.readModule(0, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(1, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(2, e - 1, t, e) && (r |= 1), r <<= 1, this.readModule(3, e - 1, t, e) && (r |= 1), r;
    }, t.prototype.extractDataRegion = function(t) {
        var e = this.version.getSymbolSizeRows(), r = this.version.getSymbolSizeColumns();
        if (t.getHeight() !== e) throw new l("Dimension of bitMatrix must match the version size");
        for(var n = this.version.getDataRegionSizeRows(), o = this.version.getDataRegionSizeColumns(), i = e / n | 0, a = r / o | 0, u = new x(a * o, i * n), s = 0; s < i; ++s)for(var c = s * n, f = 0; f < a; ++f)for(var h = f * o, d = 0; d < n; ++d)for(var p = s * (n + 2) + 1 + d, g = c + d, y = 0; y < o; ++y){
            var w = f * (o + 2) + 1 + y;
            if (t.get(w, p)) {
                var _ = h + y;
                u.set(_, g);
            }
        }
        return u;
    }, t;
}(), _r = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, vr = function() {
    function t(t, e) {
        this.numDataCodewords = t, this.codewords = e;
    }
    return t.getDataBlocks = function(e, r) {
        var n, o, i, a, u = r.getECBlocks(), s = 0, c = u.getECBlocks();
        try {
            for(var f = _r(c), h = f.next(); !h.done; h = f.next()){
                s += (w = h.value).getCount();
            }
        } catch (t) {
            n = {
                error: t
            };
        } finally{
            try {
                h && !h.done && (o = f.return) && o.call(f);
            } finally{
                if (n) throw n.error;
            }
        }
        var d = new Array(s), p = 0;
        try {
            for(var g = _r(c), y = g.next(); !y.done; y = g.next())for(var w = y.value, _ = 0; _ < w.getCount(); _++){
                var v = w.getDataCodewords(), m = u.getECCodewords() + v;
                d[p++] = new t(v, new Uint8Array(m));
            }
        } catch (t) {
            i = {
                error: t
            };
        } finally{
            try {
                y && !y.done && (a = g.return) && a.call(g);
            } finally{
                if (i) throw i.error;
            }
        }
        var A = d[0].codewords.length - u.getECCodewords(), E = A - 1, C = 0;
        for(_ = 0; _ < E; _++)for(var I = 0; I < p; I++)d[I].codewords[_] = e[C++];
        var S = 24 === r.getVersionNumber(), O = S ? 8 : p;
        for(I = 0; I < O; I++)d[I].codewords[A - 1] = e[C++];
        var T = d[0].codewords.length;
        for(_ = A; _ < T; _++)for(I = 0; I < p; I++){
            var b = S ? (I + 8) % p : I, R = S && b > 7 ? _ - 1 : _;
            d[b].codewords[R] = e[C++];
        }
        if (C !== e.length) throw new l;
        return d;
    }, t.prototype.getNumDataCodewords = function() {
        return this.numDataCodewords;
    }, t.prototype.getCodewords = function() {
        return this.codewords;
    }, t;
}(), mr = function() {
    function t(t) {
        this.bytes = t, this.byteOffset = 0, this.bitOffset = 0;
    }
    return t.prototype.getBitOffset = function() {
        return this.bitOffset;
    }, t.prototype.getByteOffset = function() {
        return this.byteOffset;
    }, t.prototype.readBits = function(t) {
        if (t < 1 || t > 32 || t > this.available()) throw new l("" + t);
        var e = 0, r = this.bitOffset, n = this.byteOffset, o = this.bytes;
        if (r > 0) {
            var i = 8 - r, a = t < i ? t : i, u = 255 >> 8 - a << (s = i - a);
            e = (o[n] & u) >> s, t -= a, 8 === (r += a) && (r = 0, n++);
        }
        if (t > 0) {
            for(; t >= 8;)e = e << 8 | 255 & o[n], n++, t -= 8;
            if (t > 0) {
                var s;
                u = 255 >> (s = 8 - t) << s;
                e = e << t | (o[n] & u) >> s, r += t;
            }
        }
        return this.bitOffset = r, this.byteOffset = n, e;
    }, t.prototype.available = function() {
        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
    }, t;
}();
!function(t) {
    t[t.PAD_ENCODE = 0] = "PAD_ENCODE", t[t.ASCII_ENCODE = 1] = "ASCII_ENCODE", t[t.C40_ENCODE = 2] = "C40_ENCODE", t[t.TEXT_ENCODE = 3] = "TEXT_ENCODE", t[t.ANSIX12_ENCODE = 4] = "ANSIX12_ENCODE", t[t.EDIFACT_ENCODE = 5] = "EDIFACT_ENCODE", t[t.BASE256_ENCODE = 6] = "BASE256_ENCODE";
}(lr || (lr = {}));
var Ar, Er = function() {
    function t() {}
    return t.decode = function(t) {
        var e = new mr(t), r = new k, n = new k, o = new Array, i = lr.ASCII_ENCODE;
        do {
            if (i === lr.ASCII_ENCODE) i = this.decodeAsciiSegment(e, r, n);
            else {
                switch(i){
                    case lr.C40_ENCODE:
                        this.decodeC40Segment(e, r);
                        break;
                    case lr.TEXT_ENCODE:
                        this.decodeTextSegment(e, r);
                        break;
                    case lr.ANSIX12_ENCODE:
                        this.decodeAnsiX12Segment(e, r);
                        break;
                    case lr.EDIFACT_ENCODE:
                        this.decodeEdifactSegment(e, r);
                        break;
                    case lr.BASE256_ENCODE:
                        this.decodeBase256Segment(e, r, o);
                        break;
                    default:
                        throw new R;
                }
                i = lr.ASCII_ENCODE;
            }
        }while (i !== lr.PAD_ENCODE && e.available() > 0)
        return n.length() > 0 && r.append(n.toString()), new at(t, r.toString(), 0 === o.length ? null : o, null);
    }, t.decodeAsciiSegment = function(t, e, r) {
        var n = !1;
        do {
            var o = t.readBits(8);
            if (0 === o) throw new R;
            if (o <= 128) return n && (o += 128), e.append(String.fromCharCode(o - 1)), lr.ASCII_ENCODE;
            if (129 === o) return lr.PAD_ENCODE;
            if (o <= 229) {
                var i = o - 130;
                i < 10 && e.append("0"), e.append("" + i);
            } else switch(o){
                case 230:
                    return lr.C40_ENCODE;
                case 231:
                    return lr.BASE256_ENCODE;
                case 232:
                    e.append(String.fromCharCode(29));
                    break;
                case 233:
                case 234:
                case 241:
                    break;
                case 235:
                    n = !0;
                    break;
                case 236:
                    e.append("[)>05"), r.insert(0, "");
                    break;
                case 237:
                    e.append("[)>06"), r.insert(0, "");
                    break;
                case 238:
                    return lr.ANSIX12_ENCODE;
                case 239:
                    return lr.TEXT_ENCODE;
                case 240:
                    return lr.EDIFACT_ENCODE;
                default:
                    if (254 !== o || 0 !== t.available()) throw new R;
            }
        }while (t.available() > 0)
        return lr.ASCII_ENCODE;
    }, t.decodeC40Segment = function(t, e) {
        var r = !1, n = [], o = 0;
        do {
            if (8 === t.available()) return;
            var i = t.readBits(8);
            if (254 === i) return;
            this.parseTwoBytes(i, t.readBits(8), n);
            for(var a = 0; a < 3; a++){
                var u = n[a];
                switch(o){
                    case 0:
                        if (u < 3) o = u + 1;
                        else {
                            if (!(u < this.C40_BASIC_SET_CHARS.length)) throw new R;
                            var s = this.C40_BASIC_SET_CHARS[u];
                            r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s);
                        }
                        break;
                    case 1:
                        r ? (e.append(String.fromCharCode(u + 128)), r = !1) : e.append(String.fromCharCode(u)), o = 0;
                        break;
                    case 2:
                        if (u < this.C40_SHIFT2_SET_CHARS.length) {
                            s = this.C40_SHIFT2_SET_CHARS[u];
                            r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s);
                        } else switch(u){
                            case 27:
                                e.append(String.fromCharCode(29));
                                break;
                            case 30:
                                r = !0;
                                break;
                            default:
                                throw new R;
                        }
                        o = 0;
                        break;
                    case 3:
                        r ? (e.append(String.fromCharCode(u + 224)), r = !1) : e.append(String.fromCharCode(u + 96)), o = 0;
                        break;
                    default:
                        throw new R;
                }
            }
        }while (t.available() > 0)
    }, t.decodeTextSegment = function(t, e) {
        var r = !1, n = [], o = 0;
        do {
            if (8 === t.available()) return;
            var i = t.readBits(8);
            if (254 === i) return;
            this.parseTwoBytes(i, t.readBits(8), n);
            for(var a = 0; a < 3; a++){
                var u = n[a];
                switch(o){
                    case 0:
                        if (u < 3) o = u + 1;
                        else {
                            if (!(u < this.TEXT_BASIC_SET_CHARS.length)) throw new R;
                            var s = this.TEXT_BASIC_SET_CHARS[u];
                            r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s);
                        }
                        break;
                    case 1:
                        r ? (e.append(String.fromCharCode(u + 128)), r = !1) : e.append(String.fromCharCode(u)), o = 0;
                        break;
                    case 2:
                        if (u < this.TEXT_SHIFT2_SET_CHARS.length) {
                            s = this.TEXT_SHIFT2_SET_CHARS[u];
                            r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s);
                        } else switch(u){
                            case 27:
                                e.append(String.fromCharCode(29));
                                break;
                            case 30:
                                r = !0;
                                break;
                            default:
                                throw new R;
                        }
                        o = 0;
                        break;
                    case 3:
                        if (!(u < this.TEXT_SHIFT3_SET_CHARS.length)) throw new R;
                        s = this.TEXT_SHIFT3_SET_CHARS[u];
                        r ? (e.append(String.fromCharCode(s.charCodeAt(0) + 128)), r = !1) : e.append(s), o = 0;
                        break;
                    default:
                        throw new R;
                }
            }
        }while (t.available() > 0)
    }, t.decodeAnsiX12Segment = function(t, e) {
        var r = [];
        do {
            if (8 === t.available()) return;
            var n = t.readBits(8);
            if (254 === n) return;
            this.parseTwoBytes(n, t.readBits(8), r);
            for(var o = 0; o < 3; o++){
                var i = r[o];
                switch(i){
                    case 0:
                        e.append("\r");
                        break;
                    case 1:
                        e.append("*");
                        break;
                    case 2:
                        e.append(">");
                        break;
                    case 3:
                        e.append(" ");
                        break;
                    default:
                        if (i < 14) e.append(String.fromCharCode(i + 44));
                        else {
                            if (!(i < 40)) throw new R;
                            e.append(String.fromCharCode(i + 51));
                        }
                }
            }
        }while (t.available() > 0)
    }, t.parseTwoBytes = function(t, e, r) {
        var n = (t << 8) + e - 1, o = Math.floor(n / 1600);
        r[0] = o, n -= 1600 * o, o = Math.floor(n / 40), r[1] = o, r[2] = n - 40 * o;
    }, t.decodeEdifactSegment = function(t, e) {
        do {
            if (t.available() <= 16) return;
            for(var r = 0; r < 4; r++){
                var n = t.readBits(6);
                if (31 === n) {
                    var o = 8 - t.getBitOffset();
                    return void (8 !== o && t.readBits(o));
                }
                0 == (32 & n) && (n |= 64), e.append(String.fromCharCode(n));
            }
        }while (t.available() > 0)
    }, t.decodeBase256Segment = function(t, e, r) {
        var n, o = 1 + t.getByteOffset(), i = this.unrandomize255State(t.readBits(8), o++);
        if ((n = 0 === i ? t.available() / 8 | 0 : i < 250 ? i : 250 * (i - 249) + this.unrandomize255State(t.readBits(8), o++)) < 0) throw new R;
        for(var a = new Uint8Array(n), u = 0; u < n; u++){
            if (t.available() < 8) throw new R;
            a[u] = this.unrandomize255State(t.readBits(8), o++);
        }
        r.push(a);
        try {
            e.append(L.decode(a, F.ISO88591));
        } catch (t) {
            throw new yt("Platform does not support required encoding: " + t.message);
        }
    }, t.unrandomize255State = function(t, e) {
        var r = t - (149 * e % 255 + 1);
        return r >= 0 ? r : r + 256;
    }, t.C40_BASIC_SET_CHARS = [
        "*",
        "*",
        "*",
        " ",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z"
    ], t.C40_SHIFT2_SET_CHARS = [
        "!",
        '"',
        "#",
        "$",
        "%",
        "&",
        "'",
        "(",
        ")",
        "*",
        "+",
        ",",
        "-",
        ".",
        "/",
        ":",
        ";",
        "<",
        "=",
        ">",
        "?",
        "@",
        "[",
        "\\",
        "]",
        "^",
        "_"
    ], t.TEXT_BASIC_SET_CHARS = [
        "*",
        "*",
        "*",
        " ",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "q",
        "r",
        "s",
        "t",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z"
    ], t.TEXT_SHIFT2_SET_CHARS = t.C40_SHIFT2_SET_CHARS, t.TEXT_SHIFT3_SET_CHARS = [
        "`",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "{",
        "|",
        "}",
        "~",
        String.fromCharCode(127)
    ], t;
}(), Cr = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Ir = function() {
    function t() {
        this.rsDecoder = new wt(lt.DATA_MATRIX_FIELD_256);
    }
    return t.prototype.decode = function(t) {
        var e, r, n = new wr(t), o = n.getVersion(), i = n.readCodewords(), a = vr.getDataBlocks(i, o), u = 0;
        try {
            for(var s = Cr(a), c = s.next(); !c.done; c = s.next()){
                u += c.value.getNumDataCodewords();
            }
        } catch (t) {
            e = {
                error: t
            };
        } finally{
            try {
                c && !c.done && (r = s.return) && r.call(s);
            } finally{
                if (e) throw e.error;
            }
        }
        for(var f = new Uint8Array(u), h = a.length, l = 0; l < h; l++){
            var d = a[l], p = d.getCodewords(), g = d.getNumDataCodewords();
            this.correctErrors(p, g);
            for(var y = 0; y < g; y++)f[y * h + l] = p[y];
        }
        return Er.decode(f);
    }, t.prototype.correctErrors = function(t, e) {
        var r = new Int32Array(t);
        try {
            this.rsDecoder.decode(r, t.length - e);
        } catch (t) {
            throw new g;
        }
        for(var n = 0; n < e; n++)t[n] = r[n];
    }, t;
}(), Sr = function() {
    function t(t) {
        this.image = t, this.rectangleDetector = new St(this.image);
    }
    return t.prototype.detect = function() {
        var e = this.rectangleDetector.detect(), r = this.detectSolid1(e);
        if ((r = this.detectSolid2(r))[3] = this.correctTopRight(r), !r[3]) throw new U;
        var n = (r = this.shiftToModuleCenter(r))[0], o = r[1], i = r[2], a = r[3], u = this.transitionsBetween(n, a) + 1, s = this.transitionsBetween(i, a) + 1;
        1 == (1 & u) && (u += 1), 1 == (1 & s) && (s += 1), 4 * u < 7 * s && 4 * s < 7 * u && (u = s = Math.max(u, s));
        var c = t.sampleGrid(this.image, n, o, i, a, u, s);
        return new Et(c, [
            n,
            o,
            i,
            a
        ]);
    }, t.shiftPoint = function(t, e, r) {
        var n = (e.getX() - t.getX()) / (r + 1), o = (e.getY() - t.getY()) / (r + 1);
        return new At(t.getX() + n, t.getY() + o);
    }, t.moveAway = function(t, e, r) {
        var n = t.getX(), o = t.getY();
        return n < e ? n -= 1 : n += 1, o < r ? o -= 1 : o += 1, new At(n, o);
    }, t.prototype.detectSolid1 = function(t) {
        var e = t[0], r = t[1], n = t[3], o = t[2], i = this.transitionsBetween(e, r), a = this.transitionsBetween(r, n), u = this.transitionsBetween(n, o), s = this.transitionsBetween(o, e), c = i, f = [
            o,
            e,
            r,
            n
        ];
        return c > a && (c = a, f[0] = e, f[1] = r, f[2] = n, f[3] = o), c > u && (c = u, f[0] = r, f[1] = n, f[2] = o, f[3] = e), c > s && (f[0] = n, f[1] = o, f[2] = e, f[3] = r), f;
    }, t.prototype.detectSolid2 = function(e) {
        var r = e[0], n = e[1], o = e[2], i = e[3], a = this.transitionsBetween(r, i), u = t.shiftPoint(n, o, 4 * (a + 1)), s = t.shiftPoint(o, n, 4 * (a + 1));
        return this.transitionsBetween(u, r) < this.transitionsBetween(s, i) ? (e[0] = r, e[1] = n, e[2] = o, e[3] = i) : (e[0] = n, e[1] = o, e[2] = i, e[3] = r), e;
    }, t.prototype.correctTopRight = function(e) {
        var r = e[0], n = e[1], o = e[2], i = e[3], a = this.transitionsBetween(r, i), u = this.transitionsBetween(n, i), s = t.shiftPoint(r, n, 4 * (u + 1)), c = t.shiftPoint(o, n, 4 * (a + 1));
        a = this.transitionsBetween(s, i), u = this.transitionsBetween(c, i);
        var f = new At(i.getX() + (o.getX() - n.getX()) / (a + 1), i.getY() + (o.getY() - n.getY()) / (a + 1)), h = new At(i.getX() + (r.getX() - n.getX()) / (u + 1), i.getY() + (r.getY() - n.getY()) / (u + 1));
        return this.isValid(f) ? this.isValid(h) ? this.transitionsBetween(s, f) + this.transitionsBetween(c, f) > this.transitionsBetween(s, h) + this.transitionsBetween(c, h) ? f : h : f : this.isValid(h) ? h : null;
    }, t.prototype.shiftToModuleCenter = function(e) {
        var r = e[0], n = e[1], o = e[2], i = e[3], a = this.transitionsBetween(r, i) + 1, u = this.transitionsBetween(o, i) + 1, s = t.shiftPoint(r, n, 4 * u), c = t.shiftPoint(o, n, 4 * a);
        1 == (1 & (a = this.transitionsBetween(s, i) + 1)) && (a += 1), 1 == (1 & (u = this.transitionsBetween(c, i) + 1)) && (u += 1);
        var f, h, l = (r.getX() + n.getX() + o.getX() + i.getX()) / 4, d = (r.getY() + n.getY() + o.getY() + i.getY()) / 4;
        return r = t.moveAway(r, l, d), n = t.moveAway(n, l, d), o = t.moveAway(o, l, d), i = t.moveAway(i, l, d), s = t.shiftPoint(r, n, 4 * u), s = t.shiftPoint(s, i, 4 * a), f = t.shiftPoint(n, r, 4 * u), f = t.shiftPoint(f, o, 4 * a), c = t.shiftPoint(o, i, 4 * u), c = t.shiftPoint(c, n, 4 * a), h = t.shiftPoint(i, o, 4 * u), [
            s,
            f,
            c,
            h = t.shiftPoint(h, r, 4 * a)
        ];
    }, t.prototype.isValid = function(t) {
        return t.getX() >= 0 && t.getX() < this.image.getWidth() && t.getY() > 0 && t.getY() < this.image.getHeight();
    }, t.sampleGrid = function(t, e, r, n, o, i, a) {
        return Nt.getInstance().sampleGrid(t, i, a, .5, .5, i - .5, .5, i - .5, a - .5, .5, a - .5, e.getX(), e.getY(), o.getX(), o.getY(), n.getX(), n.getY(), r.getX(), r.getY());
    }, t.prototype.transitionsBetween = function(t, e) {
        var r = Math.trunc(t.getX()), n = Math.trunc(t.getY()), o = Math.trunc(e.getX()), i = Math.trunc(e.getY()), a = Math.abs(i - n) > Math.abs(o - r);
        if (a) {
            var u = r;
            r = n, n = u, u = o, o = i, i = u;
        }
        for(var s = Math.abs(o - r), c = Math.abs(i - n), f = -s / 2, h = n < i ? 1 : -1, l = r < o ? 1 : -1, d = 0, p = this.image.get(a ? n : r, a ? r : n), g = r, y = n; g !== o; g += l){
            var w = this.image.get(a ? y : g, a ? g : y);
            if (w !== p && (d++, p = w), (f += c) > 0) {
                if (y === i) break;
                y += h, f -= s;
            }
        }
        return d;
    }, t;
}(), Or = function() {
    function t() {
        this.decoder = new Ir;
    }
    return t.prototype.decode = function(e, r) {
        var n, o;
        if (void 0 === r && (r = null), null != r && r.has(T.PURE_BARCODE)) {
            var i = t.extractPureBits(e.getBlackMatrix());
            n = this.decoder.decode(i), o = t.NO_POINTS;
        } else {
            var a = new Sr(e.getBlackMatrix()).detect();
            n = this.decoder.decode(a.getBits()), o = a.getPoints();
        }
        var u = n.getRawBytes(), s = new et(n.getText(), u, 8 * u.length, o, nt.DATA_MATRIX, w.currentTimeMillis()), c = n.getByteSegments();
        null != c && s.putMetadata(it.BYTE_SEGMENTS, c);
        var f = n.getECLevel();
        return null != f && s.putMetadata(it.ERROR_CORRECTION_LEVEL, f), s;
    }, t.prototype.reset = function() {}, t.extractPureBits = function(t) {
        var e = t.getTopLeftOnBit(), r = t.getBottomRightOnBit();
        if (null == e || null == r) throw new U;
        var n = this.moduleSize(e, t), o = e[1], i = r[1], a = e[0], u = (r[0] - a + 1) / n, s = (i - o + 1) / n;
        if (u <= 0 || s <= 0) throw new U;
        var c = n / 2;
        o += c, a += c;
        for(var f = new x(u, s), h = 0; h < s; h++)for(var l = o + h * n, d = 0; d < u; d++)t.get(a + d * n, l) && f.set(d, h);
        return f;
    }, t.moduleSize = function(t, e) {
        for(var r = e.getWidth(), n = t[0], o = t[1]; n < r && e.get(n, o);)n++;
        if (n === r) throw new U;
        var i = n - t[0];
        if (0 === i) throw new U;
        return i;
    }, t.NO_POINTS = [], t;
}(), Tr = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e) {
        return void 0 === e && (e = 500), t.call(this, new Or, e) || this;
    }
    Tr(e, t);
}(tt), function(t) {
    t[t.L = 0] = "L", t[t.M = 1] = "M", t[t.Q = 2] = "Q", t[t.H = 3] = "H";
}(Ar || (Ar = {}));
var br, Rr = function() {
    function t(e, r, n) {
        this.value = e, this.stringValue = r, this.bits = n, t.FOR_BITS.set(n, this), t.FOR_VALUE.set(e, this);
    }
    return t.prototype.getValue = function() {
        return this.value;
    }, t.prototype.getBits = function() {
        return this.bits;
    }, t.fromString = function(e) {
        switch(e){
            case "L":
                return t.L;
            case "M":
                return t.M;
            case "Q":
                return t.Q;
            case "H":
                return t.H;
            default:
                throw new f(e + "not available");
        }
    }, t.prototype.toString = function() {
        return this.stringValue;
    }, t.prototype.equals = function(e) {
        if (!(e instanceof t)) return !1;
        var r = e;
        return this.value === r.value;
    }, t.forBits = function(e) {
        if (e < 0 || e >= t.FOR_BITS.size) throw new l;
        return t.FOR_BITS.get(e);
    }, t.FOR_BITS = new Map, t.FOR_VALUE = new Map, t.L = new t(Ar.L, "L", 1), t.M = new t(Ar.M, "M", 0), t.Q = new t(Ar.Q, "Q", 3), t.H = new t(Ar.H, "H", 2), t;
}(), Nr = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Dr = function() {
    function t(t) {
        this.errorCorrectionLevel = Rr.forBits(t >> 3 & 3), this.dataMask = 7 & t;
    }
    return t.numBitsDiffering = function(t, e) {
        return I.bitCount(t ^ e);
    }, t.decodeFormatInformation = function(e, r) {
        var n = t.doDecodeFormatInformation(e, r);
        return null !== n ? n : t.doDecodeFormatInformation(e ^ t.FORMAT_INFO_MASK_QR, r ^ t.FORMAT_INFO_MASK_QR);
    }, t.doDecodeFormatInformation = function(e, r) {
        var n, o, i = Number.MAX_SAFE_INTEGER, a = 0;
        try {
            for(var u = Nr(t.FORMAT_INFO_DECODE_LOOKUP), s = u.next(); !s.done; s = u.next()){
                var c = s.value, f = c[0];
                if (f === e || f === r) return new t(c[1]);
                var h = t.numBitsDiffering(e, f);
                h < i && (a = c[1], i = h), e !== r && (h = t.numBitsDiffering(r, f)) < i && (a = c[1], i = h);
            }
        } catch (t) {
            n = {
                error: t
            };
        } finally{
            try {
                s && !s.done && (o = u.return) && o.call(u);
            } finally{
                if (n) throw n.error;
            }
        }
        return i <= 3 ? new t(a) : null;
    }, t.prototype.getErrorCorrectionLevel = function() {
        return this.errorCorrectionLevel;
    }, t.prototype.getDataMask = function() {
        return this.dataMask;
    }, t.prototype.hashCode = function() {
        return this.errorCorrectionLevel.getBits() << 3 | this.dataMask;
    }, t.prototype.equals = function(e) {
        if (!(e instanceof t)) return !1;
        var r = e;
        return this.errorCorrectionLevel === r.errorCorrectionLevel && this.dataMask === r.dataMask;
    }, t.FORMAT_INFO_MASK_QR = 21522, t.FORMAT_INFO_DECODE_LOOKUP = [
        Int32Array.from([
            21522,
            0
        ]),
        Int32Array.from([
            20773,
            1
        ]),
        Int32Array.from([
            24188,
            2
        ]),
        Int32Array.from([
            23371,
            3
        ]),
        Int32Array.from([
            17913,
            4
        ]),
        Int32Array.from([
            16590,
            5
        ]),
        Int32Array.from([
            20375,
            6
        ]),
        Int32Array.from([
            19104,
            7
        ]),
        Int32Array.from([
            30660,
            8
        ]),
        Int32Array.from([
            29427,
            9
        ]),
        Int32Array.from([
            32170,
            10
        ]),
        Int32Array.from([
            30877,
            11
        ]),
        Int32Array.from([
            26159,
            12
        ]),
        Int32Array.from([
            25368,
            13
        ]),
        Int32Array.from([
            27713,
            14
        ]),
        Int32Array.from([
            26998,
            15
        ]),
        Int32Array.from([
            5769,
            16
        ]),
        Int32Array.from([
            5054,
            17
        ]),
        Int32Array.from([
            7399,
            18
        ]),
        Int32Array.from([
            6608,
            19
        ]),
        Int32Array.from([
            1890,
            20
        ]),
        Int32Array.from([
            597,
            21
        ]),
        Int32Array.from([
            3340,
            22
        ]),
        Int32Array.from([
            2107,
            23
        ]),
        Int32Array.from([
            13663,
            24
        ]),
        Int32Array.from([
            12392,
            25
        ]),
        Int32Array.from([
            16177,
            26
        ]),
        Int32Array.from([
            14854,
            27
        ]),
        Int32Array.from([
            9396,
            28
        ]),
        Int32Array.from([
            8579,
            29
        ]),
        Int32Array.from([
            11994,
            30
        ]),
        Int32Array.from([
            11245,
            31
        ])
    ], t;
}(), Pr = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Mr = function() {
    function t(t) {
        for(var e = [], r = 1; r < arguments.length; r++)e[r - 1] = arguments[r];
        this.ecCodewordsPerBlock = t, this.ecBlocks = e;
    }
    return t.prototype.getECCodewordsPerBlock = function() {
        return this.ecCodewordsPerBlock;
    }, t.prototype.getNumBlocks = function() {
        var t, e, r = 0, n = this.ecBlocks;
        try {
            for(var o = Pr(n), i = o.next(); !i.done; i = o.next()){
                r += i.value.getCount();
            }
        } catch (e) {
            t = {
                error: e
            };
        } finally{
            try {
                i && !i.done && (e = o.return) && e.call(o);
            } finally{
                if (t) throw t.error;
            }
        }
        return r;
    }, t.prototype.getTotalECCodewords = function() {
        return this.ecCodewordsPerBlock * this.getNumBlocks();
    }, t.prototype.getECBlocks = function() {
        return this.ecBlocks;
    }, t;
}(), Br = function() {
    function t(t, e) {
        this.count = t, this.dataCodewords = e;
    }
    return t.prototype.getCount = function() {
        return this.count;
    }, t.prototype.getDataCodewords = function() {
        return this.dataCodewords;
    }, t;
}(), Lr = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Fr = function() {
    function t(t, e) {
        for(var r, n, o = [], i = 2; i < arguments.length; i++)o[i - 2] = arguments[i];
        this.versionNumber = t, this.alignmentPatternCenters = e, this.ecBlocks = o;
        var a = 0, u = o[0].getECCodewordsPerBlock(), s = o[0].getECBlocks();
        try {
            for(var c = Lr(s), f = c.next(); !f.done; f = c.next()){
                var h = f.value;
                a += h.getCount() * (h.getDataCodewords() + u);
            }
        } catch (t) {
            r = {
                error: t
            };
        } finally{
            try {
                f && !f.done && (n = c.return) && n.call(c);
            } finally{
                if (r) throw r.error;
            }
        }
        this.totalCodewords = a;
    }
    return t.prototype.getVersionNumber = function() {
        return this.versionNumber;
    }, t.prototype.getAlignmentPatternCenters = function() {
        return this.alignmentPatternCenters;
    }, t.prototype.getTotalCodewords = function() {
        return this.totalCodewords;
    }, t.prototype.getDimensionForVersion = function() {
        return 17 + 4 * this.versionNumber;
    }, t.prototype.getECBlocksForLevel = function(t) {
        return this.ecBlocks[t.getValue()];
    }, t.getProvisionalVersionForDimension = function(t) {
        if (t % 4 != 1) throw new R;
        try {
            return this.getVersionForNumber((t - 17) / 4);
        } catch (t) {
            throw new R;
        }
    }, t.getVersionForNumber = function(e) {
        if (e < 1 || e > 40) throw new l;
        return t.VERSIONS[e - 1];
    }, t.decodeVersionInformation = function(e) {
        for(var r = Number.MAX_SAFE_INTEGER, n = 0, o = 0; o < t.VERSION_DECODE_INFO.length; o++){
            var i = t.VERSION_DECODE_INFO[o];
            if (i === e) return t.getVersionForNumber(o + 7);
            var a = Dr.numBitsDiffering(e, i);
            a < r && (n = o + 7, r = a);
        }
        return r <= 3 ? t.getVersionForNumber(n) : null;
    }, t.prototype.buildFunctionPattern = function() {
        var t = this.getDimensionForVersion(), e = new x(t);
        e.setRegion(0, 0, 9, 9), e.setRegion(t - 8, 0, 8, 9), e.setRegion(0, t - 8, 9, 8);
        for(var r = this.alignmentPatternCenters.length, n = 0; n < r; n++)for(var o = this.alignmentPatternCenters[n] - 2, i = 0; i < r; i++)0 === n && (0 === i || i === r - 1) || n === r - 1 && 0 === i || e.setRegion(this.alignmentPatternCenters[i] - 2, o, 5, 5);
        return e.setRegion(6, 9, 1, t - 17), e.setRegion(9, 6, t - 17, 1), this.versionNumber > 6 && (e.setRegion(t - 11, 0, 3, 6), e.setRegion(0, t - 11, 6, 3)), e;
    }, t.prototype.toString = function() {
        return "" + this.versionNumber;
    }, t.VERSION_DECODE_INFO = Int32Array.from([
        31892,
        34236,
        39577,
        42195,
        48118,
        51042,
        55367,
        58893,
        63784,
        68472,
        70749,
        76311,
        79154,
        84390,
        87683,
        92361,
        96236,
        102084,
        102881,
        110507,
        110734,
        117786,
        119615,
        126325,
        127568,
        133589,
        136944,
        141498,
        145311,
        150283,
        152622,
        158308,
        161089,
        167017
    ]), t.VERSIONS = [
        new t(1, new Int32Array(0), new Mr(7, new Br(1, 19)), new Mr(10, new Br(1, 16)), new Mr(13, new Br(1, 13)), new Mr(17, new Br(1, 9))),
        new t(2, Int32Array.from([
            6,
            18
        ]), new Mr(10, new Br(1, 34)), new Mr(16, new Br(1, 28)), new Mr(22, new Br(1, 22)), new Mr(28, new Br(1, 16))),
        new t(3, Int32Array.from([
            6,
            22
        ]), new Mr(15, new Br(1, 55)), new Mr(26, new Br(1, 44)), new Mr(18, new Br(2, 17)), new Mr(22, new Br(2, 13))),
        new t(4, Int32Array.from([
            6,
            26
        ]), new Mr(20, new Br(1, 80)), new Mr(18, new Br(2, 32)), new Mr(26, new Br(2, 24)), new Mr(16, new Br(4, 9))),
        new t(5, Int32Array.from([
            6,
            30
        ]), new Mr(26, new Br(1, 108)), new Mr(24, new Br(2, 43)), new Mr(18, new Br(2, 15), new Br(2, 16)), new Mr(22, new Br(2, 11), new Br(2, 12))),
        new t(6, Int32Array.from([
            6,
            34
        ]), new Mr(18, new Br(2, 68)), new Mr(16, new Br(4, 27)), new Mr(24, new Br(4, 19)), new Mr(28, new Br(4, 15))),
        new t(7, Int32Array.from([
            6,
            22,
            38
        ]), new Mr(20, new Br(2, 78)), new Mr(18, new Br(4, 31)), new Mr(18, new Br(2, 14), new Br(4, 15)), new Mr(26, new Br(4, 13), new Br(1, 14))),
        new t(8, Int32Array.from([
            6,
            24,
            42
        ]), new Mr(24, new Br(2, 97)), new Mr(22, new Br(2, 38), new Br(2, 39)), new Mr(22, new Br(4, 18), new Br(2, 19)), new Mr(26, new Br(4, 14), new Br(2, 15))),
        new t(9, Int32Array.from([
            6,
            26,
            46
        ]), new Mr(30, new Br(2, 116)), new Mr(22, new Br(3, 36), new Br(2, 37)), new Mr(20, new Br(4, 16), new Br(4, 17)), new Mr(24, new Br(4, 12), new Br(4, 13))),
        new t(10, Int32Array.from([
            6,
            28,
            50
        ]), new Mr(18, new Br(2, 68), new Br(2, 69)), new Mr(26, new Br(4, 43), new Br(1, 44)), new Mr(24, new Br(6, 19), new Br(2, 20)), new Mr(28, new Br(6, 15), new Br(2, 16))),
        new t(11, Int32Array.from([
            6,
            30,
            54
        ]), new Mr(20, new Br(4, 81)), new Mr(30, new Br(1, 50), new Br(4, 51)), new Mr(28, new Br(4, 22), new Br(4, 23)), new Mr(24, new Br(3, 12), new Br(8, 13))),
        new t(12, Int32Array.from([
            6,
            32,
            58
        ]), new Mr(24, new Br(2, 92), new Br(2, 93)), new Mr(22, new Br(6, 36), new Br(2, 37)), new Mr(26, new Br(4, 20), new Br(6, 21)), new Mr(28, new Br(7, 14), new Br(4, 15))),
        new t(13, Int32Array.from([
            6,
            34,
            62
        ]), new Mr(26, new Br(4, 107)), new Mr(22, new Br(8, 37), new Br(1, 38)), new Mr(24, new Br(8, 20), new Br(4, 21)), new Mr(22, new Br(12, 11), new Br(4, 12))),
        new t(14, Int32Array.from([
            6,
            26,
            46,
            66
        ]), new Mr(30, new Br(3, 115), new Br(1, 116)), new Mr(24, new Br(4, 40), new Br(5, 41)), new Mr(20, new Br(11, 16), new Br(5, 17)), new Mr(24, new Br(11, 12), new Br(5, 13))),
        new t(15, Int32Array.from([
            6,
            26,
            48,
            70
        ]), new Mr(22, new Br(5, 87), new Br(1, 88)), new Mr(24, new Br(5, 41), new Br(5, 42)), new Mr(30, new Br(5, 24), new Br(7, 25)), new Mr(24, new Br(11, 12), new Br(7, 13))),
        new t(16, Int32Array.from([
            6,
            26,
            50,
            74
        ]), new Mr(24, new Br(5, 98), new Br(1, 99)), new Mr(28, new Br(7, 45), new Br(3, 46)), new Mr(24, new Br(15, 19), new Br(2, 20)), new Mr(30, new Br(3, 15), new Br(13, 16))),
        new t(17, Int32Array.from([
            6,
            30,
            54,
            78
        ]), new Mr(28, new Br(1, 107), new Br(5, 108)), new Mr(28, new Br(10, 46), new Br(1, 47)), new Mr(28, new Br(1, 22), new Br(15, 23)), new Mr(28, new Br(2, 14), new Br(17, 15))),
        new t(18, Int32Array.from([
            6,
            30,
            56,
            82
        ]), new Mr(30, new Br(5, 120), new Br(1, 121)), new Mr(26, new Br(9, 43), new Br(4, 44)), new Mr(28, new Br(17, 22), new Br(1, 23)), new Mr(28, new Br(2, 14), new Br(19, 15))),
        new t(19, Int32Array.from([
            6,
            30,
            58,
            86
        ]), new Mr(28, new Br(3, 113), new Br(4, 114)), new Mr(26, new Br(3, 44), new Br(11, 45)), new Mr(26, new Br(17, 21), new Br(4, 22)), new Mr(26, new Br(9, 13), new Br(16, 14))),
        new t(20, Int32Array.from([
            6,
            34,
            62,
            90
        ]), new Mr(28, new Br(3, 107), new Br(5, 108)), new Mr(26, new Br(3, 41), new Br(13, 42)), new Mr(30, new Br(15, 24), new Br(5, 25)), new Mr(28, new Br(15, 15), new Br(10, 16))),
        new t(21, Int32Array.from([
            6,
            28,
            50,
            72,
            94
        ]), new Mr(28, new Br(4, 116), new Br(4, 117)), new Mr(26, new Br(17, 42)), new Mr(28, new Br(17, 22), new Br(6, 23)), new Mr(30, new Br(19, 16), new Br(6, 17))),
        new t(22, Int32Array.from([
            6,
            26,
            50,
            74,
            98
        ]), new Mr(28, new Br(2, 111), new Br(7, 112)), new Mr(28, new Br(17, 46)), new Mr(30, new Br(7, 24), new Br(16, 25)), new Mr(24, new Br(34, 13))),
        new t(23, Int32Array.from([
            6,
            30,
            54,
            78,
            102
        ]), new Mr(30, new Br(4, 121), new Br(5, 122)), new Mr(28, new Br(4, 47), new Br(14, 48)), new Mr(30, new Br(11, 24), new Br(14, 25)), new Mr(30, new Br(16, 15), new Br(14, 16))),
        new t(24, Int32Array.from([
            6,
            28,
            54,
            80,
            106
        ]), new Mr(30, new Br(6, 117), new Br(4, 118)), new Mr(28, new Br(6, 45), new Br(14, 46)), new Mr(30, new Br(11, 24), new Br(16, 25)), new Mr(30, new Br(30, 16), new Br(2, 17))),
        new t(25, Int32Array.from([
            6,
            32,
            58,
            84,
            110
        ]), new Mr(26, new Br(8, 106), new Br(4, 107)), new Mr(28, new Br(8, 47), new Br(13, 48)), new Mr(30, new Br(7, 24), new Br(22, 25)), new Mr(30, new Br(22, 15), new Br(13, 16))),
        new t(26, Int32Array.from([
            6,
            30,
            58,
            86,
            114
        ]), new Mr(28, new Br(10, 114), new Br(2, 115)), new Mr(28, new Br(19, 46), new Br(4, 47)), new Mr(28, new Br(28, 22), new Br(6, 23)), new Mr(30, new Br(33, 16), new Br(4, 17))),
        new t(27, Int32Array.from([
            6,
            34,
            62,
            90,
            118
        ]), new Mr(30, new Br(8, 122), new Br(4, 123)), new Mr(28, new Br(22, 45), new Br(3, 46)), new Mr(30, new Br(8, 23), new Br(26, 24)), new Mr(30, new Br(12, 15), new Br(28, 16))),
        new t(28, Int32Array.from([
            6,
            26,
            50,
            74,
            98,
            122
        ]), new Mr(30, new Br(3, 117), new Br(10, 118)), new Mr(28, new Br(3, 45), new Br(23, 46)), new Mr(30, new Br(4, 24), new Br(31, 25)), new Mr(30, new Br(11, 15), new Br(31, 16))),
        new t(29, Int32Array.from([
            6,
            30,
            54,
            78,
            102,
            126
        ]), new Mr(30, new Br(7, 116), new Br(7, 117)), new Mr(28, new Br(21, 45), new Br(7, 46)), new Mr(30, new Br(1, 23), new Br(37, 24)), new Mr(30, new Br(19, 15), new Br(26, 16))),
        new t(30, Int32Array.from([
            6,
            26,
            52,
            78,
            104,
            130
        ]), new Mr(30, new Br(5, 115), new Br(10, 116)), new Mr(28, new Br(19, 47), new Br(10, 48)), new Mr(30, new Br(15, 24), new Br(25, 25)), new Mr(30, new Br(23, 15), new Br(25, 16))),
        new t(31, Int32Array.from([
            6,
            30,
            56,
            82,
            108,
            134
        ]), new Mr(30, new Br(13, 115), new Br(3, 116)), new Mr(28, new Br(2, 46), new Br(29, 47)), new Mr(30, new Br(42, 24), new Br(1, 25)), new Mr(30, new Br(23, 15), new Br(28, 16))),
        new t(32, Int32Array.from([
            6,
            34,
            60,
            86,
            112,
            138
        ]), new Mr(30, new Br(17, 115)), new Mr(28, new Br(10, 46), new Br(23, 47)), new Mr(30, new Br(10, 24), new Br(35, 25)), new Mr(30, new Br(19, 15), new Br(35, 16))),
        new t(33, Int32Array.from([
            6,
            30,
            58,
            86,
            114,
            142
        ]), new Mr(30, new Br(17, 115), new Br(1, 116)), new Mr(28, new Br(14, 46), new Br(21, 47)), new Mr(30, new Br(29, 24), new Br(19, 25)), new Mr(30, new Br(11, 15), new Br(46, 16))),
        new t(34, Int32Array.from([
            6,
            34,
            62,
            90,
            118,
            146
        ]), new Mr(30, new Br(13, 115), new Br(6, 116)), new Mr(28, new Br(14, 46), new Br(23, 47)), new Mr(30, new Br(44, 24), new Br(7, 25)), new Mr(30, new Br(59, 16), new Br(1, 17))),
        new t(35, Int32Array.from([
            6,
            30,
            54,
            78,
            102,
            126,
            150
        ]), new Mr(30, new Br(12, 121), new Br(7, 122)), new Mr(28, new Br(12, 47), new Br(26, 48)), new Mr(30, new Br(39, 24), new Br(14, 25)), new Mr(30, new Br(22, 15), new Br(41, 16))),
        new t(36, Int32Array.from([
            6,
            24,
            50,
            76,
            102,
            128,
            154
        ]), new Mr(30, new Br(6, 121), new Br(14, 122)), new Mr(28, new Br(6, 47), new Br(34, 48)), new Mr(30, new Br(46, 24), new Br(10, 25)), new Mr(30, new Br(2, 15), new Br(64, 16))),
        new t(37, Int32Array.from([
            6,
            28,
            54,
            80,
            106,
            132,
            158
        ]), new Mr(30, new Br(17, 122), new Br(4, 123)), new Mr(28, new Br(29, 46), new Br(14, 47)), new Mr(30, new Br(49, 24), new Br(10, 25)), new Mr(30, new Br(24, 15), new Br(46, 16))),
        new t(38, Int32Array.from([
            6,
            32,
            58,
            84,
            110,
            136,
            162
        ]), new Mr(30, new Br(4, 122), new Br(18, 123)), new Mr(28, new Br(13, 46), new Br(32, 47)), new Mr(30, new Br(48, 24), new Br(14, 25)), new Mr(30, new Br(42, 15), new Br(32, 16))),
        new t(39, Int32Array.from([
            6,
            26,
            54,
            82,
            110,
            138,
            166
        ]), new Mr(30, new Br(20, 117), new Br(4, 118)), new Mr(28, new Br(40, 47), new Br(7, 48)), new Mr(30, new Br(43, 24), new Br(22, 25)), new Mr(30, new Br(10, 15), new Br(67, 16))),
        new t(40, Int32Array.from([
            6,
            30,
            58,
            86,
            114,
            142,
            170
        ]), new Mr(30, new Br(19, 118), new Br(6, 119)), new Mr(28, new Br(18, 47), new Br(31, 48)), new Mr(30, new Br(34, 24), new Br(34, 25)), new Mr(30, new Br(20, 15), new Br(61, 16)))
    ], t;
}();
!function(t) {
    t[t.DATA_MASK_000 = 0] = "DATA_MASK_000", t[t.DATA_MASK_001 = 1] = "DATA_MASK_001", t[t.DATA_MASK_010 = 2] = "DATA_MASK_010", t[t.DATA_MASK_011 = 3] = "DATA_MASK_011", t[t.DATA_MASK_100 = 4] = "DATA_MASK_100", t[t.DATA_MASK_101 = 5] = "DATA_MASK_101", t[t.DATA_MASK_110 = 6] = "DATA_MASK_110", t[t.DATA_MASK_111 = 7] = "DATA_MASK_111";
}(br || (br = {}));
var kr, xr = function() {
    function t(t, e) {
        this.value = t, this.isMasked = e;
    }
    return t.prototype.unmaskBitMatrix = function(t, e) {
        for(var r = 0; r < e; r++)for(var n = 0; n < e; n++)this.isMasked(r, n) && t.flip(n, r);
    }, t.values = new Map([
        [
            br.DATA_MASK_000,
            new t(br.DATA_MASK_000, function(t, e) {
                return 0 == (t + e & 1);
            })
        ],
        [
            br.DATA_MASK_001,
            new t(br.DATA_MASK_001, function(t, e) {
                return 0 == (1 & t);
            })
        ],
        [
            br.DATA_MASK_010,
            new t(br.DATA_MASK_010, function(t, e) {
                return e % 3 == 0;
            })
        ],
        [
            br.DATA_MASK_011,
            new t(br.DATA_MASK_011, function(t, e) {
                return (t + e) % 3 == 0;
            })
        ],
        [
            br.DATA_MASK_100,
            new t(br.DATA_MASK_100, function(t, e) {
                return 0 == (Math.floor(t / 2) + Math.floor(e / 3) & 1);
            })
        ],
        [
            br.DATA_MASK_101,
            new t(br.DATA_MASK_101, function(t, e) {
                return t * e % 6 == 0;
            })
        ],
        [
            br.DATA_MASK_110,
            new t(br.DATA_MASK_110, function(t, e) {
                return t * e % 6 < 3;
            })
        ],
        [
            br.DATA_MASK_111,
            new t(br.DATA_MASK_111, function(t, e) {
                return 0 == (t + e + t * e % 3 & 1);
            })
        ]
    ]), t;
}(), Vr = function() {
    function t(t) {
        var e = t.getHeight();
        if (e < 21 || 1 != (3 & e)) throw new R;
        this.bitMatrix = t;
    }
    return t.prototype.readFormatInformation = function() {
        if (null !== this.parsedFormatInfo && void 0 !== this.parsedFormatInfo) return this.parsedFormatInfo;
        for(var t = 0, e = 0; e < 6; e++)t = this.copyBit(e, 8, t);
        t = this.copyBit(7, 8, t), t = this.copyBit(8, 8, t), t = this.copyBit(8, 7, t);
        for(var r = 5; r >= 0; r--)t = this.copyBit(8, r, t);
        var n = this.bitMatrix.getHeight(), o = 0, i = n - 7;
        for(r = n - 1; r >= i; r--)o = this.copyBit(8, r, o);
        for(e = n - 8; e < n; e++)o = this.copyBit(e, 8, o);
        if (this.parsedFormatInfo = Dr.decodeFormatInformation(t, o), null !== this.parsedFormatInfo) return this.parsedFormatInfo;
        throw new R;
    }, t.prototype.readVersion = function() {
        if (null !== this.parsedVersion && void 0 !== this.parsedVersion) return this.parsedVersion;
        var t = this.bitMatrix.getHeight(), e = Math.floor((t - 17) / 4);
        if (e <= 6) return Fr.getVersionForNumber(e);
        for(var r = 0, n = t - 11, o = 5; o >= 0; o--)for(var i = t - 9; i >= n; i--)r = this.copyBit(i, o, r);
        var a = Fr.decodeVersionInformation(r);
        if (null !== a && a.getDimensionForVersion() === t) return this.parsedVersion = a, a;
        r = 0;
        for(i = 5; i >= 0; i--)for(o = t - 9; o >= n; o--)r = this.copyBit(i, o, r);
        if (null !== (a = Fr.decodeVersionInformation(r)) && a.getDimensionForVersion() === t) return this.parsedVersion = a, a;
        throw new R;
    }, t.prototype.copyBit = function(t, e, r) {
        return (this.isMirror ? this.bitMatrix.get(e, t) : this.bitMatrix.get(t, e)) ? r << 1 | 1 : r << 1;
    }, t.prototype.readCodewords = function() {
        var t = this.readFormatInformation(), e = this.readVersion(), r = xr.values.get(t.getDataMask()), n = this.bitMatrix.getHeight();
        r.unmaskBitMatrix(this.bitMatrix, n);
        for(var o = e.buildFunctionPattern(), i = !0, a = new Uint8Array(e.getTotalCodewords()), u = 0, s = 0, c = 0, f = n - 1; f > 0; f -= 2){
            6 === f && f--;
            for(var h = 0; h < n; h++)for(var l = i ? n - 1 - h : h, d = 0; d < 2; d++)o.get(f - d, l) || (c++, s <<= 1, this.bitMatrix.get(f - d, l) && (s |= 1), 8 === c && (a[u++] = s, c = 0, s = 0));
            i = !i;
        }
        if (u !== e.getTotalCodewords()) throw new R;
        return a;
    }, t.prototype.remask = function() {
        if (null !== this.parsedFormatInfo) {
            var t = xr.values[this.parsedFormatInfo.getDataMask()], e = this.bitMatrix.getHeight();
            t.unmaskBitMatrix(this.bitMatrix, e);
        }
    }, t.prototype.setMirror = function(t) {
        this.parsedVersion = null, this.parsedFormatInfo = null, this.isMirror = t;
    }, t.prototype.mirror = function() {
        for(var t = this.bitMatrix, e = 0, r = t.getWidth(); e < r; e++)for(var n = e + 1, o = t.getHeight(); n < o; n++)t.get(e, n) !== t.get(n, e) && (t.flip(n, e), t.flip(e, n));
    }, t;
}(), Ur = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Hr = function() {
    function t(t, e) {
        this.numDataCodewords = t, this.codewords = e;
    }
    return t.getDataBlocks = function(e, r, n) {
        var o, i, a, u;
        if (e.length !== r.getTotalCodewords()) throw new l;
        var s = r.getECBlocksForLevel(n), c = 0, f = s.getECBlocks();
        try {
            for(var h = Ur(f), d = h.next(); !d.done; d = h.next()){
                c += (_ = d.value).getCount();
            }
        } catch (t) {
            o = {
                error: t
            };
        } finally{
            try {
                d && !d.done && (i = h.return) && i.call(h);
            } finally{
                if (o) throw o.error;
            }
        }
        var p = new Array(c), g = 0;
        try {
            for(var y = Ur(f), w = y.next(); !w.done; w = y.next())for(var _ = w.value, v = 0; v < _.getCount(); v++){
                var m = _.getDataCodewords(), A = s.getECCodewordsPerBlock() + m;
                p[g++] = new t(m, new Uint8Array(A));
            }
        } catch (t) {
            a = {
                error: t
            };
        } finally{
            try {
                w && !w.done && (u = y.return) && u.call(y);
            } finally{
                if (a) throw a.error;
            }
        }
        for(var E = p[0].codewords.length, C = p.length - 1; C >= 0;){
            if (p[C].codewords.length === E) break;
            C--;
        }
        C++;
        var I = E - s.getECCodewordsPerBlock(), S = 0;
        for(v = 0; v < I; v++)for(var O = 0; O < g; O++)p[O].codewords[v] = e[S++];
        for(O = C; O < g; O++)p[O].codewords[I] = e[S++];
        var T = p[0].codewords.length;
        for(v = I; v < T; v++)for(O = 0; O < g; O++){
            var b = O < C ? v : v + 1;
            p[O].codewords[b] = e[S++];
        }
        return p;
    }, t.prototype.getNumDataCodewords = function() {
        return this.numDataCodewords;
    }, t.prototype.getCodewords = function() {
        return this.codewords;
    }, t;
}();
!function(t) {
    t[t.TERMINATOR = 0] = "TERMINATOR", t[t.NUMERIC = 1] = "NUMERIC", t[t.ALPHANUMERIC = 2] = "ALPHANUMERIC", t[t.STRUCTURED_APPEND = 3] = "STRUCTURED_APPEND", t[t.BYTE = 4] = "BYTE", t[t.ECI = 5] = "ECI", t[t.KANJI = 6] = "KANJI", t[t.FNC1_FIRST_POSITION = 7] = "FNC1_FIRST_POSITION", t[t.FNC1_SECOND_POSITION = 8] = "FNC1_SECOND_POSITION", t[t.HANZI = 9] = "HANZI";
}(kr || (kr = {}));
var Gr, Xr, Wr = function() {
    function t(e, r, n, o) {
        this.value = e, this.stringValue = r, this.characterCountBitsForVersions = n, this.bits = o, t.FOR_BITS.set(o, this), t.FOR_VALUE.set(e, this);
    }
    return t.forBits = function(e) {
        var r = t.FOR_BITS.get(e);
        if (void 0 === r) throw new l;
        return r;
    }, t.prototype.getCharacterCountBits = function(t) {
        var e, r = t.getVersionNumber();
        return e = r <= 9 ? 0 : r <= 26 ? 1 : 2, this.characterCountBitsForVersions[e];
    }, t.prototype.getValue = function() {
        return this.value;
    }, t.prototype.getBits = function() {
        return this.bits;
    }, t.prototype.equals = function(e) {
        if (!(e instanceof t)) return !1;
        var r = e;
        return this.value === r.value;
    }, t.prototype.toString = function() {
        return this.stringValue;
    }, t.FOR_BITS = new Map, t.FOR_VALUE = new Map, t.TERMINATOR = new t(kr.TERMINATOR, "TERMINATOR", Int32Array.from([
        0,
        0,
        0
    ]), 0), t.NUMERIC = new t(kr.NUMERIC, "NUMERIC", Int32Array.from([
        10,
        12,
        14
    ]), 1), t.ALPHANUMERIC = new t(kr.ALPHANUMERIC, "ALPHANUMERIC", Int32Array.from([
        9,
        11,
        13
    ]), 2), t.STRUCTURED_APPEND = new t(kr.STRUCTURED_APPEND, "STRUCTURED_APPEND", Int32Array.from([
        0,
        0,
        0
    ]), 3), t.BYTE = new t(kr.BYTE, "BYTE", Int32Array.from([
        8,
        16,
        16
    ]), 4), t.ECI = new t(kr.ECI, "ECI", Int32Array.from([
        0,
        0,
        0
    ]), 7), t.KANJI = new t(kr.KANJI, "KANJI", Int32Array.from([
        8,
        10,
        12
    ]), 8), t.FNC1_FIRST_POSITION = new t(kr.FNC1_FIRST_POSITION, "FNC1_FIRST_POSITION", Int32Array.from([
        0,
        0,
        0
    ]), 5), t.FNC1_SECOND_POSITION = new t(kr.FNC1_SECOND_POSITION, "FNC1_SECOND_POSITION", Int32Array.from([
        0,
        0,
        0
    ]), 9), t.HANZI = new t(kr.HANZI, "HANZI", Int32Array.from([
        8,
        10,
        12
    ]), 13), t;
}(), jr = function() {
    function t() {}
    return t.decode = function(e, r, n, o) {
        var i = new mr(e), a = new k, u = new Array, s = -1, c = -1;
        try {
            var f = null, h = !1, l = void 0;
            do {
                if (i.available() < 4) l = Wr.TERMINATOR;
                else {
                    var d = i.readBits(4);
                    l = Wr.forBits(d);
                }
                switch(l){
                    case Wr.TERMINATOR:
                        break;
                    case Wr.FNC1_FIRST_POSITION:
                    case Wr.FNC1_SECOND_POSITION:
                        h = !0;
                        break;
                    case Wr.STRUCTURED_APPEND:
                        if (i.available() < 16) throw new R;
                        s = i.readBits(8), c = i.readBits(8);
                        break;
                    case Wr.ECI:
                        var p = t.parseECIValue(i);
                        if (null === (f = P.getCharacterSetECIByValue(p))) throw new R;
                        break;
                    case Wr.HANZI:
                        var g = i.readBits(4), y = i.readBits(l.getCharacterCountBits(r));
                        g === t.GB2312_SUBSET && t.decodeHanziSegment(i, a, y);
                        break;
                    default:
                        var w = i.readBits(l.getCharacterCountBits(r));
                        switch(l){
                            case Wr.NUMERIC:
                                t.decodeNumericSegment(i, a, w);
                                break;
                            case Wr.ALPHANUMERIC:
                                t.decodeAlphanumericSegment(i, a, w, h);
                                break;
                            case Wr.BYTE:
                                t.decodeByteSegment(i, a, w, f, u, o);
                                break;
                            case Wr.KANJI:
                                t.decodeKanjiSegment(i, a, w);
                                break;
                            default:
                                throw new R;
                        }
                }
            }while (l !== Wr.TERMINATOR)
        } catch (t) {
            throw new R;
        }
        return new at(e, a.toString(), 0 === u.length ? null : u, null === n ? null : n.toString(), s, c);
    }, t.decodeHanziSegment = function(t, e, r) {
        if (13 * r > t.available()) throw new R;
        for(var n = new Uint8Array(2 * r), o = 0; r > 0;){
            var i = t.readBits(13), a = i / 96 << 8 & 4294967295 | i % 96;
            a += a < 959 ? 41377 : 42657, n[o] = a >> 8 & 255, n[o + 1] = 255 & a, o += 2, r--;
        }
        try {
            e.append(L.decode(n, F.GB2312));
        } catch (t) {
            throw new R(t);
        }
    }, t.decodeKanjiSegment = function(t, e, r) {
        if (13 * r > t.available()) throw new R;
        for(var n = new Uint8Array(2 * r), o = 0; r > 0;){
            var i = t.readBits(13), a = i / 192 << 8 & 4294967295 | i % 192;
            a += a < 7936 ? 33088 : 49472, n[o] = a >> 8, n[o + 1] = a, o += 2, r--;
        }
        try {
            e.append(L.decode(n, F.SHIFT_JIS));
        } catch (t) {
            throw new R(t);
        }
    }, t.decodeByteSegment = function(t, e, r, n, o, i) {
        if (8 * r > t.available()) throw new R;
        for(var a, u = new Uint8Array(r), s = 0; s < r; s++)u[s] = t.readBits(8);
        a = null === n ? F.guessEncoding(u, i) : n.getName();
        try {
            e.append(L.decode(u, a));
        } catch (t) {
            throw new R(t);
        }
        o.push(u);
    }, t.toAlphaNumericChar = function(e) {
        if (e >= t.ALPHANUMERIC_CHARS.length) throw new R;
        return t.ALPHANUMERIC_CHARS[e];
    }, t.decodeAlphanumericSegment = function(e, r, n, o) {
        for(var i = r.length(); n > 1;){
            if (e.available() < 11) throw new R;
            var a = e.readBits(11);
            r.append(t.toAlphaNumericChar(Math.floor(a / 45))), r.append(t.toAlphaNumericChar(a % 45)), n -= 2;
        }
        if (1 === n) {
            if (e.available() < 6) throw new R;
            r.append(t.toAlphaNumericChar(e.readBits(6)));
        }
        if (o) for(var u = i; u < r.length(); u++)"%" === r.charAt(u) && (u < r.length() - 1 && "%" === r.charAt(u + 1) ? r.deleteCharAt(u + 1) : r.setCharAt(u, String.fromCharCode(29)));
    }, t.decodeNumericSegment = function(e, r, n) {
        for(; n >= 3;){
            if (e.available() < 10) throw new R;
            var o = e.readBits(10);
            if (o >= 1e3) throw new R;
            r.append(t.toAlphaNumericChar(Math.floor(o / 100))), r.append(t.toAlphaNumericChar(Math.floor(o / 10) % 10)), r.append(t.toAlphaNumericChar(o % 10)), n -= 3;
        }
        if (2 === n) {
            if (e.available() < 7) throw new R;
            var i = e.readBits(7);
            if (i >= 100) throw new R;
            r.append(t.toAlphaNumericChar(Math.floor(i / 10))), r.append(t.toAlphaNumericChar(i % 10));
        } else if (1 === n) {
            if (e.available() < 4) throw new R;
            var a = e.readBits(4);
            if (a >= 10) throw new R;
            r.append(t.toAlphaNumericChar(a));
        }
    }, t.parseECIValue = function(t) {
        var e = t.readBits(8);
        if (0 == (128 & e)) return 127 & e;
        if (128 == (192 & e)) return (63 & e) << 8 & 4294967295 | t.readBits(8);
        if (192 == (224 & e)) return (31 & e) << 16 & 4294967295 | t.readBits(16);
        throw new R;
    }, t.ALPHANUMERIC_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:", t.GB2312_SUBSET = 1, t;
}(), zr = function() {
    function t(t) {
        this.mirrored = t;
    }
    return t.prototype.isMirrored = function() {
        return this.mirrored;
    }, t.prototype.applyMirroredCorrection = function(t) {
        if (this.mirrored && null !== t && !(t.length < 3)) {
            var e = t[0];
            t[0] = t[2], t[2] = e;
        }
    }, t;
}(), Yr = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Zr = function() {
    function t() {
        this.rsDecoder = new wt(lt.QR_CODE_FIELD_256);
    }
    return t.prototype.decodeBooleanArray = function(t, e) {
        return this.decodeBitMatrix(x.parseFromBooleanArray(t), e);
    }, t.prototype.decodeBitMatrix = function(t, e) {
        var r = new Vr(t), n = null;
        try {
            return this.decodeBitMatrixParser(r, e);
        } catch (t) {
            n = t;
        }
        try {
            r.remask(), r.setMirror(!0), r.readVersion(), r.readFormatInformation(), r.mirror();
            var o = this.decodeBitMatrixParser(r, e);
            return o.setOther(new zr(!0)), o;
        } catch (t) {
            if (null !== n) throw n;
            throw t;
        }
    }, t.prototype.decodeBitMatrixParser = function(t, e) {
        var r, n, o, i, a = t.readVersion(), u = t.readFormatInformation().getErrorCorrectionLevel(), s = t.readCodewords(), c = Hr.getDataBlocks(s, a, u), f = 0;
        try {
            for(var h = Yr(c), l = h.next(); !l.done; l = h.next()){
                f += (w = l.value).getNumDataCodewords();
            }
        } catch (t) {
            r = {
                error: t
            };
        } finally{
            try {
                l && !l.done && (n = h.return) && n.call(h);
            } finally{
                if (r) throw r.error;
            }
        }
        var d = new Uint8Array(f), p = 0;
        try {
            for(var g = Yr(c), y = g.next(); !y.done; y = g.next()){
                var w, _ = (w = y.value).getCodewords(), v = w.getNumDataCodewords();
                this.correctErrors(_, v);
                for(var m = 0; m < v; m++)d[p++] = _[m];
            }
        } catch (t) {
            o = {
                error: t
            };
        } finally{
            try {
                y && !y.done && (i = g.return) && i.call(g);
            } finally{
                if (o) throw o.error;
            }
        }
        return jr.decode(d, a, u, e);
    }, t.prototype.correctErrors = function(t, e) {
        var r = new Int32Array(t);
        try {
            this.rsDecoder.decode(r, t.length - e);
        } catch (t) {
            throw new g;
        }
        for(var n = 0; n < e; n++)t[n] = r[n];
    }, t;
}(), Kr = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), qr = function(t) {
    function e(e, r, n) {
        var o = t.call(this, e, r) || this;
        return o.estimatedModuleSize = n, o;
    }
    return Kr(e, t), e.prototype.aboutEquals = function(t, e, r) {
        if (Math.abs(e - this.getY()) <= t && Math.abs(r - this.getX()) <= t) {
            var n = Math.abs(t - this.estimatedModuleSize);
            return n <= 1 || n <= this.estimatedModuleSize;
        }
        return !1;
    }, e.prototype.combineEstimate = function(t, r, n) {
        return new e((this.getX() + r) / 2, (this.getY() + t) / 2, (this.estimatedModuleSize + n) / 2);
    }, e;
}(At), Qr = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Jr = function() {
    function t(t, e, r, n, o, i, a) {
        this.image = t, this.startX = e, this.startY = r, this.width = n, this.height = o, this.moduleSize = i, this.resultPointCallback = a, this.possibleCenters = [], this.crossCheckStateCount = new Int32Array(3);
    }
    return t.prototype.find = function() {
        for(var t = this.startX, e = this.height, r = t + this.width, n = this.startY + e / 2, o = new Int32Array(3), i = this.image, a = 0; a < e; a++){
            var u = n + (0 == (1 & a) ? Math.floor((a + 1) / 2) : -Math.floor((a + 1) / 2));
            o[0] = 0, o[1] = 0, o[2] = 0;
            for(var s = t; s < r && !i.get(s, u);)s++;
            for(var c = 0; s < r;){
                if (i.get(s, u)) if (1 === c) o[1]++;
                else if (2 === c) {
                    var f;
                    if (this.foundPatternCross(o)) {
                        if (null !== (f = this.handlePossibleCenter(o, u, s))) return f;
                    }
                    o[0] = o[2], o[1] = 1, o[2] = 0, c = 1;
                } else o[++c]++;
                else 1 === c && c++, o[c]++;
                s++;
            }
            if (this.foundPatternCross(o)) {
                if (null !== (f = this.handlePossibleCenter(o, u, r))) return f;
            }
        }
        if (0 !== this.possibleCenters.length) return this.possibleCenters[0];
        throw new U;
    }, t.centerFromEnd = function(t, e) {
        return e - t[2] - t[1] / 2;
    }, t.prototype.foundPatternCross = function(t) {
        for(var e = this.moduleSize, r = e / 2, n = 0; n < 3; n++)if (Math.abs(e - t[n]) >= r) return !1;
        return !0;
    }, t.prototype.crossCheckVertical = function(e, r, n, o) {
        var i = this.image, a = i.getHeight(), u = this.crossCheckStateCount;
        u[0] = 0, u[1] = 0, u[2] = 0;
        for(var s = e; s >= 0 && i.get(r, s) && u[1] <= n;)u[1]++, s--;
        if (s < 0 || u[1] > n) return NaN;
        for(; s >= 0 && !i.get(r, s) && u[0] <= n;)u[0]++, s--;
        if (u[0] > n) return NaN;
        for(s = e + 1; s < a && i.get(r, s) && u[1] <= n;)u[1]++, s++;
        if (s === a || u[1] > n) return NaN;
        for(; s < a && !i.get(r, s) && u[2] <= n;)u[2]++, s++;
        if (u[2] > n) return NaN;
        var c = u[0] + u[1] + u[2];
        return 5 * Math.abs(c - o) >= 2 * o ? NaN : this.foundPatternCross(u) ? t.centerFromEnd(u, s) : NaN;
    }, t.prototype.handlePossibleCenter = function(e, r, n) {
        var o, i, a = e[0] + e[1] + e[2], u = t.centerFromEnd(e, n), s = this.crossCheckVertical(r, u, 2 * e[1], a);
        if (!isNaN(s)) {
            var c = (e[0] + e[1] + e[2]) / 3;
            try {
                for(var f = Qr(this.possibleCenters), h = f.next(); !h.done; h = f.next()){
                    var l = h.value;
                    if (l.aboutEquals(c, s, u)) return l.combineEstimate(s, u, c);
                }
            } catch (t) {
                o = {
                    error: t
                };
            } finally{
                try {
                    h && !h.done && (i = f.return) && i.call(f);
                } finally{
                    if (o) throw o.error;
                }
            }
            var d = new qr(u, s, c);
            this.possibleCenters.push(d), null !== this.resultPointCallback && void 0 !== this.resultPointCallback && this.resultPointCallback.foundPossibleResultPoint(d);
        }
        return null;
    }, t;
}(), $r = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), tn = function(t) {
    function e(e, r, n, o) {
        var i = t.call(this, e, r) || this;
        return i.estimatedModuleSize = n, i.count = o, void 0 === o && (i.count = 1), i;
    }
    return $r(e, t), e.prototype.getEstimatedModuleSize = function() {
        return this.estimatedModuleSize;
    }, e.prototype.getCount = function() {
        return this.count;
    }, e.prototype.aboutEquals = function(t, e, r) {
        if (Math.abs(e - this.getY()) <= t && Math.abs(r - this.getX()) <= t) {
            var n = Math.abs(t - this.estimatedModuleSize);
            return n <= 1 || n <= this.estimatedModuleSize;
        }
        return !1;
    }, e.prototype.combineEstimate = function(t, r, n) {
        var o = this.count + 1;
        return new e((this.count * this.getX() + r) / o, (this.count * this.getY() + t) / o, (this.count * this.estimatedModuleSize + n) / o, o);
    }, e;
}(At), en = function() {
    function t(t) {
        this.bottomLeft = t[0], this.topLeft = t[1], this.topRight = t[2];
    }
    return t.prototype.getBottomLeft = function() {
        return this.bottomLeft;
    }, t.prototype.getTopLeft = function() {
        return this.topLeft;
    }, t.prototype.getTopRight = function() {
        return this.topRight;
    }, t;
}(), rn = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, nn = function() {
    function t(t, e) {
        this.image = t, this.resultPointCallback = e, this.possibleCenters = [], this.crossCheckStateCount = new Int32Array(5), this.resultPointCallback = e;
    }
    return t.prototype.getImage = function() {
        return this.image;
    }, t.prototype.getPossibleCenters = function() {
        return this.possibleCenters;
    }, t.prototype.find = function(e) {
        var r = null != e && void 0 !== e.get(T.TRY_HARDER), n = null != e && void 0 !== e.get(T.PURE_BARCODE), o = this.image, i = o.getHeight(), a = o.getWidth(), u = Math.floor(3 * i / (4 * t.MAX_MODULES));
        (u < t.MIN_SKIP || r) && (u = t.MIN_SKIP);
        for(var s = !1, c = new Int32Array(5), f = u - 1; f < i && !s; f += u){
            c[0] = 0, c[1] = 0, c[2] = 0, c[3] = 0, c[4] = 0;
            for(var h = 0, l = 0; l < a; l++)if (o.get(l, f)) 1 == (1 & h) && h++, c[h]++;
            else if (0 == (1 & h)) if (4 === h) if (t.foundPatternCross(c)) {
                if (!0 !== this.handlePossibleCenter(c, f, l, n)) {
                    c[0] = c[2], c[1] = c[3], c[2] = c[4], c[3] = 1, c[4] = 0, h = 3;
                    continue;
                }
                if (u = 2, !0 === this.hasSkipped) s = this.haveMultiplyConfirmedCenters();
                else {
                    var d = this.findRowSkip();
                    d > c[2] && (f += d - c[2] - u, l = a - 1);
                }
                h = 0, c[0] = 0, c[1] = 0, c[2] = 0, c[3] = 0, c[4] = 0;
            } else c[0] = c[2], c[1] = c[3], c[2] = c[4], c[3] = 1, c[4] = 0, h = 3;
            else c[++h]++;
            else c[h]++;
            if (t.foundPatternCross(c)) !0 === this.handlePossibleCenter(c, f, a, n) && (u = c[0], this.hasSkipped && (s = this.haveMultiplyConfirmedCenters()));
        }
        var p = this.selectBestPatterns();
        return At.orderBestPatterns(p), new en(p);
    }, t.centerFromEnd = function(t, e) {
        return e - t[4] - t[3] - t[2] / 2;
    }, t.foundPatternCross = function(t) {
        for(var e = 0, r = 0; r < 5; r++){
            var n = t[r];
            if (0 === n) return !1;
            e += n;
        }
        if (e < 7) return !1;
        var o = e / 7, i = o / 2;
        return Math.abs(o - t[0]) < i && Math.abs(o - t[1]) < i && Math.abs(3 * o - t[2]) < 3 * i && Math.abs(o - t[3]) < i && Math.abs(o - t[4]) < i;
    }, t.prototype.getCrossCheckStateCount = function() {
        var t = this.crossCheckStateCount;
        return t[0] = 0, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, t;
    }, t.prototype.crossCheckDiagonal = function(e, r, n, o) {
        for(var i = this.getCrossCheckStateCount(), a = 0, u = this.image; e >= a && r >= a && u.get(r - a, e - a);)i[2]++, a++;
        if (e < a || r < a) return !1;
        for(; e >= a && r >= a && !u.get(r - a, e - a) && i[1] <= n;)i[1]++, a++;
        if (e < a || r < a || i[1] > n) return !1;
        for(; e >= a && r >= a && u.get(r - a, e - a) && i[0] <= n;)i[0]++, a++;
        if (i[0] > n) return !1;
        var s = u.getHeight(), c = u.getWidth();
        for(a = 1; e + a < s && r + a < c && u.get(r + a, e + a);)i[2]++, a++;
        if (e + a >= s || r + a >= c) return !1;
        for(; e + a < s && r + a < c && !u.get(r + a, e + a) && i[3] < n;)i[3]++, a++;
        if (e + a >= s || r + a >= c || i[3] >= n) return !1;
        for(; e + a < s && r + a < c && u.get(r + a, e + a) && i[4] < n;)i[4]++, a++;
        if (i[4] >= n) return !1;
        var f = i[0] + i[1] + i[2] + i[3] + i[4];
        return Math.abs(f - o) < 2 * o && t.foundPatternCross(i);
    }, t.prototype.crossCheckVertical = function(e, r, n, o) {
        for(var i = this.image, a = i.getHeight(), u = this.getCrossCheckStateCount(), s = e; s >= 0 && i.get(r, s);)u[2]++, s--;
        if (s < 0) return NaN;
        for(; s >= 0 && !i.get(r, s) && u[1] <= n;)u[1]++, s--;
        if (s < 0 || u[1] > n) return NaN;
        for(; s >= 0 && i.get(r, s) && u[0] <= n;)u[0]++, s--;
        if (u[0] > n) return NaN;
        for(s = e + 1; s < a && i.get(r, s);)u[2]++, s++;
        if (s === a) return NaN;
        for(; s < a && !i.get(r, s) && u[3] < n;)u[3]++, s++;
        if (s === a || u[3] >= n) return NaN;
        for(; s < a && i.get(r, s) && u[4] < n;)u[4]++, s++;
        if (u[4] >= n) return NaN;
        var c = u[0] + u[1] + u[2] + u[3] + u[4];
        return 5 * Math.abs(c - o) >= 2 * o ? NaN : t.foundPatternCross(u) ? t.centerFromEnd(u, s) : NaN;
    }, t.prototype.crossCheckHorizontal = function(e, r, n, o) {
        for(var i = this.image, a = i.getWidth(), u = this.getCrossCheckStateCount(), s = e; s >= 0 && i.get(s, r);)u[2]++, s--;
        if (s < 0) return NaN;
        for(; s >= 0 && !i.get(s, r) && u[1] <= n;)u[1]++, s--;
        if (s < 0 || u[1] > n) return NaN;
        for(; s >= 0 && i.get(s, r) && u[0] <= n;)u[0]++, s--;
        if (u[0] > n) return NaN;
        for(s = e + 1; s < a && i.get(s, r);)u[2]++, s++;
        if (s === a) return NaN;
        for(; s < a && !i.get(s, r) && u[3] < n;)u[3]++, s++;
        if (s === a || u[3] >= n) return NaN;
        for(; s < a && i.get(s, r) && u[4] < n;)u[4]++, s++;
        if (u[4] >= n) return NaN;
        var c = u[0] + u[1] + u[2] + u[3] + u[4];
        return 5 * Math.abs(c - o) >= o ? NaN : t.foundPatternCross(u) ? t.centerFromEnd(u, s) : NaN;
    }, t.prototype.handlePossibleCenter = function(e, r, n, o) {
        var i = e[0] + e[1] + e[2] + e[3] + e[4], a = t.centerFromEnd(e, n), u = this.crossCheckVertical(r, Math.floor(a), e[2], i);
        if (!isNaN(u) && (a = this.crossCheckHorizontal(Math.floor(a), Math.floor(u), e[2], i), !isNaN(a) && (!o || this.crossCheckDiagonal(Math.floor(u), Math.floor(a), e[2], i)))) {
            for(var s = i / 7, c = !1, f = this.possibleCenters, h = 0, l = f.length; h < l; h++){
                var d = f[h];
                if (d.aboutEquals(s, u, a)) {
                    f[h] = d.combineEstimate(u, a, s), c = !0;
                    break;
                }
            }
            if (!c) {
                var p = new tn(a, u, s);
                f.push(p), null !== this.resultPointCallback && void 0 !== this.resultPointCallback && this.resultPointCallback.foundPossibleResultPoint(p);
            }
            return !0;
        }
        return !1;
    }, t.prototype.findRowSkip = function() {
        var e, r;
        if (this.possibleCenters.length <= 1) return 0;
        var n = null;
        try {
            for(var o = rn(this.possibleCenters), i = o.next(); !i.done; i = o.next()){
                var a = i.value;
                if (a.getCount() >= t.CENTER_QUORUM) {
                    if (null != n) return this.hasSkipped = !0, Math.floor((Math.abs(n.getX() - a.getX()) - Math.abs(n.getY() - a.getY())) / 2);
                    n = a;
                }
            }
        } catch (t) {
            e = {
                error: t
            };
        } finally{
            try {
                i && !i.done && (r = o.return) && r.call(o);
            } finally{
                if (e) throw e.error;
            }
        }
        return 0;
    }, t.prototype.haveMultiplyConfirmedCenters = function() {
        var e, r, n, o, i = 0, a = 0, u = this.possibleCenters.length;
        try {
            for(var s = rn(this.possibleCenters), c = s.next(); !c.done; c = s.next()){
                (p = c.value).getCount() >= t.CENTER_QUORUM && (i++, a += p.getEstimatedModuleSize());
            }
        } catch (t) {
            e = {
                error: t
            };
        } finally{
            try {
                c && !c.done && (r = s.return) && r.call(s);
            } finally{
                if (e) throw e.error;
            }
        }
        if (i < 3) return !1;
        var f = a / u, h = 0;
        try {
            for(var l = rn(this.possibleCenters), d = l.next(); !d.done; d = l.next()){
                var p = d.value;
                h += Math.abs(p.getEstimatedModuleSize() - f);
            }
        } catch (t) {
            n = {
                error: t
            };
        } finally{
            try {
                d && !d.done && (o = l.return) && o.call(l);
            } finally{
                if (n) throw n.error;
            }
        }
        return h <= .05 * a;
    }, t.prototype.selectBestPatterns = function() {
        var t, e, r, n, o = this.possibleCenters.length;
        if (o < 3) throw new U;
        var i, a = this.possibleCenters;
        if (o > 3) {
            var u = 0, s = 0;
            try {
                for(var c = rn(this.possibleCenters), f = c.next(); !f.done; f = c.next()){
                    var h = f.value.getEstimatedModuleSize();
                    u += h, s += h * h;
                }
            } catch (e) {
                t = {
                    error: e
                };
            } finally{
                try {
                    f && !f.done && (e = c.return) && e.call(c);
                } finally{
                    if (t) throw t.error;
                }
            }
            i = u / o;
            var l = Math.sqrt(s / o - i * i);
            a.sort(function(t, e) {
                var r = Math.abs(e.getEstimatedModuleSize() - i), n = Math.abs(t.getEstimatedModuleSize() - i);
                return r < n ? -1 : r > n ? 1 : 0;
            });
            for(var d = Math.max(.2 * i, l), p = 0; p < a.length && a.length > 3; p++){
                var g = a[p];
                Math.abs(g.getEstimatedModuleSize() - i) > d && (a.splice(p, 1), p--);
            }
        }
        if (a.length > 3) {
            u = 0;
            try {
                for(var y = rn(a), w = y.next(); !w.done; w = y.next()){
                    u += w.value.getEstimatedModuleSize();
                }
            } catch (t) {
                r = {
                    error: t
                };
            } finally{
                try {
                    w && !w.done && (n = y.return) && n.call(y);
                } finally{
                    if (r) throw r.error;
                }
            }
            i = u / a.length, a.sort(function(t, e) {
                if (e.getCount() === t.getCount()) {
                    var r = Math.abs(e.getEstimatedModuleSize() - i), n = Math.abs(t.getEstimatedModuleSize() - i);
                    return r < n ? 1 : r > n ? -1 : 0;
                }
                return e.getCount() - t.getCount();
            }), a.splice(3);
        }
        return [
            a[0],
            a[1],
            a[2]
        ];
    }, t.CENTER_QUORUM = 2, t.MIN_SKIP = 3, t.MAX_MODULES = 57, t;
}(), on = function() {
    function t(t) {
        this.image = t;
    }
    return t.prototype.getImage = function() {
        return this.image;
    }, t.prototype.getResultPointCallback = function() {
        return this.resultPointCallback;
    }, t.prototype.detect = function(t) {
        this.resultPointCallback = null == t ? null : t.get(T.NEED_RESULT_POINT_CALLBACK);
        var e = new nn(this.image, this.resultPointCallback).find(t);
        return this.processFinderPatternInfo(e);
    }, t.prototype.processFinderPatternInfo = function(e) {
        var r = e.getTopLeft(), n = e.getTopRight(), o = e.getBottomLeft(), i = this.calculateModuleSize(r, n, o);
        if (i < 1) throw new U("No pattern found in proccess finder.");
        var a = t.computeDimension(r, n, o, i), u = Fr.getProvisionalVersionForDimension(a), s = u.getDimensionForVersion() - 7, c = null;
        if (u.getAlignmentPatternCenters().length > 0) for(var f = n.getX() - r.getX() + o.getX(), h = n.getY() - r.getY() + o.getY(), l = 1 - 3 / s, d = Math.floor(r.getX() + l * (f - r.getX())), p = Math.floor(r.getY() + l * (h - r.getY())), g = 4; g <= 16; g <<= 1)try {
            c = this.findAlignmentInRegion(i, d, p, g);
            break;
        } catch (t) {
            if (!(t instanceof U)) throw t;
        }
        var y = t.createTransform(r, n, o, c, a), w = t.sampleGrid(this.image, y, a);
        return new Et(w, null === c ? [
            o,
            r,
            n
        ] : [
            o,
            r,
            n,
            c
        ]);
    }, t.createTransform = function(t, e, r, n, o) {
        var i, a, u, s, c = o - 3.5;
        return null !== n ? (i = n.getX(), a = n.getY(), s = u = c - 3) : (i = e.getX() - t.getX() + r.getX(), a = e.getY() - t.getY() + r.getY(), u = c, s = c), Tt.quadrilateralToQuadrilateral(3.5, 3.5, c, 3.5, u, s, 3.5, c, t.getX(), t.getY(), e.getX(), e.getY(), i, a, r.getX(), r.getY());
    }, t.sampleGrid = function(t, e, r) {
        return Nt.getInstance().sampleGridWithTransform(t, r, r, e);
    }, t.computeDimension = function(t, e, r, n) {
        var o = vt.round(At.distance(t, e) / n), i = vt.round(At.distance(t, r) / n), a = Math.floor((o + i) / 2) + 7;
        switch(3 & a){
            case 0:
                a++;
                break;
            case 2:
                a--;
                break;
            case 3:
                throw new U("Dimensions could be not found.");
        }
        return a;
    }, t.prototype.calculateModuleSize = function(t, e, r) {
        return (this.calculateModuleSizeOneWay(t, e) + this.calculateModuleSizeOneWay(t, r)) / 2;
    }, t.prototype.calculateModuleSizeOneWay = function(t, e) {
        var r = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(t.getX()), Math.floor(t.getY()), Math.floor(e.getX()), Math.floor(e.getY())), n = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(e.getX()), Math.floor(e.getY()), Math.floor(t.getX()), Math.floor(t.getY()));
        return isNaN(r) ? n / 7 : isNaN(n) ? r / 7 : (r + n) / 14;
    }, t.prototype.sizeOfBlackWhiteBlackRunBothWays = function(t, e, r, n) {
        var o = this.sizeOfBlackWhiteBlackRun(t, e, r, n), i = 1, a = t - (r - t);
        a < 0 ? (i = t / (t - a), a = 0) : a >= this.image.getWidth() && (i = (this.image.getWidth() - 1 - t) / (a - t), a = this.image.getWidth() - 1);
        var u = Math.floor(e - (n - e) * i);
        return i = 1, u < 0 ? (i = e / (e - u), u = 0) : u >= this.image.getHeight() && (i = (this.image.getHeight() - 1 - e) / (u - e), u = this.image.getHeight() - 1), a = Math.floor(t + (a - t) * i), (o += this.sizeOfBlackWhiteBlackRun(t, e, a, u)) - 1;
    }, t.prototype.sizeOfBlackWhiteBlackRun = function(t, e, r, n) {
        var o = Math.abs(n - e) > Math.abs(r - t);
        if (o) {
            var i = t;
            t = e, e = i, i = r, r = n, n = i;
        }
        for(var a = Math.abs(r - t), u = Math.abs(n - e), s = -a / 2, c = t < r ? 1 : -1, f = e < n ? 1 : -1, h = 0, l = r + c, d = t, p = e; d !== l; d += c){
            var g = o ? p : d, y = o ? d : p;
            if (1 === h === this.image.get(g, y)) {
                if (2 === h) return vt.distance(d, p, t, e);
                h++;
            }
            if ((s += u) > 0) {
                if (p === n) break;
                p += f, s -= a;
            }
        }
        return 2 === h ? vt.distance(r + c, n, t, e) : NaN;
    }, t.prototype.findAlignmentInRegion = function(t, e, r, n) {
        var o = Math.floor(n * t), i = Math.max(0, e - o), a = Math.min(this.image.getWidth() - 1, e + o);
        if (a - i < 3 * t) throw new U("Alignment top exceeds estimated module size.");
        var u = Math.max(0, r - o), s = Math.min(this.image.getHeight() - 1, r + o);
        if (s - u < 3 * t) throw new U("Alignment bottom exceeds estimated module size.");
        return new Jr(this.image, i, u, a - i, s - u, t, this.resultPointCallback).find();
    }, t;
}(), an = function() {
    function t() {
        this.decoder = new Zr;
    }
    return t.prototype.getDecoder = function() {
        return this.decoder;
    }, t.prototype.decode = function(e, r) {
        var n, o;
        if (null != r && void 0 !== r.get(T.PURE_BARCODE)) {
            var i = t.extractPureBits(e.getBlackMatrix());
            n = this.decoder.decodeBitMatrix(i, r), o = t.NO_POINTS;
        } else {
            var a = new on(e.getBlackMatrix()).detect(r);
            n = this.decoder.decodeBitMatrix(a.getBits(), r), o = a.getPoints();
        }
        n.getOther() instanceof zr && n.getOther().applyMirroredCorrection(o);
        var u = new et(n.getText(), n.getRawBytes(), void 0, o, nt.QR_CODE, void 0), s = n.getByteSegments();
        null !== s && u.putMetadata(it.BYTE_SEGMENTS, s);
        var c = n.getECLevel();
        return null !== c && u.putMetadata(it.ERROR_CORRECTION_LEVEL, c), n.hasStructuredAppend() && (u.putMetadata(it.STRUCTURED_APPEND_SEQUENCE, n.getStructuredAppendSequenceNumber()), u.putMetadata(it.STRUCTURED_APPEND_PARITY, n.getStructuredAppendParity())), u;
    }, t.prototype.reset = function() {}, t.extractPureBits = function(t) {
        var e = t.getTopLeftOnBit(), r = t.getBottomRightOnBit();
        if (null === e || null === r) throw new U;
        var n = this.moduleSize(e, t), o = e[1], i = r[1], a = e[0], u = r[0];
        if (a >= u || o >= i) throw new U;
        if (i - o != u - a && (u = a + (i - o)) >= t.getWidth()) throw new U;
        var s = Math.round((u - a + 1) / n), c = Math.round((i - o + 1) / n);
        if (s <= 0 || c <= 0) throw new U;
        if (c !== s) throw new U;
        var f = Math.floor(n / 2);
        o += f;
        var h = (a += f) + Math.floor((s - 1) * n) - u;
        if (h > 0) {
            if (h > f) throw new U;
            a -= h;
        }
        var l = o + Math.floor((c - 1) * n) - i;
        if (l > 0) {
            if (l > f) throw new U;
            o -= l;
        }
        for(var d = new x(s, c), p = 0; p < c; p++)for(var g = o + Math.floor(p * n), y = 0; y < s; y++)t.get(a + Math.floor(y * n), g) && d.set(y, p);
        return d;
    }, t.moduleSize = function(t, e) {
        for(var r = e.getHeight(), n = e.getWidth(), o = t[0], i = t[1], a = !0, u = 0; o < n && i < r;){
            if (a !== e.get(o, i)) {
                if (5 == ++u) break;
                a = !a;
            }
            o++, i++;
        }
        if (o === n || i === r) throw new U;
        return (o - t[0]) / 7;
    }, t.NO_POINTS = new Array, t;
}(), un = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, sn = function() {
    function t() {}
    return t.prototype.PDF417Common = function() {}, t.getBitCountSum = function(t) {
        return vt.sum(t);
    }, t.toIntArray = function(e) {
        var r, n;
        if (null == e || !e.length) return t.EMPTY_INT_ARRAY;
        var o = new Int32Array(e.length), i = 0;
        try {
            for(var a = un(e), u = a.next(); !u.done; u = a.next()){
                var s = u.value;
                o[i++] = s;
            }
        } catch (t) {
            r = {
                error: t
            };
        } finally{
            try {
                u && !u.done && (n = a.return) && n.call(a);
            } finally{
                if (r) throw r.error;
            }
        }
        return o;
    }, t.getCodeword = function(e) {
        var r = C.binarySearch(t.SYMBOL_TABLE, 262143 & e);
        return r < 0 ? -1 : (t.CODEWORD_TABLE[r] - 1) % t.NUMBER_OF_CODEWORDS;
    }, t.NUMBER_OF_CODEWORDS = 929, t.MAX_CODEWORDS_IN_BARCODE = t.NUMBER_OF_CODEWORDS - 1, t.MIN_ROWS_IN_BARCODE = 3, t.MAX_ROWS_IN_BARCODE = 90, t.MODULES_IN_CODEWORD = 17, t.MODULES_IN_STOP_PATTERN = 18, t.BARS_IN_MODULE = 8, t.EMPTY_INT_ARRAY = new Int32Array([]), t.SYMBOL_TABLE = Int32Array.from([
        66142,
        66170,
        66206,
        66236,
        66290,
        66292,
        66350,
        66382,
        66396,
        66454,
        66470,
        66476,
        66594,
        66600,
        66614,
        66626,
        66628,
        66632,
        66640,
        66654,
        66662,
        66668,
        66682,
        66690,
        66718,
        66720,
        66748,
        66758,
        66776,
        66798,
        66802,
        66804,
        66820,
        66824,
        66832,
        66846,
        66848,
        66876,
        66880,
        66936,
        66950,
        66956,
        66968,
        66992,
        67006,
        67022,
        67036,
        67042,
        67044,
        67048,
        67062,
        67118,
        67150,
        67164,
        67214,
        67228,
        67256,
        67294,
        67322,
        67350,
        67366,
        67372,
        67398,
        67404,
        67416,
        67438,
        67474,
        67476,
        67490,
        67492,
        67496,
        67510,
        67618,
        67624,
        67650,
        67656,
        67664,
        67678,
        67686,
        67692,
        67706,
        67714,
        67716,
        67728,
        67742,
        67744,
        67772,
        67782,
        67788,
        67800,
        67822,
        67826,
        67828,
        67842,
        67848,
        67870,
        67872,
        67900,
        67904,
        67960,
        67974,
        67992,
        68016,
        68030,
        68046,
        68060,
        68066,
        68068,
        68072,
        68086,
        68104,
        68112,
        68126,
        68128,
        68156,
        68160,
        68216,
        68336,
        68358,
        68364,
        68376,
        68400,
        68414,
        68448,
        68476,
        68494,
        68508,
        68536,
        68546,
        68548,
        68552,
        68560,
        68574,
        68582,
        68588,
        68654,
        68686,
        68700,
        68706,
        68708,
        68712,
        68726,
        68750,
        68764,
        68792,
        68802,
        68804,
        68808,
        68816,
        68830,
        68838,
        68844,
        68858,
        68878,
        68892,
        68920,
        68976,
        68990,
        68994,
        68996,
        69e3,
        69008,
        69022,
        69024,
        69052,
        69062,
        69068,
        69080,
        69102,
        69106,
        69108,
        69142,
        69158,
        69164,
        69190,
        69208,
        69230,
        69254,
        69260,
        69272,
        69296,
        69310,
        69326,
        69340,
        69386,
        69394,
        69396,
        69410,
        69416,
        69430,
        69442,
        69444,
        69448,
        69456,
        69470,
        69478,
        69484,
        69554,
        69556,
        69666,
        69672,
        69698,
        69704,
        69712,
        69726,
        69754,
        69762,
        69764,
        69776,
        69790,
        69792,
        69820,
        69830,
        69836,
        69848,
        69870,
        69874,
        69876,
        69890,
        69918,
        69920,
        69948,
        69952,
        70008,
        70022,
        70040,
        70064,
        70078,
        70094,
        70108,
        70114,
        70116,
        70120,
        70134,
        70152,
        70174,
        70176,
        70264,
        70384,
        70412,
        70448,
        70462,
        70496,
        70524,
        70542,
        70556,
        70584,
        70594,
        70600,
        70608,
        70622,
        70630,
        70636,
        70664,
        70672,
        70686,
        70688,
        70716,
        70720,
        70776,
        70896,
        71136,
        71180,
        71192,
        71216,
        71230,
        71264,
        71292,
        71360,
        71416,
        71452,
        71480,
        71536,
        71550,
        71554,
        71556,
        71560,
        71568,
        71582,
        71584,
        71612,
        71622,
        71628,
        71640,
        71662,
        71726,
        71732,
        71758,
        71772,
        71778,
        71780,
        71784,
        71798,
        71822,
        71836,
        71864,
        71874,
        71880,
        71888,
        71902,
        71910,
        71916,
        71930,
        71950,
        71964,
        71992,
        72048,
        72062,
        72066,
        72068,
        72080,
        72094,
        72096,
        72124,
        72134,
        72140,
        72152,
        72174,
        72178,
        72180,
        72206,
        72220,
        72248,
        72304,
        72318,
        72416,
        72444,
        72456,
        72464,
        72478,
        72480,
        72508,
        72512,
        72568,
        72588,
        72600,
        72624,
        72638,
        72654,
        72668,
        72674,
        72676,
        72680,
        72694,
        72726,
        72742,
        72748,
        72774,
        72780,
        72792,
        72814,
        72838,
        72856,
        72880,
        72894,
        72910,
        72924,
        72930,
        72932,
        72936,
        72950,
        72966,
        72972,
        72984,
        73008,
        73022,
        73056,
        73084,
        73102,
        73116,
        73144,
        73156,
        73160,
        73168,
        73182,
        73190,
        73196,
        73210,
        73226,
        73234,
        73236,
        73250,
        73252,
        73256,
        73270,
        73282,
        73284,
        73296,
        73310,
        73318,
        73324,
        73346,
        73348,
        73352,
        73360,
        73374,
        73376,
        73404,
        73414,
        73420,
        73432,
        73454,
        73498,
        73518,
        73522,
        73524,
        73550,
        73564,
        73570,
        73572,
        73576,
        73590,
        73800,
        73822,
        73858,
        73860,
        73872,
        73886,
        73888,
        73916,
        73944,
        73970,
        73972,
        73992,
        74014,
        74016,
        74044,
        74048,
        74104,
        74118,
        74136,
        74160,
        74174,
        74210,
        74212,
        74216,
        74230,
        74244,
        74256,
        74270,
        74272,
        74360,
        74480,
        74502,
        74508,
        74544,
        74558,
        74592,
        74620,
        74638,
        74652,
        74680,
        74690,
        74696,
        74704,
        74726,
        74732,
        74782,
        74784,
        74812,
        74992,
        75232,
        75288,
        75326,
        75360,
        75388,
        75456,
        75512,
        75576,
        75632,
        75646,
        75650,
        75652,
        75664,
        75678,
        75680,
        75708,
        75718,
        75724,
        75736,
        75758,
        75808,
        75836,
        75840,
        75896,
        76016,
        76256,
        76736,
        76824,
        76848,
        76862,
        76896,
        76924,
        76992,
        77048,
        77296,
        77340,
        77368,
        77424,
        77438,
        77536,
        77564,
        77572,
        77576,
        77584,
        77600,
        77628,
        77632,
        77688,
        77702,
        77708,
        77720,
        77744,
        77758,
        77774,
        77788,
        77870,
        77902,
        77916,
        77922,
        77928,
        77966,
        77980,
        78008,
        78018,
        78024,
        78032,
        78046,
        78060,
        78074,
        78094,
        78136,
        78192,
        78206,
        78210,
        78212,
        78224,
        78238,
        78240,
        78268,
        78278,
        78284,
        78296,
        78322,
        78324,
        78350,
        78364,
        78448,
        78462,
        78560,
        78588,
        78600,
        78622,
        78624,
        78652,
        78656,
        78712,
        78726,
        78744,
        78768,
        78782,
        78798,
        78812,
        78818,
        78820,
        78824,
        78838,
        78862,
        78876,
        78904,
        78960,
        78974,
        79072,
        79100,
        79296,
        79352,
        79368,
        79376,
        79390,
        79392,
        79420,
        79424,
        79480,
        79600,
        79628,
        79640,
        79664,
        79678,
        79712,
        79740,
        79772,
        79800,
        79810,
        79812,
        79816,
        79824,
        79838,
        79846,
        79852,
        79894,
        79910,
        79916,
        79942,
        79948,
        79960,
        79982,
        79988,
        80006,
        80024,
        80048,
        80062,
        80078,
        80092,
        80098,
        80100,
        80104,
        80134,
        80140,
        80176,
        80190,
        80224,
        80252,
        80270,
        80284,
        80312,
        80328,
        80336,
        80350,
        80358,
        80364,
        80378,
        80390,
        80396,
        80408,
        80432,
        80446,
        80480,
        80508,
        80576,
        80632,
        80654,
        80668,
        80696,
        80752,
        80766,
        80776,
        80784,
        80798,
        80800,
        80828,
        80844,
        80856,
        80878,
        80882,
        80884,
        80914,
        80916,
        80930,
        80932,
        80936,
        80950,
        80962,
        80968,
        80976,
        80990,
        80998,
        81004,
        81026,
        81028,
        81040,
        81054,
        81056,
        81084,
        81094,
        81100,
        81112,
        81134,
        81154,
        81156,
        81160,
        81168,
        81182,
        81184,
        81212,
        81216,
        81272,
        81286,
        81292,
        81304,
        81328,
        81342,
        81358,
        81372,
        81380,
        81384,
        81398,
        81434,
        81454,
        81458,
        81460,
        81486,
        81500,
        81506,
        81508,
        81512,
        81526,
        81550,
        81564,
        81592,
        81602,
        81604,
        81608,
        81616,
        81630,
        81638,
        81644,
        81702,
        81708,
        81722,
        81734,
        81740,
        81752,
        81774,
        81778,
        81780,
        82050,
        82078,
        82080,
        82108,
        82180,
        82184,
        82192,
        82206,
        82208,
        82236,
        82240,
        82296,
        82316,
        82328,
        82352,
        82366,
        82402,
        82404,
        82408,
        82440,
        82448,
        82462,
        82464,
        82492,
        82496,
        82552,
        82672,
        82694,
        82700,
        82712,
        82736,
        82750,
        82784,
        82812,
        82830,
        82882,
        82884,
        82888,
        82896,
        82918,
        82924,
        82952,
        82960,
        82974,
        82976,
        83004,
        83008,
        83064,
        83184,
        83424,
        83468,
        83480,
        83504,
        83518,
        83552,
        83580,
        83648,
        83704,
        83740,
        83768,
        83824,
        83838,
        83842,
        83844,
        83848,
        83856,
        83872,
        83900,
        83910,
        83916,
        83928,
        83950,
        83984,
        84e3,
        84028,
        84032,
        84088,
        84208,
        84448,
        84928,
        85040,
        85054,
        85088,
        85116,
        85184,
        85240,
        85488,
        85560,
        85616,
        85630,
        85728,
        85756,
        85764,
        85768,
        85776,
        85790,
        85792,
        85820,
        85824,
        85880,
        85894,
        85900,
        85912,
        85936,
        85966,
        85980,
        86048,
        86080,
        86136,
        86256,
        86496,
        86976,
        88160,
        88188,
        88256,
        88312,
        88560,
        89056,
        89200,
        89214,
        89312,
        89340,
        89536,
        89592,
        89608,
        89616,
        89632,
        89664,
        89720,
        89840,
        89868,
        89880,
        89904,
        89952,
        89980,
        89998,
        90012,
        90040,
        90190,
        90204,
        90254,
        90268,
        90296,
        90306,
        90308,
        90312,
        90334,
        90382,
        90396,
        90424,
        90480,
        90494,
        90500,
        90504,
        90512,
        90526,
        90528,
        90556,
        90566,
        90572,
        90584,
        90610,
        90612,
        90638,
        90652,
        90680,
        90736,
        90750,
        90848,
        90876,
        90884,
        90888,
        90896,
        90910,
        90912,
        90940,
        90944,
        91e3,
        91014,
        91020,
        91032,
        91056,
        91070,
        91086,
        91100,
        91106,
        91108,
        91112,
        91126,
        91150,
        91164,
        91192,
        91248,
        91262,
        91360,
        91388,
        91584,
        91640,
        91664,
        91678,
        91680,
        91708,
        91712,
        91768,
        91888,
        91928,
        91952,
        91966,
        92e3,
        92028,
        92046,
        92060,
        92088,
        92098,
        92100,
        92104,
        92112,
        92126,
        92134,
        92140,
        92188,
        92216,
        92272,
        92384,
        92412,
        92608,
        92664,
        93168,
        93200,
        93214,
        93216,
        93244,
        93248,
        93304,
        93424,
        93664,
        93720,
        93744,
        93758,
        93792,
        93820,
        93888,
        93944,
        93980,
        94008,
        94064,
        94078,
        94084,
        94088,
        94096,
        94110,
        94112,
        94140,
        94150,
        94156,
        94168,
        94246,
        94252,
        94278,
        94284,
        94296,
        94318,
        94342,
        94348,
        94360,
        94384,
        94398,
        94414,
        94428,
        94440,
        94470,
        94476,
        94488,
        94512,
        94526,
        94560,
        94588,
        94606,
        94620,
        94648,
        94658,
        94660,
        94664,
        94672,
        94686,
        94694,
        94700,
        94714,
        94726,
        94732,
        94744,
        94768,
        94782,
        94816,
        94844,
        94912,
        94968,
        94990,
        95004,
        95032,
        95088,
        95102,
        95112,
        95120,
        95134,
        95136,
        95164,
        95180,
        95192,
        95214,
        95218,
        95220,
        95244,
        95256,
        95280,
        95294,
        95328,
        95356,
        95424,
        95480,
        95728,
        95758,
        95772,
        95800,
        95856,
        95870,
        95968,
        95996,
        96008,
        96016,
        96030,
        96032,
        96060,
        96064,
        96120,
        96152,
        96176,
        96190,
        96220,
        96226,
        96228,
        96232,
        96290,
        96292,
        96296,
        96310,
        96322,
        96324,
        96328,
        96336,
        96350,
        96358,
        96364,
        96386,
        96388,
        96392,
        96400,
        96414,
        96416,
        96444,
        96454,
        96460,
        96472,
        96494,
        96498,
        96500,
        96514,
        96516,
        96520,
        96528,
        96542,
        96544,
        96572,
        96576,
        96632,
        96646,
        96652,
        96664,
        96688,
        96702,
        96718,
        96732,
        96738,
        96740,
        96744,
        96758,
        96772,
        96776,
        96784,
        96798,
        96800,
        96828,
        96832,
        96888,
        97008,
        97030,
        97036,
        97048,
        97072,
        97086,
        97120,
        97148,
        97166,
        97180,
        97208,
        97220,
        97224,
        97232,
        97246,
        97254,
        97260,
        97326,
        97330,
        97332,
        97358,
        97372,
        97378,
        97380,
        97384,
        97398,
        97422,
        97436,
        97464,
        97474,
        97476,
        97480,
        97488,
        97502,
        97510,
        97516,
        97550,
        97564,
        97592,
        97648,
        97666,
        97668,
        97672,
        97680,
        97694,
        97696,
        97724,
        97734,
        97740,
        97752,
        97774,
        97830,
        97836,
        97850,
        97862,
        97868,
        97880,
        97902,
        97906,
        97908,
        97926,
        97932,
        97944,
        97968,
        97998,
        98012,
        98018,
        98020,
        98024,
        98038,
        98618,
        98674,
        98676,
        98838,
        98854,
        98874,
        98892,
        98904,
        98926,
        98930,
        98932,
        98968,
        99006,
        99042,
        99044,
        99048,
        99062,
        99166,
        99194,
        99246,
        99286,
        99350,
        99366,
        99372,
        99386,
        99398,
        99416,
        99438,
        99442,
        99444,
        99462,
        99504,
        99518,
        99534,
        99548,
        99554,
        99556,
        99560,
        99574,
        99590,
        99596,
        99608,
        99632,
        99646,
        99680,
        99708,
        99726,
        99740,
        99768,
        99778,
        99780,
        99784,
        99792,
        99806,
        99814,
        99820,
        99834,
        99858,
        99860,
        99874,
        99880,
        99894,
        99906,
        99920,
        99934,
        99962,
        99970,
        99972,
        99976,
        99984,
        99998,
        1e5,
        100028,
        100038,
        100044,
        100056,
        100078,
        100082,
        100084,
        100142,
        100174,
        100188,
        100246,
        100262,
        100268,
        100306,
        100308,
        100390,
        100396,
        100410,
        100422,
        100428,
        100440,
        100462,
        100466,
        100468,
        100486,
        100504,
        100528,
        100542,
        100558,
        100572,
        100578,
        100580,
        100584,
        100598,
        100620,
        100656,
        100670,
        100704,
        100732,
        100750,
        100792,
        100802,
        100808,
        100816,
        100830,
        100838,
        100844,
        100858,
        100888,
        100912,
        100926,
        100960,
        100988,
        101056,
        101112,
        101148,
        101176,
        101232,
        101246,
        101250,
        101252,
        101256,
        101264,
        101278,
        101280,
        101308,
        101318,
        101324,
        101336,
        101358,
        101362,
        101364,
        101410,
        101412,
        101416,
        101430,
        101442,
        101448,
        101456,
        101470,
        101478,
        101498,
        101506,
        101508,
        101520,
        101534,
        101536,
        101564,
        101580,
        101618,
        101620,
        101636,
        101640,
        101648,
        101662,
        101664,
        101692,
        101696,
        101752,
        101766,
        101784,
        101838,
        101858,
        101860,
        101864,
        101934,
        101938,
        101940,
        101966,
        101980,
        101986,
        101988,
        101992,
        102030,
        102044,
        102072,
        102082,
        102084,
        102088,
        102096,
        102138,
        102166,
        102182,
        102188,
        102214,
        102220,
        102232,
        102254,
        102282,
        102290,
        102292,
        102306,
        102308,
        102312,
        102326,
        102444,
        102458,
        102470,
        102476,
        102488,
        102514,
        102516,
        102534,
        102552,
        102576,
        102590,
        102606,
        102620,
        102626,
        102632,
        102646,
        102662,
        102668,
        102704,
        102718,
        102752,
        102780,
        102798,
        102812,
        102840,
        102850,
        102856,
        102864,
        102878,
        102886,
        102892,
        102906,
        102936,
        102974,
        103008,
        103036,
        103104,
        103160,
        103224,
        103280,
        103294,
        103298,
        103300,
        103312,
        103326,
        103328,
        103356,
        103366,
        103372,
        103384,
        103406,
        103410,
        103412,
        103472,
        103486,
        103520,
        103548,
        103616,
        103672,
        103920,
        103992,
        104048,
        104062,
        104160,
        104188,
        104194,
        104196,
        104200,
        104208,
        104224,
        104252,
        104256,
        104312,
        104326,
        104332,
        104344,
        104368,
        104382,
        104398,
        104412,
        104418,
        104420,
        104424,
        104482,
        104484,
        104514,
        104520,
        104528,
        104542,
        104550,
        104570,
        104578,
        104580,
        104592,
        104606,
        104608,
        104636,
        104652,
        104690,
        104692,
        104706,
        104712,
        104734,
        104736,
        104764,
        104768,
        104824,
        104838,
        104856,
        104910,
        104930,
        104932,
        104936,
        104968,
        104976,
        104990,
        104992,
        105020,
        105024,
        105080,
        105200,
        105240,
        105278,
        105312,
        105372,
        105410,
        105412,
        105416,
        105424,
        105446,
        105518,
        105524,
        105550,
        105564,
        105570,
        105572,
        105576,
        105614,
        105628,
        105656,
        105666,
        105672,
        105680,
        105702,
        105722,
        105742,
        105756,
        105784,
        105840,
        105854,
        105858,
        105860,
        105864,
        105872,
        105888,
        105932,
        105970,
        105972,
        106006,
        106022,
        106028,
        106054,
        106060,
        106072,
        106100,
        106118,
        106124,
        106136,
        106160,
        106174,
        106190,
        106210,
        106212,
        106216,
        106250,
        106258,
        106260,
        106274,
        106276,
        106280,
        106306,
        106308,
        106312,
        106320,
        106334,
        106348,
        106394,
        106414,
        106418,
        106420,
        106566,
        106572,
        106610,
        106612,
        106630,
        106636,
        106648,
        106672,
        106686,
        106722,
        106724,
        106728,
        106742,
        106758,
        106764,
        106776,
        106800,
        106814,
        106848,
        106876,
        106894,
        106908,
        106936,
        106946,
        106948,
        106952,
        106960,
        106974,
        106982,
        106988,
        107032,
        107056,
        107070,
        107104,
        107132,
        107200,
        107256,
        107292,
        107320,
        107376,
        107390,
        107394,
        107396,
        107400,
        107408,
        107422,
        107424,
        107452,
        107462,
        107468,
        107480,
        107502,
        107506,
        107508,
        107544,
        107568,
        107582,
        107616,
        107644,
        107712,
        107768,
        108016,
        108060,
        108088,
        108144,
        108158,
        108256,
        108284,
        108290,
        108292,
        108296,
        108304,
        108318,
        108320,
        108348,
        108352,
        108408,
        108422,
        108428,
        108440,
        108464,
        108478,
        108494,
        108508,
        108514,
        108516,
        108520,
        108592,
        108640,
        108668,
        108736,
        108792,
        109040,
        109536,
        109680,
        109694,
        109792,
        109820,
        110016,
        110072,
        110084,
        110088,
        110096,
        110112,
        110140,
        110144,
        110200,
        110320,
        110342,
        110348,
        110360,
        110384,
        110398,
        110432,
        110460,
        110478,
        110492,
        110520,
        110532,
        110536,
        110544,
        110558,
        110658,
        110686,
        110714,
        110722,
        110724,
        110728,
        110736,
        110750,
        110752,
        110780,
        110796,
        110834,
        110836,
        110850,
        110852,
        110856,
        110864,
        110878,
        110880,
        110908,
        110912,
        110968,
        110982,
        111e3,
        111054,
        111074,
        111076,
        111080,
        111108,
        111112,
        111120,
        111134,
        111136,
        111164,
        111168,
        111224,
        111344,
        111372,
        111422,
        111456,
        111516,
        111554,
        111556,
        111560,
        111568,
        111590,
        111632,
        111646,
        111648,
        111676,
        111680,
        111736,
        111856,
        112096,
        112152,
        112224,
        112252,
        112320,
        112440,
        112514,
        112516,
        112520,
        112528,
        112542,
        112544,
        112588,
        112686,
        112718,
        112732,
        112782,
        112796,
        112824,
        112834,
        112836,
        112840,
        112848,
        112870,
        112890,
        112910,
        112924,
        112952,
        113008,
        113022,
        113026,
        113028,
        113032,
        113040,
        113054,
        113056,
        113100,
        113138,
        113140,
        113166,
        113180,
        113208,
        113264,
        113278,
        113376,
        113404,
        113416,
        113424,
        113440,
        113468,
        113472,
        113560,
        113614,
        113634,
        113636,
        113640,
        113686,
        113702,
        113708,
        113734,
        113740,
        113752,
        113778,
        113780,
        113798,
        113804,
        113816,
        113840,
        113854,
        113870,
        113890,
        113892,
        113896,
        113926,
        113932,
        113944,
        113968,
        113982,
        114016,
        114044,
        114076,
        114114,
        114116,
        114120,
        114128,
        114150,
        114170,
        114194,
        114196,
        114210,
        114212,
        114216,
        114242,
        114244,
        114248,
        114256,
        114270,
        114278,
        114306,
        114308,
        114312,
        114320,
        114334,
        114336,
        114364,
        114380,
        114420,
        114458,
        114478,
        114482,
        114484,
        114510,
        114524,
        114530,
        114532,
        114536,
        114842,
        114866,
        114868,
        114970,
        114994,
        114996,
        115042,
        115044,
        115048,
        115062,
        115130,
        115226,
        115250,
        115252,
        115278,
        115292,
        115298,
        115300,
        115304,
        115318,
        115342,
        115394,
        115396,
        115400,
        115408,
        115422,
        115430,
        115436,
        115450,
        115478,
        115494,
        115514,
        115526,
        115532,
        115570,
        115572,
        115738,
        115758,
        115762,
        115764,
        115790,
        115804,
        115810,
        115812,
        115816,
        115830,
        115854,
        115868,
        115896,
        115906,
        115912,
        115920,
        115934,
        115942,
        115948,
        115962,
        115996,
        116024,
        116080,
        116094,
        116098,
        116100,
        116104,
        116112,
        116126,
        116128,
        116156,
        116166,
        116172,
        116184,
        116206,
        116210,
        116212,
        116246,
        116262,
        116268,
        116282,
        116294,
        116300,
        116312,
        116334,
        116338,
        116340,
        116358,
        116364,
        116376,
        116400,
        116414,
        116430,
        116444,
        116450,
        116452,
        116456,
        116498,
        116500,
        116514,
        116520,
        116534,
        116546,
        116548,
        116552,
        116560,
        116574,
        116582,
        116588,
        116602,
        116654,
        116694,
        116714,
        116762,
        116782,
        116786,
        116788,
        116814,
        116828,
        116834,
        116836,
        116840,
        116854,
        116878,
        116892,
        116920,
        116930,
        116936,
        116944,
        116958,
        116966,
        116972,
        116986,
        117006,
        117048,
        117104,
        117118,
        117122,
        117124,
        117136,
        117150,
        117152,
        117180,
        117190,
        117196,
        117208,
        117230,
        117234,
        117236,
        117304,
        117360,
        117374,
        117472,
        117500,
        117506,
        117508,
        117512,
        117520,
        117536,
        117564,
        117568,
        117624,
        117638,
        117644,
        117656,
        117680,
        117694,
        117710,
        117724,
        117730,
        117732,
        117736,
        117750,
        117782,
        117798,
        117804,
        117818,
        117830,
        117848,
        117874,
        117876,
        117894,
        117936,
        117950,
        117966,
        117986,
        117988,
        117992,
        118022,
        118028,
        118040,
        118064,
        118078,
        118112,
        118140,
        118172,
        118210,
        118212,
        118216,
        118224,
        118238,
        118246,
        118266,
        118306,
        118312,
        118338,
        118352,
        118366,
        118374,
        118394,
        118402,
        118404,
        118408,
        118416,
        118430,
        118432,
        118460,
        118476,
        118514,
        118516,
        118574,
        118578,
        118580,
        118606,
        118620,
        118626,
        118628,
        118632,
        118678,
        118694,
        118700,
        118730,
        118738,
        118740,
        118830,
        118834,
        118836,
        118862,
        118876,
        118882,
        118884,
        118888,
        118902,
        118926,
        118940,
        118968,
        118978,
        118980,
        118984,
        118992,
        119006,
        119014,
        119020,
        119034,
        119068,
        119096,
        119152,
        119166,
        119170,
        119172,
        119176,
        119184,
        119198,
        119200,
        119228,
        119238,
        119244,
        119256,
        119278,
        119282,
        119284,
        119324,
        119352,
        119408,
        119422,
        119520,
        119548,
        119554,
        119556,
        119560,
        119568,
        119582,
        119584,
        119612,
        119616,
        119672,
        119686,
        119692,
        119704,
        119728,
        119742,
        119758,
        119772,
        119778,
        119780,
        119784,
        119798,
        119920,
        119934,
        120032,
        120060,
        120256,
        120312,
        120324,
        120328,
        120336,
        120352,
        120384,
        120440,
        120560,
        120582,
        120588,
        120600,
        120624,
        120638,
        120672,
        120700,
        120718,
        120732,
        120760,
        120770,
        120772,
        120776,
        120784,
        120798,
        120806,
        120812,
        120870,
        120876,
        120890,
        120902,
        120908,
        120920,
        120946,
        120948,
        120966,
        120972,
        120984,
        121008,
        121022,
        121038,
        121058,
        121060,
        121064,
        121078,
        121100,
        121112,
        121136,
        121150,
        121184,
        121212,
        121244,
        121282,
        121284,
        121288,
        121296,
        121318,
        121338,
        121356,
        121368,
        121392,
        121406,
        121440,
        121468,
        121536,
        121592,
        121656,
        121730,
        121732,
        121736,
        121744,
        121758,
        121760,
        121804,
        121842,
        121844,
        121890,
        121922,
        121924,
        121928,
        121936,
        121950,
        121958,
        121978,
        121986,
        121988,
        121992,
        122e3,
        122014,
        122016,
        122044,
        122060,
        122098,
        122100,
        122116,
        122120,
        122128,
        122142,
        122144,
        122172,
        122176,
        122232,
        122246,
        122264,
        122318,
        122338,
        122340,
        122344,
        122414,
        122418,
        122420,
        122446,
        122460,
        122466,
        122468,
        122472,
        122510,
        122524,
        122552,
        122562,
        122564,
        122568,
        122576,
        122598,
        122618,
        122646,
        122662,
        122668,
        122694,
        122700,
        122712,
        122738,
        122740,
        122762,
        122770,
        122772,
        122786,
        122788,
        122792,
        123018,
        123026,
        123028,
        123042,
        123044,
        123048,
        123062,
        123098,
        123146,
        123154,
        123156,
        123170,
        123172,
        123176,
        123190,
        123202,
        123204,
        123208,
        123216,
        123238,
        123244,
        123258,
        123290,
        123314,
        123316,
        123402,
        123410,
        123412,
        123426,
        123428,
        123432,
        123446,
        123458,
        123464,
        123472,
        123486,
        123494,
        123500,
        123514,
        123522,
        123524,
        123528,
        123536,
        123552,
        123580,
        123590,
        123596,
        123608,
        123630,
        123634,
        123636,
        123674,
        123698,
        123700,
        123740,
        123746,
        123748,
        123752,
        123834,
        123914,
        123922,
        123924,
        123938,
        123944,
        123958,
        123970,
        123976,
        123984,
        123998,
        124006,
        124012,
        124026,
        124034,
        124036,
        124048,
        124062,
        124064,
        124092,
        124102,
        124108,
        124120,
        124142,
        124146,
        124148,
        124162,
        124164,
        124168,
        124176,
        124190,
        124192,
        124220,
        124224,
        124280,
        124294,
        124300,
        124312,
        124336,
        124350,
        124366,
        124380,
        124386,
        124388,
        124392,
        124406,
        124442,
        124462,
        124466,
        124468,
        124494,
        124508,
        124514,
        124520,
        124558,
        124572,
        124600,
        124610,
        124612,
        124616,
        124624,
        124646,
        124666,
        124694,
        124710,
        124716,
        124730,
        124742,
        124748,
        124760,
        124786,
        124788,
        124818,
        124820,
        124834,
        124836,
        124840,
        124854,
        124946,
        124948,
        124962,
        124964,
        124968,
        124982,
        124994,
        124996,
        125e3,
        125008,
        125022,
        125030,
        125036,
        125050,
        125058,
        125060,
        125064,
        125072,
        125086,
        125088,
        125116,
        125126,
        125132,
        125144,
        125166,
        125170,
        125172,
        125186,
        125188,
        125192,
        125200,
        125216,
        125244,
        125248,
        125304,
        125318,
        125324,
        125336,
        125360,
        125374,
        125390,
        125404,
        125410,
        125412,
        125416,
        125430,
        125444,
        125448,
        125456,
        125472,
        125504,
        125560,
        125680,
        125702,
        125708,
        125720,
        125744,
        125758,
        125792,
        125820,
        125838,
        125852,
        125880,
        125890,
        125892,
        125896,
        125904,
        125918,
        125926,
        125932,
        125978,
        125998,
        126002,
        126004,
        126030,
        126044,
        126050,
        126052,
        126056,
        126094,
        126108,
        126136,
        126146,
        126148,
        126152,
        126160,
        126182,
        126202,
        126222,
        126236,
        126264,
        126320,
        126334,
        126338,
        126340,
        126344,
        126352,
        126366,
        126368,
        126412,
        126450,
        126452,
        126486,
        126502,
        126508,
        126522,
        126534,
        126540,
        126552,
        126574,
        126578,
        126580,
        126598,
        126604,
        126616,
        126640,
        126654,
        126670,
        126684,
        126690,
        126692,
        126696,
        126738,
        126754,
        126756,
        126760,
        126774,
        126786,
        126788,
        126792,
        126800,
        126814,
        126822,
        126828,
        126842,
        126894,
        126898,
        126900,
        126934,
        127126,
        127142,
        127148,
        127162,
        127178,
        127186,
        127188,
        127254,
        127270,
        127276,
        127290,
        127302,
        127308,
        127320,
        127342,
        127346,
        127348,
        127370,
        127378,
        127380,
        127394,
        127396,
        127400,
        127450,
        127510,
        127526,
        127532,
        127546,
        127558,
        127576,
        127598,
        127602,
        127604,
        127622,
        127628,
        127640,
        127664,
        127678,
        127694,
        127708,
        127714,
        127716,
        127720,
        127734,
        127754,
        127762,
        127764,
        127778,
        127784,
        127810,
        127812,
        127816,
        127824,
        127838,
        127846,
        127866,
        127898,
        127918,
        127922,
        127924,
        128022,
        128038,
        128044,
        128058,
        128070,
        128076,
        128088,
        128110,
        128114,
        128116,
        128134,
        128140,
        128152,
        128176,
        128190,
        128206,
        128220,
        128226,
        128228,
        128232,
        128246,
        128262,
        128268,
        128280,
        128304,
        128318,
        128352,
        128380,
        128398,
        128412,
        128440,
        128450,
        128452,
        128456,
        128464,
        128478,
        128486,
        128492,
        128506,
        128522,
        128530,
        128532,
        128546,
        128548,
        128552,
        128566,
        128578,
        128580,
        128584,
        128592,
        128606,
        128614,
        128634,
        128642,
        128644,
        128648,
        128656,
        128670,
        128672,
        128700,
        128716,
        128754,
        128756,
        128794,
        128814,
        128818,
        128820,
        128846,
        128860,
        128866,
        128868,
        128872,
        128886,
        128918,
        128934,
        128940,
        128954,
        128978,
        128980,
        129178,
        129198,
        129202,
        129204,
        129238,
        129258,
        129306,
        129326,
        129330,
        129332,
        129358,
        129372,
        129378,
        129380,
        129384,
        129398,
        129430,
        129446,
        129452,
        129466,
        129482,
        129490,
        129492,
        129562,
        129582,
        129586,
        129588,
        129614,
        129628,
        129634,
        129636,
        129640,
        129654,
        129678,
        129692,
        129720,
        129730,
        129732,
        129736,
        129744,
        129758,
        129766,
        129772,
        129814,
        129830,
        129836,
        129850,
        129862,
        129868,
        129880,
        129902,
        129906,
        129908,
        129930,
        129938,
        129940,
        129954,
        129956,
        129960,
        129974,
        130010
    ]), t.CODEWORD_TABLE = Int32Array.from([
        2627,
        1819,
        2622,
        2621,
        1813,
        1812,
        2729,
        2724,
        2723,
        2779,
        2774,
        2773,
        902,
        896,
        908,
        868,
        865,
        861,
        859,
        2511,
        873,
        871,
        1780,
        835,
        2493,
        825,
        2491,
        842,
        837,
        844,
        1764,
        1762,
        811,
        810,
        809,
        2483,
        807,
        2482,
        806,
        2480,
        815,
        814,
        813,
        812,
        2484,
        817,
        816,
        1745,
        1744,
        1742,
        1746,
        2655,
        2637,
        2635,
        2626,
        2625,
        2623,
        2628,
        1820,
        2752,
        2739,
        2737,
        2728,
        2727,
        2725,
        2730,
        2785,
        2783,
        2778,
        2777,
        2775,
        2780,
        787,
        781,
        747,
        739,
        736,
        2413,
        754,
        752,
        1719,
        692,
        689,
        681,
        2371,
        678,
        2369,
        700,
        697,
        694,
        703,
        1688,
        1686,
        642,
        638,
        2343,
        631,
        2341,
        627,
        2338,
        651,
        646,
        643,
        2345,
        654,
        652,
        1652,
        1650,
        1647,
        1654,
        601,
        599,
        2322,
        596,
        2321,
        594,
        2319,
        2317,
        611,
        610,
        608,
        606,
        2324,
        603,
        2323,
        615,
        614,
        612,
        1617,
        1616,
        1614,
        1612,
        616,
        1619,
        1618,
        2575,
        2538,
        2536,
        905,
        901,
        898,
        909,
        2509,
        2507,
        2504,
        870,
        867,
        864,
        860,
        2512,
        875,
        872,
        1781,
        2490,
        2489,
        2487,
        2485,
        1748,
        836,
        834,
        832,
        830,
        2494,
        827,
        2492,
        843,
        841,
        839,
        845,
        1765,
        1763,
        2701,
        2676,
        2674,
        2653,
        2648,
        2656,
        2634,
        2633,
        2631,
        2629,
        1821,
        2638,
        2636,
        2770,
        2763,
        2761,
        2750,
        2745,
        2753,
        2736,
        2735,
        2733,
        2731,
        1848,
        2740,
        2738,
        2786,
        2784,
        591,
        588,
        576,
        569,
        566,
        2296,
        1590,
        537,
        534,
        526,
        2276,
        522,
        2274,
        545,
        542,
        539,
        548,
        1572,
        1570,
        481,
        2245,
        466,
        2242,
        462,
        2239,
        492,
        485,
        482,
        2249,
        496,
        494,
        1534,
        1531,
        1528,
        1538,
        413,
        2196,
        406,
        2191,
        2188,
        425,
        419,
        2202,
        415,
        2199,
        432,
        430,
        427,
        1472,
        1467,
        1464,
        433,
        1476,
        1474,
        368,
        367,
        2160,
        365,
        2159,
        362,
        2157,
        2155,
        2152,
        378,
        377,
        375,
        2166,
        372,
        2165,
        369,
        2162,
        383,
        381,
        379,
        2168,
        1419,
        1418,
        1416,
        1414,
        385,
        1411,
        384,
        1423,
        1422,
        1420,
        1424,
        2461,
        802,
        2441,
        2439,
        790,
        786,
        783,
        794,
        2409,
        2406,
        2403,
        750,
        742,
        738,
        2414,
        756,
        753,
        1720,
        2367,
        2365,
        2362,
        2359,
        1663,
        693,
        691,
        684,
        2373,
        680,
        2370,
        702,
        699,
        696,
        704,
        1690,
        1687,
        2337,
        2336,
        2334,
        2332,
        1624,
        2329,
        1622,
        640,
        637,
        2344,
        634,
        2342,
        630,
        2340,
        650,
        648,
        645,
        2346,
        655,
        653,
        1653,
        1651,
        1649,
        1655,
        2612,
        2597,
        2595,
        2571,
        2568,
        2565,
        2576,
        2534,
        2529,
        2526,
        1787,
        2540,
        2537,
        907,
        904,
        900,
        910,
        2503,
        2502,
        2500,
        2498,
        1768,
        2495,
        1767,
        2510,
        2508,
        2506,
        869,
        866,
        863,
        2513,
        876,
        874,
        1782,
        2720,
        2713,
        2711,
        2697,
        2694,
        2691,
        2702,
        2672,
        2670,
        2664,
        1828,
        2678,
        2675,
        2647,
        2646,
        2644,
        2642,
        1823,
        2639,
        1822,
        2654,
        2652,
        2650,
        2657,
        2771,
        1855,
        2765,
        2762,
        1850,
        1849,
        2751,
        2749,
        2747,
        2754,
        353,
        2148,
        344,
        342,
        336,
        2142,
        332,
        2140,
        345,
        1375,
        1373,
        306,
        2130,
        299,
        2128,
        295,
        2125,
        319,
        314,
        311,
        2132,
        1354,
        1352,
        1349,
        1356,
        262,
        257,
        2101,
        253,
        2096,
        2093,
        274,
        273,
        267,
        2107,
        263,
        2104,
        280,
        278,
        275,
        1316,
        1311,
        1308,
        1320,
        1318,
        2052,
        202,
        2050,
        2044,
        2040,
        219,
        2063,
        212,
        2060,
        208,
        2055,
        224,
        221,
        2066,
        1260,
        1258,
        1252,
        231,
        1248,
        229,
        1266,
        1264,
        1261,
        1268,
        155,
        1998,
        153,
        1996,
        1994,
        1991,
        1988,
        165,
        164,
        2007,
        162,
        2006,
        159,
        2003,
        2e3,
        172,
        171,
        169,
        2012,
        166,
        2010,
        1186,
        1184,
        1182,
        1179,
        175,
        1176,
        173,
        1192,
        1191,
        1189,
        1187,
        176,
        1194,
        1193,
        2313,
        2307,
        2305,
        592,
        589,
        2294,
        2292,
        2289,
        578,
        572,
        568,
        2297,
        580,
        1591,
        2272,
        2267,
        2264,
        1547,
        538,
        536,
        529,
        2278,
        525,
        2275,
        547,
        544,
        541,
        1574,
        1571,
        2237,
        2235,
        2229,
        1493,
        2225,
        1489,
        478,
        2247,
        470,
        2244,
        465,
        2241,
        493,
        488,
        484,
        2250,
        498,
        495,
        1536,
        1533,
        1530,
        1539,
        2187,
        2186,
        2184,
        2182,
        1432,
        2179,
        1430,
        2176,
        1427,
        414,
        412,
        2197,
        409,
        2195,
        405,
        2193,
        2190,
        426,
        424,
        421,
        2203,
        418,
        2201,
        431,
        429,
        1473,
        1471,
        1469,
        1466,
        434,
        1477,
        1475,
        2478,
        2472,
        2470,
        2459,
        2457,
        2454,
        2462,
        803,
        2437,
        2432,
        2429,
        1726,
        2443,
        2440,
        792,
        789,
        785,
        2401,
        2399,
        2393,
        1702,
        2389,
        1699,
        2411,
        2408,
        2405,
        745,
        741,
        2415,
        758,
        755,
        1721,
        2358,
        2357,
        2355,
        2353,
        1661,
        2350,
        1660,
        2347,
        1657,
        2368,
        2366,
        2364,
        2361,
        1666,
        690,
        687,
        2374,
        683,
        2372,
        701,
        698,
        705,
        1691,
        1689,
        2619,
        2617,
        2610,
        2608,
        2605,
        2613,
        2593,
        2588,
        2585,
        1803,
        2599,
        2596,
        2563,
        2561,
        2555,
        1797,
        2551,
        1795,
        2573,
        2570,
        2567,
        2577,
        2525,
        2524,
        2522,
        2520,
        1786,
        2517,
        1785,
        2514,
        1783,
        2535,
        2533,
        2531,
        2528,
        1788,
        2541,
        2539,
        906,
        903,
        911,
        2721,
        1844,
        2715,
        2712,
        1838,
        1836,
        2699,
        2696,
        2693,
        2703,
        1827,
        1826,
        1824,
        2673,
        2671,
        2669,
        2666,
        1829,
        2679,
        2677,
        1858,
        1857,
        2772,
        1854,
        1853,
        1851,
        1856,
        2766,
        2764,
        143,
        1987,
        139,
        1986,
        135,
        133,
        131,
        1984,
        128,
        1983,
        125,
        1981,
        138,
        137,
        136,
        1985,
        1133,
        1132,
        1130,
        112,
        110,
        1974,
        107,
        1973,
        104,
        1971,
        1969,
        122,
        121,
        119,
        117,
        1977,
        114,
        1976,
        124,
        1115,
        1114,
        1112,
        1110,
        1117,
        1116,
        84,
        83,
        1953,
        81,
        1952,
        78,
        1950,
        1948,
        1945,
        94,
        93,
        91,
        1959,
        88,
        1958,
        85,
        1955,
        99,
        97,
        95,
        1961,
        1086,
        1085,
        1083,
        1081,
        1078,
        100,
        1090,
        1089,
        1087,
        1091,
        49,
        47,
        1917,
        44,
        1915,
        1913,
        1910,
        1907,
        59,
        1926,
        56,
        1925,
        53,
        1922,
        1919,
        66,
        64,
        1931,
        61,
        1929,
        1042,
        1040,
        1038,
        71,
        1035,
        70,
        1032,
        68,
        1048,
        1047,
        1045,
        1043,
        1050,
        1049,
        12,
        10,
        1869,
        1867,
        1864,
        1861,
        21,
        1880,
        19,
        1877,
        1874,
        1871,
        28,
        1888,
        25,
        1886,
        22,
        1883,
        982,
        980,
        977,
        974,
        32,
        30,
        991,
        989,
        987,
        984,
        34,
        995,
        994,
        992,
        2151,
        2150,
        2147,
        2146,
        2144,
        356,
        355,
        354,
        2149,
        2139,
        2138,
        2136,
        2134,
        1359,
        343,
        341,
        338,
        2143,
        335,
        2141,
        348,
        347,
        346,
        1376,
        1374,
        2124,
        2123,
        2121,
        2119,
        1326,
        2116,
        1324,
        310,
        308,
        305,
        2131,
        302,
        2129,
        298,
        2127,
        320,
        318,
        316,
        313,
        2133,
        322,
        321,
        1355,
        1353,
        1351,
        1357,
        2092,
        2091,
        2089,
        2087,
        1276,
        2084,
        1274,
        2081,
        1271,
        259,
        2102,
        256,
        2100,
        252,
        2098,
        2095,
        272,
        269,
        2108,
        266,
        2106,
        281,
        279,
        277,
        1317,
        1315,
        1313,
        1310,
        282,
        1321,
        1319,
        2039,
        2037,
        2035,
        2032,
        1203,
        2029,
        1200,
        1197,
        207,
        2053,
        205,
        2051,
        201,
        2049,
        2046,
        2043,
        220,
        218,
        2064,
        215,
        2062,
        211,
        2059,
        228,
        226,
        223,
        2069,
        1259,
        1257,
        1254,
        232,
        1251,
        230,
        1267,
        1265,
        1263,
        2316,
        2315,
        2312,
        2311,
        2309,
        2314,
        2304,
        2303,
        2301,
        2299,
        1593,
        2308,
        2306,
        590,
        2288,
        2287,
        2285,
        2283,
        1578,
        2280,
        1577,
        2295,
        2293,
        2291,
        579,
        577,
        574,
        571,
        2298,
        582,
        581,
        1592,
        2263,
        2262,
        2260,
        2258,
        1545,
        2255,
        1544,
        2252,
        1541,
        2273,
        2271,
        2269,
        2266,
        1550,
        535,
        532,
        2279,
        528,
        2277,
        546,
        543,
        549,
        1575,
        1573,
        2224,
        2222,
        2220,
        1486,
        2217,
        1485,
        2214,
        1482,
        1479,
        2238,
        2236,
        2234,
        2231,
        1496,
        2228,
        1492,
        480,
        477,
        2248,
        473,
        2246,
        469,
        2243,
        490,
        487,
        2251,
        497,
        1537,
        1535,
        1532,
        2477,
        2476,
        2474,
        2479,
        2469,
        2468,
        2466,
        2464,
        1730,
        2473,
        2471,
        2453,
        2452,
        2450,
        2448,
        1729,
        2445,
        1728,
        2460,
        2458,
        2456,
        2463,
        805,
        804,
        2428,
        2427,
        2425,
        2423,
        1725,
        2420,
        1724,
        2417,
        1722,
        2438,
        2436,
        2434,
        2431,
        1727,
        2444,
        2442,
        793,
        791,
        788,
        795,
        2388,
        2386,
        2384,
        1697,
        2381,
        1696,
        2378,
        1694,
        1692,
        2402,
        2400,
        2398,
        2395,
        1703,
        2392,
        1701,
        2412,
        2410,
        2407,
        751,
        748,
        744,
        2416,
        759,
        757,
        1807,
        2620,
        2618,
        1806,
        1805,
        2611,
        2609,
        2607,
        2614,
        1802,
        1801,
        1799,
        2594,
        2592,
        2590,
        2587,
        1804,
        2600,
        2598,
        1794,
        1793,
        1791,
        1789,
        2564,
        2562,
        2560,
        2557,
        1798,
        2554,
        1796,
        2574,
        2572,
        2569,
        2578,
        1847,
        1846,
        2722,
        1843,
        1842,
        1840,
        1845,
        2716,
        2714,
        1835,
        1834,
        1832,
        1830,
        1839,
        1837,
        2700,
        2698,
        2695,
        2704,
        1817,
        1811,
        1810,
        897,
        862,
        1777,
        829,
        826,
        838,
        1760,
        1758,
        808,
        2481,
        1741,
        1740,
        1738,
        1743,
        2624,
        1818,
        2726,
        2776,
        782,
        740,
        737,
        1715,
        686,
        679,
        695,
        1682,
        1680,
        639,
        628,
        2339,
        647,
        644,
        1645,
        1643,
        1640,
        1648,
        602,
        600,
        597,
        595,
        2320,
        593,
        2318,
        609,
        607,
        604,
        1611,
        1610,
        1608,
        1606,
        613,
        1615,
        1613,
        2328,
        926,
        924,
        892,
        886,
        899,
        857,
        850,
        2505,
        1778,
        824,
        823,
        821,
        819,
        2488,
        818,
        2486,
        833,
        831,
        828,
        840,
        1761,
        1759,
        2649,
        2632,
        2630,
        2746,
        2734,
        2732,
        2782,
        2781,
        570,
        567,
        1587,
        531,
        527,
        523,
        540,
        1566,
        1564,
        476,
        467,
        463,
        2240,
        486,
        483,
        1524,
        1521,
        1518,
        1529,
        411,
        403,
        2192,
        399,
        2189,
        423,
        416,
        1462,
        1457,
        1454,
        428,
        1468,
        1465,
        2210,
        366,
        363,
        2158,
        360,
        2156,
        357,
        2153,
        376,
        373,
        370,
        2163,
        1410,
        1409,
        1407,
        1405,
        382,
        1402,
        380,
        1417,
        1415,
        1412,
        1421,
        2175,
        2174,
        777,
        774,
        771,
        784,
        732,
        725,
        722,
        2404,
        743,
        1716,
        676,
        674,
        668,
        2363,
        665,
        2360,
        685,
        1684,
        1681,
        626,
        624,
        622,
        2335,
        620,
        2333,
        617,
        2330,
        641,
        635,
        649,
        1646,
        1644,
        1642,
        2566,
        928,
        925,
        2530,
        2527,
        894,
        891,
        888,
        2501,
        2499,
        2496,
        858,
        856,
        854,
        851,
        1779,
        2692,
        2668,
        2665,
        2645,
        2643,
        2640,
        2651,
        2768,
        2759,
        2757,
        2744,
        2743,
        2741,
        2748,
        352,
        1382,
        340,
        337,
        333,
        1371,
        1369,
        307,
        300,
        296,
        2126,
        315,
        312,
        1347,
        1342,
        1350,
        261,
        258,
        250,
        2097,
        246,
        2094,
        271,
        268,
        264,
        1306,
        1301,
        1298,
        276,
        1312,
        1309,
        2115,
        203,
        2048,
        195,
        2045,
        191,
        2041,
        213,
        209,
        2056,
        1246,
        1244,
        1238,
        225,
        1234,
        222,
        1256,
        1253,
        1249,
        1262,
        2080,
        2079,
        154,
        1997,
        150,
        1995,
        147,
        1992,
        1989,
        163,
        160,
        2004,
        156,
        2001,
        1175,
        1174,
        1172,
        1170,
        1167,
        170,
        1164,
        167,
        1185,
        1183,
        1180,
        1177,
        174,
        1190,
        1188,
        2025,
        2024,
        2022,
        587,
        586,
        564,
        559,
        556,
        2290,
        573,
        1588,
        520,
        518,
        512,
        2268,
        508,
        2265,
        530,
        1568,
        1565,
        461,
        457,
        2233,
        450,
        2230,
        446,
        2226,
        479,
        471,
        489,
        1526,
        1523,
        1520,
        397,
        395,
        2185,
        392,
        2183,
        389,
        2180,
        2177,
        410,
        2194,
        402,
        422,
        1463,
        1461,
        1459,
        1456,
        1470,
        2455,
        799,
        2433,
        2430,
        779,
        776,
        773,
        2397,
        2394,
        2390,
        734,
        728,
        724,
        746,
        1717,
        2356,
        2354,
        2351,
        2348,
        1658,
        677,
        675,
        673,
        670,
        667,
        688,
        1685,
        1683,
        2606,
        2589,
        2586,
        2559,
        2556,
        2552,
        927,
        2523,
        2521,
        2518,
        2515,
        1784,
        2532,
        895,
        893,
        890,
        2718,
        2709,
        2707,
        2689,
        2687,
        2684,
        2663,
        2662,
        2660,
        2658,
        1825,
        2667,
        2769,
        1852,
        2760,
        2758,
        142,
        141,
        1139,
        1138,
        134,
        132,
        129,
        126,
        1982,
        1129,
        1128,
        1126,
        1131,
        113,
        111,
        108,
        105,
        1972,
        101,
        1970,
        120,
        118,
        115,
        1109,
        1108,
        1106,
        1104,
        123,
        1113,
        1111,
        82,
        79,
        1951,
        75,
        1949,
        72,
        1946,
        92,
        89,
        86,
        1956,
        1077,
        1076,
        1074,
        1072,
        98,
        1069,
        96,
        1084,
        1082,
        1079,
        1088,
        1968,
        1967,
        48,
        45,
        1916,
        42,
        1914,
        39,
        1911,
        1908,
        60,
        57,
        54,
        1923,
        50,
        1920,
        1031,
        1030,
        1028,
        1026,
        67,
        1023,
        65,
        1020,
        62,
        1041,
        1039,
        1036,
        1033,
        69,
        1046,
        1044,
        1944,
        1943,
        1941,
        11,
        9,
        1868,
        7,
        1865,
        1862,
        1859,
        20,
        1878,
        16,
        1875,
        13,
        1872,
        970,
        968,
        966,
        963,
        29,
        960,
        26,
        23,
        983,
        981,
        978,
        975,
        33,
        971,
        31,
        990,
        988,
        985,
        1906,
        1904,
        1902,
        993,
        351,
        2145,
        1383,
        331,
        330,
        328,
        326,
        2137,
        323,
        2135,
        339,
        1372,
        1370,
        294,
        293,
        291,
        289,
        2122,
        286,
        2120,
        283,
        2117,
        309,
        303,
        317,
        1348,
        1346,
        1344,
        245,
        244,
        242,
        2090,
        239,
        2088,
        236,
        2085,
        2082,
        260,
        2099,
        249,
        270,
        1307,
        1305,
        1303,
        1300,
        1314,
        189,
        2038,
        186,
        2036,
        183,
        2033,
        2030,
        2026,
        206,
        198,
        2047,
        194,
        216,
        1247,
        1245,
        1243,
        1240,
        227,
        1237,
        1255,
        2310,
        2302,
        2300,
        2286,
        2284,
        2281,
        565,
        563,
        561,
        558,
        575,
        1589,
        2261,
        2259,
        2256,
        2253,
        1542,
        521,
        519,
        517,
        514,
        2270,
        511,
        533,
        1569,
        1567,
        2223,
        2221,
        2218,
        2215,
        1483,
        2211,
        1480,
        459,
        456,
        453,
        2232,
        449,
        474,
        491,
        1527,
        1525,
        1522,
        2475,
        2467,
        2465,
        2451,
        2449,
        2446,
        801,
        800,
        2426,
        2424,
        2421,
        2418,
        1723,
        2435,
        780,
        778,
        775,
        2387,
        2385,
        2382,
        2379,
        1695,
        2375,
        1693,
        2396,
        735,
        733,
        730,
        727,
        749,
        1718,
        2616,
        2615,
        2604,
        2603,
        2601,
        2584,
        2583,
        2581,
        2579,
        1800,
        2591,
        2550,
        2549,
        2547,
        2545,
        1792,
        2542,
        1790,
        2558,
        929,
        2719,
        1841,
        2710,
        2708,
        1833,
        1831,
        2690,
        2688,
        2686,
        1815,
        1809,
        1808,
        1774,
        1756,
        1754,
        1737,
        1736,
        1734,
        1739,
        1816,
        1711,
        1676,
        1674,
        633,
        629,
        1638,
        1636,
        1633,
        1641,
        598,
        1605,
        1604,
        1602,
        1600,
        605,
        1609,
        1607,
        2327,
        887,
        853,
        1775,
        822,
        820,
        1757,
        1755,
        1584,
        524,
        1560,
        1558,
        468,
        464,
        1514,
        1511,
        1508,
        1519,
        408,
        404,
        400,
        1452,
        1447,
        1444,
        417,
        1458,
        1455,
        2208,
        364,
        361,
        358,
        2154,
        1401,
        1400,
        1398,
        1396,
        374,
        1393,
        371,
        1408,
        1406,
        1403,
        1413,
        2173,
        2172,
        772,
        726,
        723,
        1712,
        672,
        669,
        666,
        682,
        1678,
        1675,
        625,
        623,
        621,
        618,
        2331,
        636,
        632,
        1639,
        1637,
        1635,
        920,
        918,
        884,
        880,
        889,
        849,
        848,
        847,
        846,
        2497,
        855,
        852,
        1776,
        2641,
        2742,
        2787,
        1380,
        334,
        1367,
        1365,
        301,
        297,
        1340,
        1338,
        1335,
        1343,
        255,
        251,
        247,
        1296,
        1291,
        1288,
        265,
        1302,
        1299,
        2113,
        204,
        196,
        192,
        2042,
        1232,
        1230,
        1224,
        214,
        1220,
        210,
        1242,
        1239,
        1235,
        1250,
        2077,
        2075,
        151,
        148,
        1993,
        144,
        1990,
        1163,
        1162,
        1160,
        1158,
        1155,
        161,
        1152,
        157,
        1173,
        1171,
        1168,
        1165,
        168,
        1181,
        1178,
        2021,
        2020,
        2018,
        2023,
        585,
        560,
        557,
        1585,
        516,
        509,
        1562,
        1559,
        458,
        447,
        2227,
        472,
        1516,
        1513,
        1510,
        398,
        396,
        393,
        390,
        2181,
        386,
        2178,
        407,
        1453,
        1451,
        1449,
        1446,
        420,
        1460,
        2209,
        769,
        764,
        720,
        712,
        2391,
        729,
        1713,
        664,
        663,
        661,
        659,
        2352,
        656,
        2349,
        671,
        1679,
        1677,
        2553,
        922,
        919,
        2519,
        2516,
        885,
        883,
        881,
        2685,
        2661,
        2659,
        2767,
        2756,
        2755,
        140,
        1137,
        1136,
        130,
        127,
        1125,
        1124,
        1122,
        1127,
        109,
        106,
        102,
        1103,
        1102,
        1100,
        1098,
        116,
        1107,
        1105,
        1980,
        80,
        76,
        73,
        1947,
        1068,
        1067,
        1065,
        1063,
        90,
        1060,
        87,
        1075,
        1073,
        1070,
        1080,
        1966,
        1965,
        46,
        43,
        40,
        1912,
        36,
        1909,
        1019,
        1018,
        1016,
        1014,
        58,
        1011,
        55,
        1008,
        51,
        1029,
        1027,
        1024,
        1021,
        63,
        1037,
        1034,
        1940,
        1939,
        1937,
        1942,
        8,
        1866,
        4,
        1863,
        1,
        1860,
        956,
        954,
        952,
        949,
        946,
        17,
        14,
        969,
        967,
        964,
        961,
        27,
        957,
        24,
        979,
        976,
        972,
        1901,
        1900,
        1898,
        1896,
        986,
        1905,
        1903,
        350,
        349,
        1381,
        329,
        327,
        324,
        1368,
        1366,
        292,
        290,
        287,
        284,
        2118,
        304,
        1341,
        1339,
        1337,
        1345,
        243,
        240,
        237,
        2086,
        233,
        2083,
        254,
        1297,
        1295,
        1293,
        1290,
        1304,
        2114,
        190,
        187,
        184,
        2034,
        180,
        2031,
        177,
        2027,
        199,
        1233,
        1231,
        1229,
        1226,
        217,
        1223,
        1241,
        2078,
        2076,
        584,
        555,
        554,
        552,
        550,
        2282,
        562,
        1586,
        507,
        506,
        504,
        502,
        2257,
        499,
        2254,
        515,
        1563,
        1561,
        445,
        443,
        441,
        2219,
        438,
        2216,
        435,
        2212,
        460,
        454,
        475,
        1517,
        1515,
        1512,
        2447,
        798,
        797,
        2422,
        2419,
        770,
        768,
        766,
        2383,
        2380,
        2376,
        721,
        719,
        717,
        714,
        731,
        1714,
        2602,
        2582,
        2580,
        2548,
        2546,
        2543,
        923,
        921,
        2717,
        2706,
        2705,
        2683,
        2682,
        2680,
        1771,
        1752,
        1750,
        1733,
        1732,
        1731,
        1735,
        1814,
        1707,
        1670,
        1668,
        1631,
        1629,
        1626,
        1634,
        1599,
        1598,
        1596,
        1594,
        1603,
        1601,
        2326,
        1772,
        1753,
        1751,
        1581,
        1554,
        1552,
        1504,
        1501,
        1498,
        1509,
        1442,
        1437,
        1434,
        401,
        1448,
        1445,
        2206,
        1392,
        1391,
        1389,
        1387,
        1384,
        359,
        1399,
        1397,
        1394,
        1404,
        2171,
        2170,
        1708,
        1672,
        1669,
        619,
        1632,
        1630,
        1628,
        1773,
        1378,
        1363,
        1361,
        1333,
        1328,
        1336,
        1286,
        1281,
        1278,
        248,
        1292,
        1289,
        2111,
        1218,
        1216,
        1210,
        197,
        1206,
        193,
        1228,
        1225,
        1221,
        1236,
        2073,
        2071,
        1151,
        1150,
        1148,
        1146,
        152,
        1143,
        149,
        1140,
        145,
        1161,
        1159,
        1156,
        1153,
        158,
        1169,
        1166,
        2017,
        2016,
        2014,
        2019,
        1582,
        510,
        1556,
        1553,
        452,
        448,
        1506,
        1500,
        394,
        391,
        387,
        1443,
        1441,
        1439,
        1436,
        1450,
        2207,
        765,
        716,
        713,
        1709,
        662,
        660,
        657,
        1673,
        1671,
        916,
        914,
        879,
        878,
        877,
        882,
        1135,
        1134,
        1121,
        1120,
        1118,
        1123,
        1097,
        1096,
        1094,
        1092,
        103,
        1101,
        1099,
        1979,
        1059,
        1058,
        1056,
        1054,
        77,
        1051,
        74,
        1066,
        1064,
        1061,
        1071,
        1964,
        1963,
        1007,
        1006,
        1004,
        1002,
        999,
        41,
        996,
        37,
        1017,
        1015,
        1012,
        1009,
        52,
        1025,
        1022,
        1936,
        1935,
        1933,
        1938,
        942,
        940,
        938,
        935,
        932,
        5,
        2,
        955,
        953,
        950,
        947,
        18,
        943,
        15,
        965,
        962,
        958,
        1895,
        1894,
        1892,
        1890,
        973,
        1899,
        1897,
        1379,
        325,
        1364,
        1362,
        288,
        285,
        1334,
        1332,
        1330,
        241,
        238,
        234,
        1287,
        1285,
        1283,
        1280,
        1294,
        2112,
        188,
        185,
        181,
        178,
        2028,
        1219,
        1217,
        1215,
        1212,
        200,
        1209,
        1227,
        2074,
        2072,
        583,
        553,
        551,
        1583,
        505,
        503,
        500,
        513,
        1557,
        1555,
        444,
        442,
        439,
        436,
        2213,
        455,
        451,
        1507,
        1505,
        1502,
        796,
        763,
        762,
        760,
        767,
        711,
        710,
        708,
        706,
        2377,
        718,
        715,
        1710,
        2544,
        917,
        915,
        2681,
        1627,
        1597,
        1595,
        2325,
        1769,
        1749,
        1747,
        1499,
        1438,
        1435,
        2204,
        1390,
        1388,
        1385,
        1395,
        2169,
        2167,
        1704,
        1665,
        1662,
        1625,
        1623,
        1620,
        1770,
        1329,
        1282,
        1279,
        2109,
        1214,
        1207,
        1222,
        2068,
        2065,
        1149,
        1147,
        1144,
        1141,
        146,
        1157,
        1154,
        2013,
        2011,
        2008,
        2015,
        1579,
        1549,
        1546,
        1495,
        1487,
        1433,
        1431,
        1428,
        1425,
        388,
        1440,
        2205,
        1705,
        658,
        1667,
        1664,
        1119,
        1095,
        1093,
        1978,
        1057,
        1055,
        1052,
        1062,
        1962,
        1960,
        1005,
        1003,
        1e3,
        997,
        38,
        1013,
        1010,
        1932,
        1930,
        1927,
        1934,
        941,
        939,
        936,
        933,
        6,
        930,
        3,
        951,
        948,
        944,
        1889,
        1887,
        1884,
        1881,
        959,
        1893,
        1891,
        35,
        1377,
        1360,
        1358,
        1327,
        1325,
        1322,
        1331,
        1277,
        1275,
        1272,
        1269,
        235,
        1284,
        2110,
        1205,
        1204,
        1201,
        1198,
        182,
        1195,
        179,
        1213,
        2070,
        2067,
        1580,
        501,
        1551,
        1548,
        440,
        437,
        1497,
        1494,
        1490,
        1503,
        761,
        709,
        707,
        1706,
        913,
        912,
        2198,
        1386,
        2164,
        2161,
        1621,
        1766,
        2103,
        1208,
        2058,
        2054,
        1145,
        1142,
        2005,
        2002,
        1999,
        2009,
        1488,
        1429,
        1426,
        2200,
        1698,
        1659,
        1656,
        1975,
        1053,
        1957,
        1954,
        1001,
        998,
        1924,
        1921,
        1918,
        1928,
        937,
        934,
        931,
        1879,
        1876,
        1873,
        1870,
        945,
        1885,
        1882,
        1323,
        1273,
        1270,
        2105,
        1202,
        1199,
        1196,
        1211,
        2061,
        2057,
        1576,
        1543,
        1540,
        1484,
        1481,
        1478,
        1491,
        1700
    ]), t;
}(), cn = function() {
    function t(t, e) {
        this.bits = t, this.points = e;
    }
    return t.prototype.getBits = function() {
        return this.bits;
    }, t.prototype.getPoints = function() {
        return this.points;
    }, t;
}(), fn = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, hn = function() {
    function t() {}
    return t.detectMultiple = function(e, r, n) {
        var o = e.getBlackMatrix(), i = t.detect(n, o);
        return i.length || ((o = o.clone()).rotate180(), i = t.detect(n, o)), new cn(o, i);
    }, t.detect = function(e, r) {
        for(var n, o, i = new Array, a = 0, u = 0, s = !1; a < r.getHeight();){
            var c = t.findVertices(r, a, u);
            if (null != c[0] || null != c[3]) {
                if (s = !0, i.push(c), !e) break;
                null != c[2] ? (u = Math.trunc(c[2].getX()), a = Math.trunc(c[2].getY())) : (u = Math.trunc(c[4].getX()), a = Math.trunc(c[4].getY()));
            } else {
                if (!s) break;
                s = !1, u = 0;
                try {
                    for(var f = (n = void 0, fn(i)), h = f.next(); !h.done; h = f.next()){
                        var l = h.value;
                        null != l[1] && (a = Math.trunc(Math.max(a, l[1].getY()))), null != l[3] && (a = Math.max(a, Math.trunc(l[3].getY())));
                    }
                } catch (t) {
                    n = {
                        error: t
                    };
                } finally{
                    try {
                        h && !h.done && (o = f.return) && o.call(f);
                    } finally{
                        if (n) throw n.error;
                    }
                }
                a += t.ROW_STEP;
            }
        }
        return i;
    }, t.findVertices = function(e, r, n) {
        var o = e.getHeight(), i = e.getWidth(), a = new Array(8);
        return t.copyToResult(a, t.findRowsWithPattern(e, o, i, r, n, t.START_PATTERN), t.INDEXES_START_PATTERN), null != a[4] && (n = Math.trunc(a[4].getX()), r = Math.trunc(a[4].getY())), t.copyToResult(a, t.findRowsWithPattern(e, o, i, r, n, t.STOP_PATTERN), t.INDEXES_STOP_PATTERN), a;
    }, t.copyToResult = function(t, e, r) {
        for(var n = 0; n < r.length; n++)t[r[n]] = e[n];
    }, t.findRowsWithPattern = function(e, r, n, o, i, a) {
        for(var u = new Array(4), s = !1, c = new Int32Array(a.length); o < r; o += t.ROW_STEP){
            if (null != (d = t.findGuardPattern(e, i, o, n, !1, a, c))) {
                for(; o > 0;){
                    if (null == (l = t.findGuardPattern(e, i, --o, n, !1, a, c))) {
                        o++;
                        break;
                    }
                    d = l;
                }
                u[0] = new At(d[0], o), u[1] = new At(d[1], o), s = !0;
                break;
            }
        }
        var f = o + 1;
        if (s) {
            for(var h = 0, l = Int32Array.from([
                Math.trunc(u[0].getX()),
                Math.trunc(u[1].getX())
            ]); f < r; f++){
                var d;
                if (null != (d = t.findGuardPattern(e, l[0], f, n, !1, a, c)) && Math.abs(l[0] - d[0]) < t.MAX_PATTERN_DRIFT && Math.abs(l[1] - d[1]) < t.MAX_PATTERN_DRIFT) l = d, h = 0;
                else {
                    if (h > t.SKIPPED_ROW_COUNT_MAX) break;
                    h++;
                }
            }
            f -= h + 1, u[2] = new At(l[0], f), u[3] = new At(l[1], f);
        }
        return f - o < t.BARCODE_MIN_HEIGHT && C.fill(u, null), u;
    }, t.findGuardPattern = function(e, r, n, o, i, a, u) {
        C.fillWithin(u, 0, u.length, 0);
        for(var s = r, c = 0; e.get(s, n) && s > 0 && c++ < t.MAX_PIXEL_DRIFT;)s--;
        for(var f = s, h = 0, l = a.length, d = i; f < o; f++){
            if (e.get(f, n) !== d) u[h]++;
            else {
                if (h === l - 1) {
                    if (t.patternMatchVariance(u, a, t.MAX_INDIVIDUAL_VARIANCE) < t.MAX_AVG_VARIANCE) return new Int32Array([
                        s,
                        f
                    ]);
                    s += u[0] + u[1], w.arraycopy(u, 2, u, 0, h - 1), u[h - 1] = 0, u[h] = 0, h--;
                } else h++;
                u[h] = 1, d = !d;
            }
        }
        return h === l - 1 && t.patternMatchVariance(u, a, t.MAX_INDIVIDUAL_VARIANCE) < t.MAX_AVG_VARIANCE ? new Int32Array([
            s,
            f - 1
        ]) : null;
    }, t.patternMatchVariance = function(t, e, r) {
        for(var n = t.length, o = 0, i = 0, a = 0; a < n; a++)o += t[a], i += e[a];
        if (o < i) return 1 / 0;
        var u = o / i;
        r *= u;
        for(var s = 0, c = 0; c < n; c++){
            var f = t[c], h = e[c] * u, l = f > h ? f - h : h - f;
            if (l > r) return 1 / 0;
            s += l;
        }
        return s / o;
    }, t.INDEXES_START_PATTERN = Int32Array.from([
        0,
        4,
        1,
        5
    ]), t.INDEXES_STOP_PATTERN = Int32Array.from([
        6,
        2,
        7,
        3
    ]), t.MAX_AVG_VARIANCE = .42, t.MAX_INDIVIDUAL_VARIANCE = .8, t.START_PATTERN = Int32Array.from([
        8,
        1,
        1,
        1,
        1,
        1,
        1,
        3
    ]), t.STOP_PATTERN = Int32Array.from([
        7,
        1,
        1,
        3,
        1,
        1,
        1,
        2,
        1
    ]), t.MAX_PIXEL_DRIFT = 3, t.MAX_PATTERN_DRIFT = 5, t.SKIPPED_ROW_COUNT_MAX = 25, t.ROW_STEP = 5, t.BARCODE_MIN_HEIGHT = 10, t;
}(), ln = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, dn = function() {
    function t(t, e) {
        if (0 === e.length) throw new l;
        this.field = t;
        var r = e.length;
        if (r > 1 && 0 === e[0]) {
            for(var n = 1; n < r && 0 === e[n];)n++;
            n === r ? this.coefficients = new Int32Array([
                0
            ]) : (this.coefficients = new Int32Array(r - n), w.arraycopy(e, n, this.coefficients, 0, this.coefficients.length));
        } else this.coefficients = e;
    }
    return t.prototype.getCoefficients = function() {
        return this.coefficients;
    }, t.prototype.getDegree = function() {
        return this.coefficients.length - 1;
    }, t.prototype.isZero = function() {
        return 0 === this.coefficients[0];
    }, t.prototype.getCoefficient = function(t) {
        return this.coefficients[this.coefficients.length - 1 - t];
    }, t.prototype.evaluateAt = function(t) {
        var e, r;
        if (0 === t) return this.getCoefficient(0);
        if (1 === t) {
            var n = 0;
            try {
                for(var o = ln(this.coefficients), i = o.next(); !i.done; i = o.next()){
                    var a = i.value;
                    n = this.field.add(n, a);
                }
            } catch (t) {
                e = {
                    error: t
                };
            } finally{
                try {
                    i && !i.done && (r = o.return) && r.call(o);
                } finally{
                    if (e) throw e.error;
                }
            }
            return n;
        }
        for(var u = this.coefficients[0], s = this.coefficients.length, c = 1; c < s; c++)u = this.field.add(this.field.multiply(t, u), this.coefficients[c]);
        return u;
    }, t.prototype.add = function(e) {
        if (!this.field.equals(e.field)) throw new l("ModulusPolys do not have same ModulusGF field");
        if (this.isZero()) return e;
        if (e.isZero()) return this;
        var r = this.coefficients, n = e.coefficients;
        if (r.length > n.length) {
            var o = r;
            r = n, n = o;
        }
        var i = new Int32Array(n.length), a = n.length - r.length;
        w.arraycopy(n, 0, i, 0, a);
        for(var u = a; u < n.length; u++)i[u] = this.field.add(r[u - a], n[u]);
        return new t(this.field, i);
    }, t.prototype.subtract = function(t) {
        if (!this.field.equals(t.field)) throw new l("ModulusPolys do not have same ModulusGF field");
        return t.isZero() ? this : this.add(t.negative());
    }, t.prototype.multiply = function(e) {
        return e instanceof t ? this.multiplyOther(e) : this.multiplyScalar(e);
    }, t.prototype.multiplyOther = function(e) {
        if (!this.field.equals(e.field)) throw new l("ModulusPolys do not have same ModulusGF field");
        if (this.isZero() || e.isZero()) return new t(this.field, new Int32Array([
            0
        ]));
        for(var r = this.coefficients, n = r.length, o = e.coefficients, i = o.length, a = new Int32Array(n + i - 1), u = 0; u < n; u++)for(var s = r[u], c = 0; c < i; c++)a[u + c] = this.field.add(a[u + c], this.field.multiply(s, o[c]));
        return new t(this.field, a);
    }, t.prototype.negative = function() {
        for(var e = this.coefficients.length, r = new Int32Array(e), n = 0; n < e; n++)r[n] = this.field.subtract(0, this.coefficients[n]);
        return new t(this.field, r);
    }, t.prototype.multiplyScalar = function(e) {
        if (0 === e) return new t(this.field, new Int32Array([
            0
        ]));
        if (1 === e) return this;
        for(var r = this.coefficients.length, n = new Int32Array(r), o = 0; o < r; o++)n[o] = this.field.multiply(this.coefficients[o], e);
        return new t(this.field, n);
    }, t.prototype.multiplyByMonomial = function(e, r) {
        if (e < 0) throw new l;
        if (0 === r) return new t(this.field, new Int32Array([
            0
        ]));
        for(var n = this.coefficients.length, o = new Int32Array(n + e), i = 0; i < n; i++)o[i] = this.field.multiply(this.coefficients[i], r);
        return new t(this.field, o);
    }, t.prototype.toString = function() {
        for(var t = new k, e = this.getDegree(); e >= 0; e--){
            var r = this.getCoefficient(e);
            0 !== r && (r < 0 ? (t.append(" - "), r = -r) : t.length() > 0 && t.append(" + "), 0 !== e && 1 === r || t.append(r), 0 !== e && (1 === e ? t.append("x") : (t.append("x^"), t.append(e))));
        }
        return t.toString();
    }, t;
}(), pn = function() {
    function t() {}
    return t.prototype.add = function(t, e) {
        return (t + e) % this.modulus;
    }, t.prototype.subtract = function(t, e) {
        return (this.modulus + t - e) % this.modulus;
    }, t.prototype.exp = function(t) {
        return this.expTable[t];
    }, t.prototype.log = function(t) {
        if (0 === t) throw new l;
        return this.logTable[t];
    }, t.prototype.inverse = function(t) {
        if (0 === t) throw new ft;
        return this.expTable[this.modulus - this.logTable[t] - 1];
    }, t.prototype.multiply = function(t, e) {
        return 0 === t || 0 === e ? 0 : this.expTable[(this.logTable[t] + this.logTable[e]) % (this.modulus - 1)];
    }, t.prototype.getSize = function() {
        return this.modulus;
    }, t.prototype.equals = function(t) {
        return t === this;
    }, t;
}(), gn = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), yn = function(t) {
    function e(e, r) {
        var n = t.call(this) || this;
        n.modulus = e, n.expTable = new Int32Array(e), n.logTable = new Int32Array(e);
        for(var o = 1, i = 0; i < e; i++)n.expTable[i] = o, o = o * r % e;
        for(i = 0; i < e - 1; i++)n.logTable[n.expTable[i]] = i;
        return n.zero = new dn(n, new Int32Array([
            0
        ])), n.one = new dn(n, new Int32Array([
            1
        ])), n;
    }
    return gn(e, t), e.prototype.getZero = function() {
        return this.zero;
    }, e.prototype.getOne = function() {
        return this.one;
    }, e.prototype.buildMonomial = function(t, e) {
        if (t < 0) throw new l;
        if (0 === e) return this.zero;
        var r = new Int32Array(t + 1);
        return r[0] = e, new dn(this, r);
    }, e.PDF417_GF = new e(sn.NUMBER_OF_CODEWORDS, 3), e;
}(pn), wn = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, _n = function() {
    function t() {
        this.field = yn.PDF417_GF;
    }
    return t.prototype.decode = function(t, e, r) {
        for(var n, o, i = new dn(this.field, t), a = new Int32Array(e), u = !1, s = e; s > 0; s--){
            var c = i.evaluateAt(this.field.exp(s));
            a[e - s] = c, 0 !== c && (u = !0);
        }
        if (!u) return 0;
        var f = this.field.getOne();
        if (null != r) try {
            for(var h = wn(r), l = h.next(); !l.done; l = h.next()){
                var d = l.value, p = this.field.exp(t.length - 1 - d), y = new dn(this.field, new Int32Array([
                    this.field.subtract(0, p),
                    1
                ]));
                f = f.multiply(y);
            }
        } catch (t) {
            n = {
                error: t
            };
        } finally{
            try {
                l && !l.done && (o = h.return) && o.call(h);
            } finally{
                if (n) throw n.error;
            }
        }
        var w = new dn(this.field, a), _ = this.runEuclideanAlgorithm(this.field.buildMonomial(e, 1), w, e), v = _[0], m = _[1], A = this.findErrorLocations(v), E = this.findErrorMagnitudes(m, v, A);
        for(s = 0; s < A.length; s++){
            var C = t.length - 1 - this.field.log(A[s]);
            if (C < 0) throw g.getChecksumInstance();
            t[C] = this.field.subtract(t[C], E[s]);
        }
        return A.length;
    }, t.prototype.runEuclideanAlgorithm = function(t, e, r) {
        if (t.getDegree() < e.getDegree()) {
            var n = t;
            t = e, e = n;
        }
        for(var o = t, i = e, a = this.field.getZero(), u = this.field.getOne(); i.getDegree() >= Math.round(r / 2);){
            var s = o, c = a;
            if (a = u, (o = i).isZero()) throw g.getChecksumInstance();
            i = s;
            for(var f = this.field.getZero(), h = o.getCoefficient(o.getDegree()), l = this.field.inverse(h); i.getDegree() >= o.getDegree() && !i.isZero();){
                var d = i.getDegree() - o.getDegree(), p = this.field.multiply(i.getCoefficient(i.getDegree()), l);
                f = f.add(this.field.buildMonomial(d, p)), i = i.subtract(o.multiplyByMonomial(d, p));
            }
            u = f.multiply(a).subtract(c).negative();
        }
        var y = u.getCoefficient(0);
        if (0 === y) throw g.getChecksumInstance();
        var w = this.field.inverse(y);
        return [
            u.multiply(w),
            i.multiply(w)
        ];
    }, t.prototype.findErrorLocations = function(t) {
        for(var e = t.getDegree(), r = new Int32Array(e), n = 0, o = 1; o < this.field.getSize() && n < e; o++)0 === t.evaluateAt(o) && (r[n] = this.field.inverse(o), n++);
        if (n !== e) throw g.getChecksumInstance();
        return r;
    }, t.prototype.findErrorMagnitudes = function(t, e, r) {
        for(var n = e.getDegree(), o = new Int32Array(n), i = 1; i <= n; i++)o[n - i] = this.field.multiply(i, e.getCoefficient(i));
        var a = new dn(this.field, o), u = r.length, s = new Int32Array(u);
        for(i = 0; i < u; i++){
            var c = this.field.inverse(r[i]), f = this.field.subtract(0, t.evaluateAt(c)), h = this.field.inverse(a.evaluateAt(c));
            s[i] = this.field.multiply(f, h);
        }
        return s;
    }, t;
}(), vn = function() {
    function t(e, r, n, o, i) {
        e instanceof t ? this.constructor_2(e) : this.constructor_1(e, r, n, o, i);
    }
    return t.prototype.constructor_1 = function(t, e, r, n, o) {
        var i = null == e || null == r, a = null == n || null == o;
        if (i && a) throw new U;
        i ? (e = new At(0, n.getY()), r = new At(0, o.getY())) : a && (n = new At(t.getWidth() - 1, e.getY()), o = new At(t.getWidth() - 1, r.getY())), this.image = t, this.topLeft = e, this.bottomLeft = r, this.topRight = n, this.bottomRight = o, this.minX = Math.trunc(Math.min(e.getX(), r.getX())), this.maxX = Math.trunc(Math.max(n.getX(), o.getX())), this.minY = Math.trunc(Math.min(e.getY(), n.getY())), this.maxY = Math.trunc(Math.max(r.getY(), o.getY()));
    }, t.prototype.constructor_2 = function(t) {
        this.image = t.image, this.topLeft = t.getTopLeft(), this.bottomLeft = t.getBottomLeft(), this.topRight = t.getTopRight(), this.bottomRight = t.getBottomRight(), this.minX = t.getMinX(), this.maxX = t.getMaxX(), this.minY = t.getMinY(), this.maxY = t.getMaxY();
    }, t.merge = function(e, r) {
        return null == e ? r : null == r ? e : new t(e.image, e.topLeft, e.bottomLeft, r.topRight, r.bottomRight);
    }, t.prototype.addMissingRows = function(e, r, n) {
        var o = this.topLeft, i = this.bottomLeft, a = this.topRight, u = this.bottomRight;
        if (e > 0) {
            var s = n ? this.topLeft : this.topRight, c = Math.trunc(s.getY() - e);
            c < 0 && (c = 0);
            var f = new At(s.getX(), c);
            n ? o = f : a = f;
        }
        if (r > 0) {
            var h = n ? this.bottomLeft : this.bottomRight, l = Math.trunc(h.getY() + r);
            l >= this.image.getHeight() && (l = this.image.getHeight() - 1);
            var d = new At(h.getX(), l);
            n ? i = d : u = d;
        }
        return new t(this.image, o, i, a, u);
    }, t.prototype.getMinX = function() {
        return this.minX;
    }, t.prototype.getMaxX = function() {
        return this.maxX;
    }, t.prototype.getMinY = function() {
        return this.minY;
    }, t.prototype.getMaxY = function() {
        return this.maxY;
    }, t.prototype.getTopLeft = function() {
        return this.topLeft;
    }, t.prototype.getTopRight = function() {
        return this.topRight;
    }, t.prototype.getBottomLeft = function() {
        return this.bottomLeft;
    }, t.prototype.getBottomRight = function() {
        return this.bottomRight;
    }, t;
}(), mn = function() {
    function t(t, e, r, n) {
        this.columnCount = t, this.errorCorrectionLevel = n, this.rowCountUpperPart = e, this.rowCountLowerPart = r, this.rowCount = e + r;
    }
    return t.prototype.getColumnCount = function() {
        return this.columnCount;
    }, t.prototype.getErrorCorrectionLevel = function() {
        return this.errorCorrectionLevel;
    }, t.prototype.getRowCount = function() {
        return this.rowCount;
    }, t.prototype.getRowCountUpperPart = function() {
        return this.rowCountUpperPart;
    }, t.prototype.getRowCountLowerPart = function() {
        return this.rowCountLowerPart;
    }, t;
}(), An = function() {
    function t() {
        this.buffer = "";
    }
    return t.form = function(t, e) {
        var r = -1;
        return t.replace(/%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g, function(t, n, o, i, a, u) {
            if ("%%" === t) return "%";
            if (void 0 !== e[++r]) {
                t = i ? parseInt(i.substr(1)) : void 0;
                var s, c = a ? parseInt(a.substr(1)) : void 0;
                switch(u){
                    case "s":
                        s = e[r];
                        break;
                    case "c":
                        s = e[r][0];
                        break;
                    case "f":
                        s = parseFloat(e[r]).toFixed(t);
                        break;
                    case "p":
                        s = parseFloat(e[r]).toPrecision(t);
                        break;
                    case "e":
                        s = parseFloat(e[r]).toExponential(t);
                        break;
                    case "x":
                        s = parseInt(e[r]).toString(c || 16);
                        break;
                    case "d":
                        s = parseFloat(parseInt(e[r], c || 10).toPrecision(t)).toFixed(0);
                }
                s = "object" == typeof s ? JSON.stringify(s) : (+s).toString(c);
                for(var f = parseInt(o), h = o && o[0] + "" == "0" ? "0" : " "; s.length < f;)s = void 0 !== n ? s + h : h + s;
                return s;
            }
        });
    }, t.prototype.format = function(e) {
        for(var r = [], n = 1; n < arguments.length; n++)r[n - 1] = arguments[n];
        this.buffer += t.form(e, r);
    }, t.prototype.toString = function() {
        return this.buffer;
    }, t;
}(), En = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Cn = function() {
    function t(t) {
        this.boundingBox = new vn(t), this.codewords = new Array(t.getMaxY() - t.getMinY() + 1);
    }
    return t.prototype.getCodewordNearby = function(e) {
        var r = this.getCodeword(e);
        if (null != r) return r;
        for(var n = 1; n < t.MAX_NEARBY_DISTANCE; n++){
            var o = this.imageRowToCodewordIndex(e) - n;
            if (o >= 0 && null != (r = this.codewords[o])) return r;
            if ((o = this.imageRowToCodewordIndex(e) + n) < this.codewords.length && null != (r = this.codewords[o])) return r;
        }
        return null;
    }, t.prototype.imageRowToCodewordIndex = function(t) {
        return t - this.boundingBox.getMinY();
    }, t.prototype.setCodeword = function(t, e) {
        this.codewords[this.imageRowToCodewordIndex(t)] = e;
    }, t.prototype.getCodeword = function(t) {
        return this.codewords[this.imageRowToCodewordIndex(t)];
    }, t.prototype.getBoundingBox = function() {
        return this.boundingBox;
    }, t.prototype.getCodewords = function() {
        return this.codewords;
    }, t.prototype.toString = function() {
        var t, e, r = new An, n = 0;
        try {
            for(var o = En(this.codewords), i = o.next(); !i.done; i = o.next()){
                var a = i.value;
                null != a ? r.format("%3d: %3d|%3d%n", n++, a.getRowNumber(), a.getValue()) : r.format("%3d:    |   %n", n++);
            }
        } catch (e) {
            t = {
                error: e
            };
        } finally{
            try {
                i && !i.done && (e = o.return) && e.call(o);
            } finally{
                if (t) throw t.error;
            }
        }
        return r.toString();
    }, t.MAX_NEARBY_DISTANCE = 5, t;
}(), In = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Sn = function(t, e) {
    var r = "function" == typeof Symbol && t[Symbol.iterator];
    if (!r) return t;
    var n, o, i = r.call(t), a = [];
    try {
        for(; (void 0 === e || e-- > 0) && !(n = i.next()).done;)a.push(n.value);
    } catch (t) {
        o = {
            error: t
        };
    } finally{
        try {
            n && !n.done && (r = i.return) && r.call(i);
        } finally{
            if (o) throw o.error;
        }
    }
    return a;
}, On = function() {
    function t() {
        this.values = new Map;
    }
    return t.prototype.setValue = function(t) {
        t = Math.trunc(t);
        var e = this.values.get(t);
        null == e && (e = 0), e++, this.values.set(t, e);
    }, t.prototype.getValue = function() {
        var t, e, r = -1, n = new Array, o = function(t, e) {
            var o = function() {
                return t;
            }, i = function() {
                return e;
            };
            i() > r ? (r = i(), (n = []).push(o())) : i() === r && n.push(o());
        };
        try {
            for(var i = In(this.values.entries()), a = i.next(); !a.done; a = i.next()){
                var u = Sn(a.value, 2);
                o(u[0], u[1]);
            }
        } catch (e) {
            t = {
                error: e
            };
        } finally{
            try {
                a && !a.done && (e = i.return) && e.call(i);
            } finally{
                if (t) throw t.error;
            }
        }
        return sn.toIntArray(n);
    }, t.prototype.getConfidence = function(t) {
        return this.values.get(t);
    }, t;
}(), Tn = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), bn = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Rn = function(t) {
    function e(e, r) {
        var n = t.call(this, e) || this;
        return n._isLeft = r, n;
    }
    return Tn(e, t), e.prototype.setRowNumbers = function() {
        var t, e;
        try {
            for(var r = bn(this.getCodewords()), n = r.next(); !n.done; n = r.next()){
                var o = n.value;
                null != o && o.setRowNumberAsRowIndicatorColumn();
            }
        } catch (e) {
            t = {
                error: e
            };
        } finally{
            try {
                n && !n.done && (e = r.return) && e.call(r);
            } finally{
                if (t) throw t.error;
            }
        }
    }, e.prototype.adjustCompleteIndicatorColumnRowNumbers = function(t) {
        var e = this.getCodewords();
        this.setRowNumbers(), this.removeIncorrectCodewords(e, t);
        for(var r = this.getBoundingBox(), n = this._isLeft ? r.getTopLeft() : r.getTopRight(), o = this._isLeft ? r.getBottomLeft() : r.getBottomRight(), i = this.imageRowToCodewordIndex(Math.trunc(n.getY())), a = this.imageRowToCodewordIndex(Math.trunc(o.getY())), u = -1, s = 1, c = 0, f = i; f < a; f++)if (null != e[f]) {
            var h = e[f], l = h.getRowNumber() - u;
            if (0 === l) c++;
            else if (1 === l) s = Math.max(s, c), c = 1, u = h.getRowNumber();
            else if (l < 0 || h.getRowNumber() >= t.getRowCount() || l > f) e[f] = null;
            else {
                for(var d = void 0, p = (d = s > 2 ? (s - 2) * l : l) >= f, g = 1; g <= d && !p; g++)p = null != e[f - g];
                p ? e[f] = null : (u = h.getRowNumber(), c = 1);
            }
        }
    }, e.prototype.getRowHeights = function() {
        var t, e, r = this.getBarcodeMetadata();
        if (null == r) return null;
        this.adjustIncompleteIndicatorColumnRowNumbers(r);
        var n = new Int32Array(r.getRowCount());
        try {
            for(var o = bn(this.getCodewords()), i = o.next(); !i.done; i = o.next()){
                var a = i.value;
                if (null != a) {
                    var u = a.getRowNumber();
                    if (u >= n.length) continue;
                    n[u]++;
                }
            }
        } catch (e) {
            t = {
                error: e
            };
        } finally{
            try {
                i && !i.done && (e = o.return) && e.call(o);
            } finally{
                if (t) throw t.error;
            }
        }
        return n;
    }, e.prototype.adjustIncompleteIndicatorColumnRowNumbers = function(t) {
        for(var e = this.getBoundingBox(), r = this._isLeft ? e.getTopLeft() : e.getTopRight(), n = this._isLeft ? e.getBottomLeft() : e.getBottomRight(), o = this.imageRowToCodewordIndex(Math.trunc(r.getY())), i = this.imageRowToCodewordIndex(Math.trunc(n.getY())), a = this.getCodewords(), u = -1, s = o; s < i; s++)if (null != a[s]) {
            var c = a[s];
            c.setRowNumberAsRowIndicatorColumn();
            var f = c.getRowNumber() - u;
            0 === f || (1 === f ? u = c.getRowNumber() : c.getRowNumber() >= t.getRowCount() ? a[s] = null : u = c.getRowNumber());
        }
    }, e.prototype.getBarcodeMetadata = function() {
        var t, e, r = this.getCodewords(), n = new On, o = new On, i = new On, a = new On;
        try {
            for(var u = bn(r), s = u.next(); !s.done; s = u.next()){
                var c = s.value;
                if (null != c) {
                    c.setRowNumberAsRowIndicatorColumn();
                    var f = c.getValue() % 30, h = c.getRowNumber();
                    switch(this._isLeft || (h += 2), h % 3){
                        case 0:
                            o.setValue(3 * f + 1);
                            break;
                        case 1:
                            a.setValue(f / 3), i.setValue(f % 3);
                            break;
                        case 2:
                            n.setValue(f + 1);
                    }
                }
            }
        } catch (e) {
            t = {
                error: e
            };
        } finally{
            try {
                s && !s.done && (e = u.return) && e.call(u);
            } finally{
                if (t) throw t.error;
            }
        }
        if (0 === n.getValue().length || 0 === o.getValue().length || 0 === i.getValue().length || 0 === a.getValue().length || n.getValue()[0] < 1 || o.getValue()[0] + i.getValue()[0] < sn.MIN_ROWS_IN_BARCODE || o.getValue()[0] + i.getValue()[0] > sn.MAX_ROWS_IN_BARCODE) return null;
        var l = new mn(n.getValue()[0], o.getValue()[0], i.getValue()[0], a.getValue()[0]);
        return this.removeIncorrectCodewords(r, l), l;
    }, e.prototype.removeIncorrectCodewords = function(t, e) {
        for(var r = 0; r < t.length; r++){
            var n = t[r];
            if (null != t[r]) {
                var o = n.getValue() % 30, i = n.getRowNumber();
                if (i > e.getRowCount()) t[r] = null;
                else switch(this._isLeft || (i += 2), i % 3){
                    case 0:
                        3 * o + 1 !== e.getRowCountUpperPart() && (t[r] = null);
                        break;
                    case 1:
                        Math.trunc(o / 3) === e.getErrorCorrectionLevel() && o % 3 === e.getRowCountLowerPart() || (t[r] = null);
                        break;
                    case 2:
                        o + 1 !== e.getColumnCount() && (t[r] = null);
                }
            }
        }
    }, e.prototype.isLeft = function() {
        return this._isLeft;
    }, e.prototype.toString = function() {
        return "IsLeft: " + this._isLeft + "\n" + t.prototype.toString.call(this);
    }, e;
}(Cn), Nn = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Dn = function() {
    function t(t, e) {
        this.ADJUST_ROW_NUMBER_SKIP = 2, this.barcodeMetadata = t, this.barcodeColumnCount = t.getColumnCount(), this.boundingBox = e, this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);
    }
    return t.prototype.getDetectionResultColumns = function() {
        this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]), this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);
        var t, e = sn.MAX_CODEWORDS_IN_BARCODE;
        do {
            t = e, e = this.adjustRowNumbersAndGetCount();
        }while (e > 0 && e < t)
        return this.detectionResultColumns;
    }, t.prototype.adjustIndicatorColumnRowNumbers = function(t) {
        null != t && t.adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);
    }, t.prototype.adjustRowNumbersAndGetCount = function() {
        var t = this.adjustRowNumbersByRow();
        if (0 === t) return 0;
        for(var e = 1; e < this.barcodeColumnCount + 1; e++)for(var r = this.detectionResultColumns[e].getCodewords(), n = 0; n < r.length; n++)null != r[n] && (r[n].hasValidRowNumber() || this.adjustRowNumbers(e, n, r));
        return t;
    }, t.prototype.adjustRowNumbersByRow = function() {
        return this.adjustRowNumbersFromBothRI(), this.adjustRowNumbersFromLRI() + this.adjustRowNumbersFromRRI();
    }, t.prototype.adjustRowNumbersFromBothRI = function() {
        if (null != this.detectionResultColumns[0] && null != this.detectionResultColumns[this.barcodeColumnCount + 1]) {
            for(var t = this.detectionResultColumns[0].getCodewords(), e = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords(), r = 0; r < t.length; r++)if (null != t[r] && null != e[r] && t[r].getRowNumber() === e[r].getRowNumber()) for(var n = 1; n <= this.barcodeColumnCount; n++){
                var o = this.detectionResultColumns[n].getCodewords()[r];
                null != o && (o.setRowNumber(t[r].getRowNumber()), o.hasValidRowNumber() || (this.detectionResultColumns[n].getCodewords()[r] = null));
            }
        }
    }, t.prototype.adjustRowNumbersFromRRI = function() {
        if (null == this.detectionResultColumns[this.barcodeColumnCount + 1]) return 0;
        for(var e = 0, r = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords(), n = 0; n < r.length; n++)if (null != r[n]) for(var o = r[n].getRowNumber(), i = 0, a = this.barcodeColumnCount + 1; a > 0 && i < this.ADJUST_ROW_NUMBER_SKIP; a--){
            var u = this.detectionResultColumns[a].getCodewords()[n];
            null != u && (i = t.adjustRowNumberIfValid(o, i, u), u.hasValidRowNumber() || e++);
        }
        return e;
    }, t.prototype.adjustRowNumbersFromLRI = function() {
        if (null == this.detectionResultColumns[0]) return 0;
        for(var e = 0, r = this.detectionResultColumns[0].getCodewords(), n = 0; n < r.length; n++)if (null != r[n]) for(var o = r[n].getRowNumber(), i = 0, a = 1; a < this.barcodeColumnCount + 1 && i < this.ADJUST_ROW_NUMBER_SKIP; a++){
            var u = this.detectionResultColumns[a].getCodewords()[n];
            null != u && (i = t.adjustRowNumberIfValid(o, i, u), u.hasValidRowNumber() || e++);
        }
        return e;
    }, t.adjustRowNumberIfValid = function(t, e, r) {
        return null == r || r.hasValidRowNumber() || (r.isValidRowNumber(t) ? (r.setRowNumber(t), e = 0) : ++e), e;
    }, t.prototype.adjustRowNumbers = function(e, r, n) {
        var o, i, a = n[r], u = this.detectionResultColumns[e - 1].getCodewords(), s = u;
        null != this.detectionResultColumns[e + 1] && (s = this.detectionResultColumns[e + 1].getCodewords());
        var c = new Array(14);
        c[2] = u[r], c[3] = s[r], r > 0 && (c[0] = n[r - 1], c[4] = u[r - 1], c[5] = s[r - 1]), r > 1 && (c[8] = n[r - 2], c[10] = u[r - 2], c[11] = s[r - 2]), r < n.length - 1 && (c[1] = n[r + 1], c[6] = u[r + 1], c[7] = s[r + 1]), r < n.length - 2 && (c[9] = n[r + 2], c[12] = u[r + 2], c[13] = s[r + 2]);
        try {
            for(var f = Nn(c), h = f.next(); !h.done; h = f.next()){
                var l = h.value;
                if (t.adjustRowNumber(a, l)) return;
            }
        } catch (t) {
            o = {
                error: t
            };
        } finally{
            try {
                h && !h.done && (i = f.return) && i.call(f);
            } finally{
                if (o) throw o.error;
            }
        }
    }, t.adjustRowNumber = function(t, e) {
        return null != e && !(!e.hasValidRowNumber() || e.getBucket() !== t.getBucket()) && (t.setRowNumber(e.getRowNumber()), !0);
    }, t.prototype.getBarcodeColumnCount = function() {
        return this.barcodeColumnCount;
    }, t.prototype.getBarcodeRowCount = function() {
        return this.barcodeMetadata.getRowCount();
    }, t.prototype.getBarcodeECLevel = function() {
        return this.barcodeMetadata.getErrorCorrectionLevel();
    }, t.prototype.setBoundingBox = function(t) {
        this.boundingBox = t;
    }, t.prototype.getBoundingBox = function() {
        return this.boundingBox;
    }, t.prototype.setDetectionResultColumn = function(t, e) {
        this.detectionResultColumns[t] = e;
    }, t.prototype.getDetectionResultColumn = function(t) {
        return this.detectionResultColumns[t];
    }, t.prototype.toString = function() {
        var t = this.detectionResultColumns[0];
        null == t && (t = this.detectionResultColumns[this.barcodeColumnCount + 1]);
        for(var e = new An, r = 0; r < t.getCodewords().length; r++){
            e.format("CW %3d:", r);
            for(var n = 0; n < this.barcodeColumnCount + 2; n++)if (null != this.detectionResultColumns[n]) {
                var o = this.detectionResultColumns[n].getCodewords()[r];
                null != o ? e.format(" %3d|%3d", o.getRowNumber(), o.getValue()) : e.format("    |   ");
            } else e.format("    |   ");
            e.format("%n");
        }
        return e.toString();
    }, t;
}(), Pn = function() {
    function t(e, r, n, o) {
        this.rowNumber = t.BARCODE_ROW_UNKNOWN, this.startX = Math.trunc(e), this.endX = Math.trunc(r), this.bucket = Math.trunc(n), this.value = Math.trunc(o);
    }
    return t.prototype.hasValidRowNumber = function() {
        return this.isValidRowNumber(this.rowNumber);
    }, t.prototype.isValidRowNumber = function(e) {
        return e !== t.BARCODE_ROW_UNKNOWN && this.bucket === e % 3 * 3;
    }, t.prototype.setRowNumberAsRowIndicatorColumn = function() {
        this.rowNumber = Math.trunc(3 * Math.trunc(this.value / 30) + Math.trunc(this.bucket / 3));
    }, t.prototype.getWidth = function() {
        return this.endX - this.startX;
    }, t.prototype.getStartX = function() {
        return this.startX;
    }, t.prototype.getEndX = function() {
        return this.endX;
    }, t.prototype.getBucket = function() {
        return this.bucket;
    }, t.prototype.getValue = function() {
        return this.value;
    }, t.prototype.getRowNumber = function() {
        return this.rowNumber;
    }, t.prototype.setRowNumber = function(t) {
        this.rowNumber = t;
    }, t.prototype.toString = function() {
        return this.rowNumber + "|" + this.value;
    }, t.BARCODE_ROW_UNKNOWN = -1, t;
}(), Mn = function() {
    function t() {}
    return t.initialize = function() {
        for(var e = 0; e < sn.SYMBOL_TABLE.length; e++)for(var r = sn.SYMBOL_TABLE[e], n = 1 & r, o = 0; o < sn.BARS_IN_MODULE; o++){
            for(var i = 0; (1 & r) === n;)i += 1, r >>= 1;
            n = 1 & r, t.RATIOS_TABLE[e] || (t.RATIOS_TABLE[e] = new Array(sn.BARS_IN_MODULE)), t.RATIOS_TABLE[e][sn.BARS_IN_MODULE - o - 1] = Math.fround(i / sn.MODULES_IN_CODEWORD);
        }
        this.bSymbolTableReady = !0;
    }, t.getDecodedValue = function(e) {
        var r = t.getDecodedCodewordValue(t.sampleBitCounts(e));
        return -1 !== r ? r : t.getClosestDecodedValue(e);
    }, t.sampleBitCounts = function(t) {
        for(var e = vt.sum(t), r = new Int32Array(sn.BARS_IN_MODULE), n = 0, o = 0, i = 0; i < sn.MODULES_IN_CODEWORD; i++){
            var a = e / (2 * sn.MODULES_IN_CODEWORD) + i * e / sn.MODULES_IN_CODEWORD;
            o + t[n] <= a && (o += t[n], n++), r[n]++;
        }
        return r;
    }, t.getDecodedCodewordValue = function(e) {
        var r = t.getBitValue(e);
        return -1 === sn.getCodeword(r) ? -1 : r;
    }, t.getBitValue = function(t) {
        for(var e = 0, r = 0; r < t.length; r++)for(var n = 0; n < t[r]; n++)e = e << 1 | (r % 2 == 0 ? 1 : 0);
        return Math.trunc(e);
    }, t.getClosestDecodedValue = function(e) {
        var r = vt.sum(e), n = new Array(sn.BARS_IN_MODULE);
        if (r > 1) for(var o = 0; o < n.length; o++)n[o] = Math.fround(e[o] / r);
        var i = mt.MAX_VALUE, a = -1;
        this.bSymbolTableReady || t.initialize();
        for(var u = 0; u < t.RATIOS_TABLE.length; u++){
            for(var s = 0, c = t.RATIOS_TABLE[u], f = 0; f < sn.BARS_IN_MODULE; f++){
                var h = Math.fround(c[f] - n[f]);
                if ((s += Math.fround(h * h)) >= i) break;
            }
            s < i && (i = s, a = sn.SYMBOL_TABLE[u]);
        }
        return a;
    }, t.bSymbolTableReady = !1, t.RATIOS_TABLE = new Array(sn.SYMBOL_TABLE.length).map(function(t) {
        return new Array(sn.BARS_IN_MODULE);
    }), t;
}(), Bn = function() {
    function t() {
        this.segmentCount = -1, this.fileSize = -1, this.timestamp = -1, this.checksum = -1;
    }
    return t.prototype.getSegmentIndex = function() {
        return this.segmentIndex;
    }, t.prototype.setSegmentIndex = function(t) {
        this.segmentIndex = t;
    }, t.prototype.getFileId = function() {
        return this.fileId;
    }, t.prototype.setFileId = function(t) {
        this.fileId = t;
    }, t.prototype.getOptionalData = function() {
        return this.optionalData;
    }, t.prototype.setOptionalData = function(t) {
        this.optionalData = t;
    }, t.prototype.isLastSegment = function() {
        return this.lastSegment;
    }, t.prototype.setLastSegment = function(t) {
        this.lastSegment = t;
    }, t.prototype.getSegmentCount = function() {
        return this.segmentCount;
    }, t.prototype.setSegmentCount = function(t) {
        this.segmentCount = t;
    }, t.prototype.getSender = function() {
        return this.sender || null;
    }, t.prototype.setSender = function(t) {
        this.sender = t;
    }, t.prototype.getAddressee = function() {
        return this.addressee || null;
    }, t.prototype.setAddressee = function(t) {
        this.addressee = t;
    }, t.prototype.getFileName = function() {
        return this.fileName;
    }, t.prototype.setFileName = function(t) {
        this.fileName = t;
    }, t.prototype.getFileSize = function() {
        return this.fileSize;
    }, t.prototype.setFileSize = function(t) {
        this.fileSize = t;
    }, t.prototype.getChecksum = function() {
        return this.checksum;
    }, t.prototype.setChecksum = function(t) {
        this.checksum = t;
    }, t.prototype.getTimestamp = function() {
        return this.timestamp;
    }, t.prototype.setTimestamp = function(t) {
        this.timestamp = t;
    }, t;
}(), Ln = function() {
    function t() {}
    return t.parseLong = function(t, e) {
        return void 0 === e && (e = void 0), parseInt(t, e);
    }, t;
}(), Fn = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), kn = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return Fn(e, t), e.kind = "NullPointerException", e;
}(s), xn = function() {
    function t() {}
    return t.prototype.writeBytes = function(t) {
        this.writeBytesOffset(t, 0, t.length);
    }, t.prototype.writeBytesOffset = function(t, e, r) {
        if (null == t) throw new kn;
        if (e < 0 || e > t.length || r < 0 || e + r > t.length || e + r < 0) throw new v;
        if (0 !== r) for(var n = 0; n < r; n++)this.write(t[e + n]);
    }, t.prototype.flush = function() {}, t.prototype.close = function() {}, t;
}(), Vn = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Un = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return Vn(e, t), e;
}(s), Hn = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Gn = function(t) {
    function e(e) {
        void 0 === e && (e = 32);
        var r = t.call(this) || this;
        if (r.count = 0, e < 0) throw new l("Negative initial size: " + e);
        return r.buf = new Uint8Array(e), r;
    }
    return Hn(e, t), e.prototype.ensureCapacity = function(t) {
        t - this.buf.length > 0 && this.grow(t);
    }, e.prototype.grow = function(t) {
        var e = this.buf.length << 1;
        if (e - t < 0 && (e = t), e < 0) {
            if (t < 0) throw new Un;
            e = I.MAX_VALUE;
        }
        this.buf = C.copyOfUint8Array(this.buf, e);
    }, e.prototype.write = function(t) {
        this.ensureCapacity(this.count + 1), this.buf[this.count] = t, this.count += 1;
    }, e.prototype.writeBytesOffset = function(t, e, r) {
        if (e < 0 || e > t.length || r < 0 || e + r - t.length > 0) throw new v;
        this.ensureCapacity(this.count + r), w.arraycopy(t, e, this.buf, this.count, r), this.count += r;
    }, e.prototype.writeTo = function(t) {
        t.writeBytesOffset(this.buf, 0, this.count);
    }, e.prototype.reset = function() {
        this.count = 0;
    }, e.prototype.toByteArray = function() {
        return C.copyOfUint8Array(this.buf, this.count);
    }, e.prototype.size = function() {
        return this.count;
    }, e.prototype.toString = function(t) {
        return t ? "string" == typeof t ? this.toString_string(t) : this.toString_number(t) : this.toString_void();
    }, e.prototype.toString_void = function() {
        return new String(this.buf).toString();
    }, e.prototype.toString_string = function(t) {
        return new String(this.buf).toString();
    }, e.prototype.toString_number = function(t) {
        return new String(this.buf).toString();
    }, e.prototype.close = function() {}, e;
}(xn);
function Xn() {
    if ("undefined" != typeof window) return window.BigInt || null;
    if ("undefined" != typeof global) return global.BigInt || null;
    if ("undefined" != typeof self) return self.BigInt || null;
    throw new Error("Can't search globals for BigInt!");
}
function Wn(t) {
    if (void 0 === Xr && (Xr = Xn()), null === Xr) throw new Error("BigInt is not supported!");
    return Xr(t);
}
!function(t) {
    t[t.ALPHA = 0] = "ALPHA", t[t.LOWER = 1] = "LOWER", t[t.MIXED = 2] = "MIXED", t[t.PUNCT = 3] = "PUNCT", t[t.ALPHA_SHIFT = 4] = "ALPHA_SHIFT", t[t.PUNCT_SHIFT = 5] = "PUNCT_SHIFT";
}(Gr || (Gr = {}));
var jn = function() {
    function t() {}
    return t.decode = function(e, r) {
        var n = new k(""), o = P.ISO8859_1;
        n.enableDecoding(o);
        for(var i = 1, a = e[i++], u = new Bn; i < e[0];){
            switch(a){
                case t.TEXT_COMPACTION_MODE_LATCH:
                    i = t.textCompaction(e, i, n);
                    break;
                case t.BYTE_COMPACTION_MODE_LATCH:
                case t.BYTE_COMPACTION_MODE_LATCH_6:
                    i = t.byteCompaction(a, e, o, i, n);
                    break;
                case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                    n.append(e[i++]);
                    break;
                case t.NUMERIC_COMPACTION_MODE_LATCH:
                    i = t.numericCompaction(e, i, n);
                    break;
                case t.ECI_CHARSET:
                    P.getCharacterSetECIByValue(e[i++]);
                    break;
                case t.ECI_GENERAL_PURPOSE:
                    i += 2;
                    break;
                case t.ECI_USER_DEFINED:
                    i++;
                    break;
                case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
                    i = t.decodeMacroBlock(e, i, u);
                    break;
                case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
                case t.MACRO_PDF417_TERMINATOR:
                    throw new R;
                default:
                    i--, i = t.textCompaction(e, i, n);
            }
            if (!(i < e.length)) throw R.getFormatInstance();
            a = e[i++];
        }
        if (0 === n.length()) throw R.getFormatInstance();
        var s = new at(null, n.toString(), null, r);
        return s.setOther(u), s;
    }, t.decodeMacroBlock = function(e, r, n) {
        if (r + t.NUMBER_OF_SEQUENCE_CODEWORDS > e[0]) throw R.getFormatInstance();
        for(var o = new Int32Array(t.NUMBER_OF_SEQUENCE_CODEWORDS), i = 0; i < t.NUMBER_OF_SEQUENCE_CODEWORDS; i++, r++)o[i] = e[r];
        n.setSegmentIndex(I.parseInt(t.decodeBase900toBase10(o, t.NUMBER_OF_SEQUENCE_CODEWORDS)));
        var a = new k;
        r = t.textCompaction(e, r, a), n.setFileId(a.toString());
        var u = -1;
        for(e[r] === t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD && (u = r + 1); r < e[0];)switch(e[r]){
            case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
                switch(e[++r]){
                    case t.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:
                        var s = new k;
                        r = t.textCompaction(e, r + 1, s), n.setFileName(s.toString());
                        break;
                    case t.MACRO_PDF417_OPTIONAL_FIELD_SENDER:
                        var c = new k;
                        r = t.textCompaction(e, r + 1, c), n.setSender(c.toString());
                        break;
                    case t.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:
                        var f = new k;
                        r = t.textCompaction(e, r + 1, f), n.setAddressee(f.toString());
                        break;
                    case t.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:
                        var h = new k;
                        r = t.numericCompaction(e, r + 1, h), n.setSegmentCount(I.parseInt(h.toString()));
                        break;
                    case t.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:
                        var l = new k;
                        r = t.numericCompaction(e, r + 1, l), n.setTimestamp(Ln.parseLong(l.toString()));
                        break;
                    case t.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:
                        var d = new k;
                        r = t.numericCompaction(e, r + 1, d), n.setChecksum(I.parseInt(d.toString()));
                        break;
                    case t.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:
                        var p = new k;
                        r = t.numericCompaction(e, r + 1, p), n.setFileSize(Ln.parseLong(p.toString()));
                        break;
                    default:
                        throw R.getFormatInstance();
                }
                break;
            case t.MACRO_PDF417_TERMINATOR:
                r++, n.setLastSegment(!0);
                break;
            default:
                throw R.getFormatInstance();
        }
        if (-1 !== u) {
            var g = r - u;
            n.isLastSegment() && g--, n.setOptionalData(C.copyOfRange(e, u, u + g));
        }
        return r;
    }, t.textCompaction = function(e, r, n) {
        for(var o = new Int32Array(2 * (e[0] - r)), i = new Int32Array(2 * (e[0] - r)), a = 0, u = !1; r < e[0] && !u;){
            var s = e[r++];
            if (s < t.TEXT_COMPACTION_MODE_LATCH) o[a] = s / 30, o[a + 1] = s % 30, a += 2;
            else switch(s){
                case t.TEXT_COMPACTION_MODE_LATCH:
                    o[a++] = t.TEXT_COMPACTION_MODE_LATCH;
                    break;
                case t.BYTE_COMPACTION_MODE_LATCH:
                case t.BYTE_COMPACTION_MODE_LATCH_6:
                case t.NUMERIC_COMPACTION_MODE_LATCH:
                case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
                case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
                case t.MACRO_PDF417_TERMINATOR:
                    r--, u = !0;
                    break;
                case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                    o[a] = t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE, s = e[r++], i[a] = s, a++;
            }
        }
        return t.decodeTextCompaction(o, i, a, n), r;
    }, t.decodeTextCompaction = function(e, r, n, o) {
        for(var i = Gr.ALPHA, a = Gr.ALPHA, u = 0; u < n;){
            var s = e[u], c = "";
            switch(i){
                case Gr.ALPHA:
                    if (s < 26) c = String.fromCharCode(65 + s);
                    else switch(s){
                        case 26:
                            c = " ";
                            break;
                        case t.LL:
                            i = Gr.LOWER;
                            break;
                        case t.ML:
                            i = Gr.MIXED;
                            break;
                        case t.PS:
                            a = i, i = Gr.PUNCT_SHIFT;
                            break;
                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                            o.append(r[u]);
                            break;
                        case t.TEXT_COMPACTION_MODE_LATCH:
                            i = Gr.ALPHA;
                    }
                    break;
                case Gr.LOWER:
                    if (s < 26) c = String.fromCharCode(97 + s);
                    else switch(s){
                        case 26:
                            c = " ";
                            break;
                        case t.AS:
                            a = i, i = Gr.ALPHA_SHIFT;
                            break;
                        case t.ML:
                            i = Gr.MIXED;
                            break;
                        case t.PS:
                            a = i, i = Gr.PUNCT_SHIFT;
                            break;
                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                            o.append(r[u]);
                            break;
                        case t.TEXT_COMPACTION_MODE_LATCH:
                            i = Gr.ALPHA;
                    }
                    break;
                case Gr.MIXED:
                    if (s < t.PL) c = t.MIXED_CHARS[s];
                    else switch(s){
                        case t.PL:
                            i = Gr.PUNCT;
                            break;
                        case 26:
                            c = " ";
                            break;
                        case t.LL:
                            i = Gr.LOWER;
                            break;
                        case t.AL:
                            i = Gr.ALPHA;
                            break;
                        case t.PS:
                            a = i, i = Gr.PUNCT_SHIFT;
                            break;
                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                            o.append(r[u]);
                            break;
                        case t.TEXT_COMPACTION_MODE_LATCH:
                            i = Gr.ALPHA;
                    }
                    break;
                case Gr.PUNCT:
                    if (s < t.PAL) c = t.PUNCT_CHARS[s];
                    else switch(s){
                        case t.PAL:
                            i = Gr.ALPHA;
                            break;
                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                            o.append(r[u]);
                            break;
                        case t.TEXT_COMPACTION_MODE_LATCH:
                            i = Gr.ALPHA;
                    }
                    break;
                case Gr.ALPHA_SHIFT:
                    if (i = a, s < 26) c = String.fromCharCode(65 + s);
                    else switch(s){
                        case 26:
                            c = " ";
                            break;
                        case t.TEXT_COMPACTION_MODE_LATCH:
                            i = Gr.ALPHA;
                    }
                    break;
                case Gr.PUNCT_SHIFT:
                    if (i = a, s < t.PAL) c = t.PUNCT_CHARS[s];
                    else switch(s){
                        case t.PAL:
                            i = Gr.ALPHA;
                            break;
                        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                            o.append(r[u]);
                            break;
                        case t.TEXT_COMPACTION_MODE_LATCH:
                            i = Gr.ALPHA;
                    }
            }
            "" !== c && o.append(c), u++;
        }
    }, t.byteCompaction = function(e, r, n, o, i) {
        var a = new Gn, u = 0, s = 0, c = !1;
        switch(e){
            case t.BYTE_COMPACTION_MODE_LATCH:
                for(var f = new Int32Array(6), h = r[o++]; o < r[0] && !c;)switch(f[u++] = h, s = 900 * s + h, h = r[o++]){
                    case t.TEXT_COMPACTION_MODE_LATCH:
                    case t.BYTE_COMPACTION_MODE_LATCH:
                    case t.NUMERIC_COMPACTION_MODE_LATCH:
                    case t.BYTE_COMPACTION_MODE_LATCH_6:
                    case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
                    case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
                    case t.MACRO_PDF417_TERMINATOR:
                        o--, c = !0;
                        break;
                    default:
                        if (u % 5 == 0 && u > 0) {
                            for(var l = 0; l < 6; ++l)a.write(Number(Wn(s) >> Wn(8 * (5 - l))));
                            s = 0, u = 0;
                        }
                }
                o === r[0] && h < t.TEXT_COMPACTION_MODE_LATCH && (f[u++] = h);
                for(var d = 0; d < u; d++)a.write(f[d]);
                break;
            case t.BYTE_COMPACTION_MODE_LATCH_6:
                for(; o < r[0] && !c;){
                    var p = r[o++];
                    if (p < t.TEXT_COMPACTION_MODE_LATCH) u++, s = 900 * s + p;
                    else switch(p){
                        case t.TEXT_COMPACTION_MODE_LATCH:
                        case t.BYTE_COMPACTION_MODE_LATCH:
                        case t.NUMERIC_COMPACTION_MODE_LATCH:
                        case t.BYTE_COMPACTION_MODE_LATCH_6:
                        case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
                        case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
                        case t.MACRO_PDF417_TERMINATOR:
                            o--, c = !0;
                    }
                    if (u % 5 == 0 && u > 0) {
                        for(l = 0; l < 6; ++l)a.write(Number(Wn(s) >> Wn(8 * (5 - l))));
                        s = 0, u = 0;
                    }
                }
        }
        return i.append(L.decode(a.toByteArray(), n)), o;
    }, t.numericCompaction = function(e, r, n) {
        for(var o = 0, i = !1, a = new Int32Array(t.MAX_NUMERIC_CODEWORDS); r < e[0] && !i;){
            var u = e[r++];
            if (r === e[0] && (i = !0), u < t.TEXT_COMPACTION_MODE_LATCH) a[o] = u, o++;
            else switch(u){
                case t.TEXT_COMPACTION_MODE_LATCH:
                case t.BYTE_COMPACTION_MODE_LATCH:
                case t.BYTE_COMPACTION_MODE_LATCH_6:
                case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
                case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
                case t.MACRO_PDF417_TERMINATOR:
                    r--, i = !0;
            }
            (o % t.MAX_NUMERIC_CODEWORDS == 0 || u === t.NUMERIC_COMPACTION_MODE_LATCH || i) && o > 0 && (n.append(t.decodeBase900toBase10(a, o)), o = 0);
        }
        return r;
    }, t.decodeBase900toBase10 = function(e, r) {
        for(var n = Wn(0), o = 0; o < r; o++)n += t.EXP900[r - o - 1] * Wn(e[o]);
        var i = n.toString();
        if ("1" !== i.charAt(0)) throw new R;
        return i.substring(1);
    }, t.TEXT_COMPACTION_MODE_LATCH = 900, t.BYTE_COMPACTION_MODE_LATCH = 901, t.NUMERIC_COMPACTION_MODE_LATCH = 902, t.BYTE_COMPACTION_MODE_LATCH_6 = 924, t.ECI_USER_DEFINED = 925, t.ECI_GENERAL_PURPOSE = 926, t.ECI_CHARSET = 927, t.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928, t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923, t.MACRO_PDF417_TERMINATOR = 922, t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913, t.MAX_NUMERIC_CODEWORDS = 15, t.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0, t.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1, t.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2, t.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3, t.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4, t.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5, t.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6, t.PL = 25, t.LL = 27, t.AS = 27, t.ML = 28, t.AL = 28, t.PS = 29, t.PAL = 29, t.PUNCT_CHARS = ";<>@[\\]_`~!\r\t,:\n-.$/\"|*()?{}'", t.MIXED_CHARS = "0123456789&\r\t,:#-.$/+%*=^", t.EXP900 = Xn() ? function() {
        var t = [];
        t[0] = Wn(1);
        var e = Wn(900);
        t[1] = e;
        for(var r = 2; r < 16; r++)t[r] = t[r - 1] * e;
        return t;
    }() : [], t.NUMBER_OF_SEQUENCE_CODEWORDS = 2, t;
}(), zn = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Yn = function() {
    function t() {}
    return t.decode = function(e, r, n, o, i, a, u) {
        for(var s, c = new vn(e, r, n, o, i), f = null, h = null, l = !0;; l = !1){
            if (null != r && (f = t.getRowIndicatorColumn(e, c, r, !0, a, u)), null != o && (h = t.getRowIndicatorColumn(e, c, o, !1, a, u)), null == (s = t.merge(f, h))) throw U.getNotFoundInstance();
            var d = s.getBoundingBox();
            if (!l || null == d || !(d.getMinY() < c.getMinY() || d.getMaxY() > c.getMaxY())) break;
            c = d;
        }
        s.setBoundingBox(c);
        var p = s.getBarcodeColumnCount() + 1;
        s.setDetectionResultColumn(0, f), s.setDetectionResultColumn(p, h);
        for(var g = null != f, y = 1; y <= p; y++){
            var w = g ? y : p - y;
            if (void 0 === s.getDetectionResultColumn(w)) {
                var _ = void 0;
                _ = 0 === w || w === p ? new Rn(c, 0 === w) : new Cn(c), s.setDetectionResultColumn(w, _);
                for(var v = -1, m = v, A = c.getMinY(); A <= c.getMaxY(); A++){
                    if ((v = t.getStartColumn(s, w, A, g)) < 0 || v > c.getMaxX()) {
                        if (-1 === m) continue;
                        v = m;
                    }
                    var E = t.detectCodeword(e, c.getMinX(), c.getMaxX(), g, v, A, a, u);
                    null != E && (_.setCodeword(A, E), m = v, a = Math.min(a, E.getWidth()), u = Math.max(u, E.getWidth()));
                }
            }
        }
        return t.createDecoderResult(s);
    }, t.merge = function(e, r) {
        if (null == e && null == r) return null;
        var n = t.getBarcodeMetadata(e, r);
        if (null == n) return null;
        var o = vn.merge(t.adjustBoundingBox(e), t.adjustBoundingBox(r));
        return new Dn(n, o);
    }, t.adjustBoundingBox = function(e) {
        var r, n;
        if (null == e) return null;
        var o = e.getRowHeights();
        if (null == o) return null;
        var i = t.getMax(o), a = 0;
        try {
            for(var u = zn(o), s = u.next(); !s.done; s = u.next()){
                var c = s.value;
                if (a += i - c, c > 0) break;
            }
        } catch (t) {
            r = {
                error: t
            };
        } finally{
            try {
                s && !s.done && (n = u.return) && n.call(u);
            } finally{
                if (r) throw r.error;
            }
        }
        for(var f = e.getCodewords(), h = 0; a > 0 && null == f[h]; h++)a--;
        var l = 0;
        for(h = o.length - 1; h >= 0 && (l += i - o[h], !(o[h] > 0)); h--);
        for(h = f.length - 1; l > 0 && null == f[h]; h--)l--;
        return e.getBoundingBox().addMissingRows(a, l, e.isLeft());
    }, t.getMax = function(t) {
        var e, r, n = -1;
        try {
            for(var o = zn(t), i = o.next(); !i.done; i = o.next()){
                var a = i.value;
                n = Math.max(n, a);
            }
        } catch (t) {
            e = {
                error: t
            };
        } finally{
            try {
                i && !i.done && (r = o.return) && r.call(o);
            } finally{
                if (e) throw e.error;
            }
        }
        return n;
    }, t.getBarcodeMetadata = function(t, e) {
        var r, n;
        return null == t || null == (r = t.getBarcodeMetadata()) ? null == e ? null : e.getBarcodeMetadata() : null == e || null == (n = e.getBarcodeMetadata()) ? r : r.getColumnCount() !== n.getColumnCount() && r.getErrorCorrectionLevel() !== n.getErrorCorrectionLevel() && r.getRowCount() !== n.getRowCount() ? null : r;
    }, t.getRowIndicatorColumn = function(e, r, n, o, i, a) {
        for(var u = new Rn(r, o), s = 0; s < 2; s++)for(var c = 0 === s ? 1 : -1, f = Math.trunc(Math.trunc(n.getX())), h = Math.trunc(Math.trunc(n.getY())); h <= r.getMaxY() && h >= r.getMinY(); h += c){
            var l = t.detectCodeword(e, 0, e.getWidth(), o, f, h, i, a);
            null != l && (u.setCodeword(h, l), f = o ? l.getStartX() : l.getEndX());
        }
        return u;
    }, t.adjustCodewordCount = function(e, r) {
        var n = r[0][1], o = n.getValue(), i = e.getBarcodeColumnCount() * e.getBarcodeRowCount() - t.getNumberOfECCodeWords(e.getBarcodeECLevel());
        if (0 === o.length) {
            if (i < 1 || i > sn.MAX_CODEWORDS_IN_BARCODE) throw U.getNotFoundInstance();
            n.setValue(i);
        } else o[0] !== i && n.setValue(i);
    }, t.createDecoderResult = function(e) {
        var r = t.createBarcodeMatrix(e);
        t.adjustCodewordCount(e, r);
        for(var n = new Array, o = new Int32Array(e.getBarcodeRowCount() * e.getBarcodeColumnCount()), i = [], a = new Array, u = 0; u < e.getBarcodeRowCount(); u++)for(var s = 0; s < e.getBarcodeColumnCount(); s++){
            var c = r[u][s + 1].getValue(), f = u * e.getBarcodeColumnCount() + s;
            0 === c.length ? n.push(f) : 1 === c.length ? o[f] = c[0] : (a.push(f), i.push(c));
        }
        for(var h = new Array(i.length), l = 0; l < h.length; l++)h[l] = i[l];
        return t.createDecoderResultFromAmbiguousValues(e.getBarcodeECLevel(), o, sn.toIntArray(n), sn.toIntArray(a), h);
    }, t.createDecoderResultFromAmbiguousValues = function(e, r, n, o, i) {
        for(var a = new Int32Array(o.length), u = 100; u-- > 0;){
            for(var s = 0; s < a.length; s++)r[o[s]] = i[s][a[s]];
            try {
                return t.decodeCodewords(r, e, n);
            } catch (t) {
                if (!(t instanceof g)) throw t;
            }
            if (0 === a.length) throw g.getChecksumInstance();
            for(s = 0; s < a.length; s++){
                if (a[s] < i[s].length - 1) {
                    a[s]++;
                    break;
                }
                if (a[s] = 0, s === a.length - 1) throw g.getChecksumInstance();
            }
        }
        throw g.getChecksumInstance();
    }, t.createBarcodeMatrix = function(t) {
        for(var e, r, n, o, i = Array.from({
            length: t.getBarcodeRowCount()
        }, function() {
            return new Array(t.getBarcodeColumnCount() + 2);
        }), a = 0; a < i.length; a++)for(var u = 0; u < i[a].length; u++)i[a][u] = new On;
        var s = 0;
        try {
            for(var c = zn(t.getDetectionResultColumns()), f = c.next(); !f.done; f = c.next()){
                var h = f.value;
                if (null != h) try {
                    for(var l = (n = void 0, zn(h.getCodewords())), d = l.next(); !d.done; d = l.next()){
                        var p = d.value;
                        if (null != p) {
                            var g = p.getRowNumber();
                            if (g >= 0) {
                                if (g >= i.length) continue;
                                i[g][s].setValue(p.getValue());
                            }
                        }
                    }
                } catch (t) {
                    n = {
                        error: t
                    };
                } finally{
                    try {
                        d && !d.done && (o = l.return) && o.call(l);
                    } finally{
                        if (n) throw n.error;
                    }
                }
                s++;
            }
        } catch (t) {
            e = {
                error: t
            };
        } finally{
            try {
                f && !f.done && (r = c.return) && r.call(c);
            } finally{
                if (e) throw e.error;
            }
        }
        return i;
    }, t.isValidBarcodeColumn = function(t, e) {
        return e >= 0 && e <= t.getBarcodeColumnCount() + 1;
    }, t.getStartColumn = function(e, r, n, o) {
        var i, a, u = o ? 1 : -1, s = null;
        if (t.isValidBarcodeColumn(e, r - u) && (s = e.getDetectionResultColumn(r - u).getCodeword(n)), null != s) return o ? s.getEndX() : s.getStartX();
        if (null != (s = e.getDetectionResultColumn(r).getCodewordNearby(n))) return o ? s.getStartX() : s.getEndX();
        if (t.isValidBarcodeColumn(e, r - u) && (s = e.getDetectionResultColumn(r - u).getCodewordNearby(n)), null != s) return o ? s.getEndX() : s.getStartX();
        for(var c = 0; t.isValidBarcodeColumn(e, r - u);){
            r -= u;
            try {
                for(var f = (i = void 0, zn(e.getDetectionResultColumn(r).getCodewords())), h = f.next(); !h.done; h = f.next()){
                    var l = h.value;
                    if (null != l) return (o ? l.getEndX() : l.getStartX()) + u * c * (l.getEndX() - l.getStartX());
                }
            } catch (t) {
                i = {
                    error: t
                };
            } finally{
                try {
                    h && !h.done && (a = f.return) && a.call(f);
                } finally{
                    if (i) throw i.error;
                }
            }
            c++;
        }
        return o ? e.getBoundingBox().getMinX() : e.getBoundingBox().getMaxX();
    }, t.detectCodeword = function(e, r, n, o, i, a, u, s) {
        i = t.adjustCodewordStartColumn(e, r, n, o, i, a);
        var c, f = t.getModuleBitCount(e, r, n, o, i, a);
        if (null == f) return null;
        var h = vt.sum(f);
        if (o) c = i + h;
        else {
            for(var l = 0; l < f.length / 2; l++){
                var d = f[l];
                f[l] = f[f.length - 1 - l], f[f.length - 1 - l] = d;
            }
            i = (c = i) - h;
        }
        if (!t.checkCodewordSkew(h, u, s)) return null;
        var p = Mn.getDecodedValue(f), g = sn.getCodeword(p);
        return -1 === g ? null : new Pn(i, c, t.getCodewordBucketNumber(p), g);
    }, t.getModuleBitCount = function(t, e, r, n, o, i) {
        for(var a = o, u = new Int32Array(8), s = 0, c = n ? 1 : -1, f = n; (n ? a < r : a >= e) && s < u.length;)t.get(a, i) === f ? (u[s]++, a += c) : (s++, f = !f);
        return s === u.length || a === (n ? r : e) && s === u.length - 1 ? u : null;
    }, t.getNumberOfECCodeWords = function(t) {
        return 2 << t;
    }, t.adjustCodewordStartColumn = function(e, r, n, o, i, a) {
        for(var u = i, s = o ? -1 : 1, c = 0; c < 2; c++){
            for(; (o ? u >= r : u < n) && o === e.get(u, a);){
                if (Math.abs(i - u) > t.CODEWORD_SKEW_SIZE) return i;
                u += s;
            }
            s = -s, o = !o;
        }
        return u;
    }, t.checkCodewordSkew = function(e, r, n) {
        return r - t.CODEWORD_SKEW_SIZE <= e && e <= n + t.CODEWORD_SKEW_SIZE;
    }, t.decodeCodewords = function(e, r, n) {
        if (0 === e.length) throw R.getFormatInstance();
        var o = 1 << r + 1, i = t.correctErrors(e, n, o);
        t.verifyCodewordCount(e, o);
        var a = jn.decode(e, "" + r);
        return a.setErrorsCorrected(i), a.setErasures(n.length), a;
    }, t.correctErrors = function(e, r, n) {
        if (null != r && r.length > n / 2 + t.MAX_ERRORS || n < 0 || n > t.MAX_EC_CODEWORDS) throw g.getChecksumInstance();
        return t.errorCorrection.decode(e, n, r);
    }, t.verifyCodewordCount = function(t, e) {
        if (t.length < 4) throw R.getFormatInstance();
        var r = t[0];
        if (r > t.length) throw R.getFormatInstance();
        if (0 === r) {
            if (!(e < t.length)) throw R.getFormatInstance();
            t[0] = t.length - e;
        }
    }, t.getBitCountForCodeword = function(t) {
        for(var e = new Int32Array(8), r = 0, n = e.length - 1; !((1 & t) !== r && (r = 1 & t, --n < 0));)e[n]++, t >>= 1;
        return e;
    }, t.getCodewordBucketNumber = function(t) {
        return t instanceof Int32Array ? this.getCodewordBucketNumber_Int32Array(t) : this.getCodewordBucketNumber_number(t);
    }, t.getCodewordBucketNumber_number = function(e) {
        return t.getCodewordBucketNumber(t.getBitCountForCodeword(e));
    }, t.getCodewordBucketNumber_Int32Array = function(t) {
        return (t[0] - t[2] + t[4] - t[6] + 9) % 9;
    }, t.toString = function(t) {
        for(var e = new An, r = 0; r < t.length; r++){
            e.format("Row %2d: ", r);
            for(var n = 0; n < t[r].length; n++){
                var o = t[r][n];
                0 === o.getValue().length ? e.format("        ", null) : e.format("%4d(%2d)", o.getValue()[0], o.getConfidence(o.getValue()[0]));
            }
            e.format("%n");
        }
        return e.toString();
    }, t.CODEWORD_SKEW_SIZE = 2, t.MAX_ERRORS = 3, t.MAX_EC_CODEWORDS = 512, t.errorCorrection = new _n, t;
}(), Zn = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Kn = function() {
    function t() {}
    return t.prototype.decode = function(e, r) {
        void 0 === r && (r = null);
        var n = t.decode(e, r, !1);
        if (null == n || 0 === n.length || null == n[0]) throw U.getNotFoundInstance();
        return n[0];
    }, t.prototype.decodeMultiple = function(e, r) {
        void 0 === r && (r = null);
        try {
            return t.decode(e, r, !0);
        } catch (t) {
            if (t instanceof R || t instanceof g) throw U.getNotFoundInstance();
            throw t;
        }
    }, t.decode = function(e, r, n) {
        var o, i, a = new Array, u = hn.detectMultiple(e, r, n);
        try {
            for(var s = Zn(u.getPoints()), c = s.next(); !c.done; c = s.next()){
                var f = c.value, h = Yn.decode(u.getBits(), f[4], f[5], f[6], f[7], t.getMinCodewordWidth(f), t.getMaxCodewordWidth(f)), l = new et(h.getText(), h.getRawBytes(), void 0, f, nt.PDF_417);
                l.putMetadata(it.ERROR_CORRECTION_LEVEL, h.getECLevel());
                var d = h.getOther();
                null != d && l.putMetadata(it.PDF417_EXTRA_METADATA, d), a.push(l);
            }
        } catch (t) {
            o = {
                error: t
            };
        } finally{
            try {
                c && !c.done && (i = s.return) && i.call(s);
            } finally{
                if (o) throw o.error;
            }
        }
        return a.map(function(t) {
            return t;
        });
    }, t.getMaxWidth = function(t, e) {
        return null == t || null == e ? 0 : Math.trunc(Math.abs(t.getX() - e.getX()));
    }, t.getMinWidth = function(t, e) {
        return null == t || null == e ? I.MAX_VALUE : Math.trunc(Math.abs(t.getX() - e.getX()));
    }, t.getMaxCodewordWidth = function(e) {
        return Math.floor(Math.max(Math.max(t.getMaxWidth(e[0], e[4]), t.getMaxWidth(e[6], e[2]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN), Math.max(t.getMaxWidth(e[1], e[5]), t.getMaxWidth(e[7], e[3]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN)));
    }, t.getMinCodewordWidth = function(e) {
        return Math.floor(Math.min(Math.min(t.getMinWidth(e[0], e[4]), t.getMinWidth(e[6], e[2]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN), Math.min(t.getMinWidth(e[1], e[5]), t.getMinWidth(e[7], e[3]) * sn.MODULES_IN_CODEWORD / sn.MODULES_IN_STOP_PATTERN)));
    }, t.prototype.reset = function() {}, t;
}(), qn = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Qn = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return qn(e, t), e.kind = "ReaderException", e;
}(s), Jn = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, $n = function() {
    function t() {}
    return t.prototype.decode = function(t, e) {
        return this.setHints(e), this.decodeInternal(t);
    }, t.prototype.decodeWithState = function(t) {
        return null !== this.readers && void 0 !== this.readers || this.setHints(null), this.decodeInternal(t);
    }, t.prototype.setHints = function(t) {
        this.hints = t;
        var e = null != t && void 0 !== t.get(T.TRY_HARDER), r = null == t ? null : t.get(T.POSSIBLE_FORMATS), n = new Array;
        if (null != r) {
            var o = r.some(function(t) {
                return t === nt.UPC_A || t === nt.UPC_E || t === nt.EAN_13 || t === nt.EAN_8 || t === nt.CODABAR || t === nt.CODE_39 || t === nt.CODE_93 || t === nt.CODE_128 || t === nt.ITF || t === nt.RSS_14 || t === nt.RSS_EXPANDED;
            });
            o && !e && n.push(new fr(t)), r.includes(nt.QR_CODE) && n.push(new an), r.includes(nt.DATA_MATRIX) && n.push(new Or), r.includes(nt.AZTEC) && n.push(new Mt), r.includes(nt.PDF_417) && n.push(new Kn), o && e && n.push(new fr(t));
        }
        0 === n.length && (e || n.push(new fr(t)), n.push(new an), n.push(new Or), n.push(new Mt), n.push(new Kn), e && n.push(new fr(t))), this.readers = n;
    }, t.prototype.reset = function() {
        var t, e;
        if (null !== this.readers) try {
            for(var r = Jn(this.readers), n = r.next(); !n.done; n = r.next()){
                n.value.reset();
            }
        } catch (e) {
            t = {
                error: e
            };
        } finally{
            try {
                n && !n.done && (e = r.return) && e.call(r);
            } finally{
                if (t) throw t.error;
            }
        }
    }, t.prototype.decodeInternal = function(t) {
        var e, r;
        if (null === this.readers) throw new Qn("No readers where selected, nothing can be read.");
        try {
            for(var n = Jn(this.readers), o = n.next(); !o.done; o = n.next()){
                var i = o.value;
                try {
                    return i.decode(t, this.hints);
                } catch (t) {
                    if (t instanceof Qn) continue;
                }
            }
        } catch (t) {
            e = {
                error: t
            };
        } finally{
            try {
                o && !o.done && (r = n.return) && r.call(n);
            } finally{
                if (e) throw e.error;
            }
        }
        throw new U("No MultiFormat Readers were able to detect the code.");
    }, t;
}(), to = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r) {
        void 0 === e && (e = null), void 0 === r && (r = 500);
        var n = new $n;
        return n.setHints(e), t.call(this, n, r) || this;
    }
    to(e, t), e.prototype.decodeBitmap = function(t) {
        return this.reader.decodeWithState(t);
    };
}(tt);
var eo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e) {
        return void 0 === e && (e = 500), t.call(this, new Kn, e) || this;
    }
    eo(e, t);
}(tt);
var ro, no = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e) {
        return void 0 === e && (e = 500), t.call(this, new an, e) || this;
    }
    no(e, t);
}(tt), function(t) {
    t[t.ERROR_CORRECTION = 0] = "ERROR_CORRECTION", t[t.CHARACTER_SET = 1] = "CHARACTER_SET", t[t.DATA_MATRIX_SHAPE = 2] = "DATA_MATRIX_SHAPE", t[t.MIN_SIZE = 3] = "MIN_SIZE", t[t.MAX_SIZE = 4] = "MAX_SIZE", t[t.MARGIN = 5] = "MARGIN", t[t.PDF417_COMPACT = 6] = "PDF417_COMPACT", t[t.PDF417_COMPACTION = 7] = "PDF417_COMPACTION", t[t.PDF417_DIMENSIONS = 8] = "PDF417_DIMENSIONS", t[t.AZTEC_LAYERS = 9] = "AZTEC_LAYERS", t[t.QR_VERSION = 10] = "QR_VERSION";
}(ro || (ro = {}));
var oo = ro, io = function() {
    function t(t) {
        this.field = t, this.cachedGenerators = [], this.cachedGenerators.push(new st(t, Int32Array.from([
            1
        ])));
    }
    return t.prototype.buildGenerator = function(t) {
        var e = this.cachedGenerators;
        if (t >= e.length) for(var r = e[e.length - 1], n = this.field, o = e.length; o <= t; o++){
            var i = r.multiply(new st(n, Int32Array.from([
                1,
                n.exp(o - 1 + n.getGeneratorBase())
            ])));
            e.push(i), r = i;
        }
        return e[t];
    }, t.prototype.encode = function(t, e) {
        if (0 === e) throw new l("No error correction bytes");
        var r = t.length - e;
        if (r <= 0) throw new l("No data bytes provided");
        var n = this.buildGenerator(e), o = new Int32Array(r);
        w.arraycopy(t, 0, o, 0, r);
        for(var i = new st(this.field, o), a = (i = i.multiplyByMonomial(e, 1)).divide(n)[1].getCoefficients(), u = e - a.length, s = 0; s < u; s++)t[r + s] = 0;
        w.arraycopy(a, 0, t, r + u, a.length);
    }, t;
}(), ao = function() {
    function t() {}
    return t.applyMaskPenaltyRule1 = function(e) {
        return t.applyMaskPenaltyRule1Internal(e, !0) + t.applyMaskPenaltyRule1Internal(e, !1);
    }, t.applyMaskPenaltyRule2 = function(e) {
        for(var r = 0, n = e.getArray(), o = e.getWidth(), i = e.getHeight(), a = 0; a < i - 1; a++)for(var u = n[a], s = 0; s < o - 1; s++){
            var c = u[s];
            c === u[s + 1] && c === n[a + 1][s] && c === n[a + 1][s + 1] && r++;
        }
        return t.N2 * r;
    }, t.applyMaskPenaltyRule3 = function(e) {
        for(var r = 0, n = e.getArray(), o = e.getWidth(), i = e.getHeight(), a = 0; a < i; a++)for(var u = 0; u < o; u++){
            var s = n[a];
            u + 6 < o && 1 === s[u] && 0 === s[u + 1] && 1 === s[u + 2] && 1 === s[u + 3] && 1 === s[u + 4] && 0 === s[u + 5] && 1 === s[u + 6] && (t.isWhiteHorizontal(s, u - 4, u) || t.isWhiteHorizontal(s, u + 7, u + 11)) && r++, a + 6 < i && 1 === n[a][u] && 0 === n[a + 1][u] && 1 === n[a + 2][u] && 1 === n[a + 3][u] && 1 === n[a + 4][u] && 0 === n[a + 5][u] && 1 === n[a + 6][u] && (t.isWhiteVertical(n, u, a - 4, a) || t.isWhiteVertical(n, u, a + 7, a + 11)) && r++;
        }
        return r * t.N3;
    }, t.isWhiteHorizontal = function(t, e, r) {
        e = Math.max(e, 0), r = Math.min(r, t.length);
        for(var n = e; n < r; n++)if (1 === t[n]) return !1;
        return !0;
    }, t.isWhiteVertical = function(t, e, r, n) {
        r = Math.max(r, 0), n = Math.min(n, t.length);
        for(var o = r; o < n; o++)if (1 === t[o][e]) return !1;
        return !0;
    }, t.applyMaskPenaltyRule4 = function(e) {
        for(var r = 0, n = e.getArray(), o = e.getWidth(), i = e.getHeight(), a = 0; a < i; a++)for(var u = n[a], s = 0; s < o; s++)1 === u[s] && r++;
        var c = e.getHeight() * e.getWidth();
        return Math.floor(10 * Math.abs(2 * r - c) / c) * t.N4;
    }, t.getDataMaskBit = function(t, e, r) {
        var n, o;
        switch(t){
            case 0:
                n = r + e & 1;
                break;
            case 1:
                n = 1 & r;
                break;
            case 2:
                n = e % 3;
                break;
            case 3:
                n = (r + e) % 3;
                break;
            case 4:
                n = Math.floor(r / 2) + Math.floor(e / 3) & 1;
                break;
            case 5:
                n = (1 & (o = r * e)) + o % 3;
                break;
            case 6:
                n = (1 & (o = r * e)) + o % 3 & 1;
                break;
            case 7:
                n = (o = r * e) % 3 + (r + e & 1) & 1;
                break;
            default:
                throw new l("Invalid mask pattern: " + t);
        }
        return 0 === n;
    }, t.applyMaskPenaltyRule1Internal = function(e, r) {
        for(var n = 0, o = r ? e.getHeight() : e.getWidth(), i = r ? e.getWidth() : e.getHeight(), a = e.getArray(), u = 0; u < o; u++){
            for(var s = 0, c = -1, f = 0; f < i; f++){
                var h = r ? a[u][f] : a[f][u];
                h === c ? s++ : (s >= 5 && (n += t.N1 + (s - 5)), s = 1, c = h);
            }
            s >= 5 && (n += t.N1 + (s - 5));
        }
        return n;
    }, t.N1 = 3, t.N2 = 3, t.N3 = 40, t.N4 = 10, t;
}(), uo = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, so = function() {
    function t(t, e) {
        this.width = t, this.height = e;
        for(var r = new Array(e), n = 0; n !== e; n++)r[n] = new Uint8Array(t);
        this.bytes = r;
    }
    return t.prototype.getHeight = function() {
        return this.height;
    }, t.prototype.getWidth = function() {
        return this.width;
    }, t.prototype.get = function(t, e) {
        return this.bytes[e][t];
    }, t.prototype.getArray = function() {
        return this.bytes;
    }, t.prototype.setNumber = function(t, e, r) {
        this.bytes[e][t] = r;
    }, t.prototype.setBoolean = function(t, e, r) {
        this.bytes[e][t] = r ? 1 : 0;
    }, t.prototype.clear = function(t) {
        var e, r;
        try {
            for(var n = uo(this.bytes), o = n.next(); !o.done; o = n.next()){
                var i = o.value;
                C.fill(i, t);
            }
        } catch (t) {
            e = {
                error: t
            };
        } finally{
            try {
                o && !o.done && (r = n.return) && r.call(n);
            } finally{
                if (e) throw e.error;
            }
        }
    }, t.prototype.equals = function(e) {
        if (!(e instanceof t)) return !1;
        var r = e;
        if (this.width !== r.width) return !1;
        if (this.height !== r.height) return !1;
        for(var n = 0, o = this.height; n < o; ++n)for(var i = this.bytes[n], a = r.bytes[n], u = 0, s = this.width; u < s; ++u)if (i[u] !== a[u]) return !1;
        return !0;
    }, t.prototype.toString = function() {
        for(var t = new k, e = 0, r = this.height; e < r; ++e){
            for(var n = this.bytes[e], o = 0, i = this.width; o < i; ++o)switch(n[o]){
                case 0:
                    t.append(" 0");
                    break;
                case 1:
                    t.append(" 1");
                    break;
                default:
                    t.append("  ");
            }
            t.append("\n");
        }
        return t.toString();
    }, t;
}(), co = function() {
    function t() {
        this.maskPattern = -1;
    }
    return t.prototype.getMode = function() {
        return this.mode;
    }, t.prototype.getECLevel = function() {
        return this.ecLevel;
    }, t.prototype.getVersion = function() {
        return this.version;
    }, t.prototype.getMaskPattern = function() {
        return this.maskPattern;
    }, t.prototype.getMatrix = function() {
        return this.matrix;
    }, t.prototype.toString = function() {
        var t = new k;
        return t.append("<<\n"), t.append(" mode: "), t.append(this.mode ? this.mode.toString() : "null"), t.append("\n ecLevel: "), t.append(this.ecLevel ? this.ecLevel.toString() : "null"), t.append("\n version: "), t.append(this.version ? this.version.toString() : "null"), t.append("\n maskPattern: "), t.append(this.maskPattern.toString()), this.matrix ? (t.append("\n matrix:\n"), t.append(this.matrix.toString())) : t.append("\n matrix: null\n"), t.append(">>\n"), t.toString();
    }, t.prototype.setMode = function(t) {
        this.mode = t;
    }, t.prototype.setECLevel = function(t) {
        this.ecLevel = t;
    }, t.prototype.setVersion = function(t) {
        this.version = t;
    }, t.prototype.setMaskPattern = function(t) {
        this.maskPattern = t;
    }, t.prototype.setMatrix = function(t) {
        this.matrix = t;
    }, t.isValidMaskPattern = function(e) {
        return e >= 0 && e < t.NUM_MASK_PATTERNS;
    }, t.NUM_MASK_PATTERNS = 8, t;
}(), fo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), ho = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return fo(e, t), e.kind = "WriterException", e;
}(s), lo = function() {
    function t() {}
    return t.clearMatrix = function(t) {
        t.clear(255);
    }, t.buildMatrix = function(e, r, n, o, i) {
        t.clearMatrix(i), t.embedBasicPatterns(n, i), t.embedTypeInfo(r, o, i), t.maybeEmbedVersionInfo(n, i), t.embedDataBits(e, o, i);
    }, t.embedBasicPatterns = function(e, r) {
        t.embedPositionDetectionPatternsAndSeparators(r), t.embedDarkDotAtLeftBottomCorner(r), t.maybeEmbedPositionAdjustmentPatterns(e, r), t.embedTimingPatterns(r);
    }, t.embedTypeInfo = function(e, r, n) {
        var o = new S;
        t.makeTypeInfoBits(e, r, o);
        for(var i = 0, a = o.getSize(); i < a; ++i){
            var u = o.get(o.getSize() - 1 - i), s = t.TYPE_INFO_COORDINATES[i], c = s[0], f = s[1];
            if (n.setBoolean(c, f, u), i < 8) {
                var h = n.getWidth() - i - 1, l = 8;
                n.setBoolean(h, l, u);
            } else {
                h = 8, l = n.getHeight() - 7 + (i - 8);
                n.setBoolean(h, l, u);
            }
        }
    }, t.maybeEmbedVersionInfo = function(e, r) {
        if (!(e.getVersionNumber() < 7)) {
            var n = new S;
            t.makeVersionInfoBits(e, n);
            for(var o = 17, i = 0; i < 6; ++i)for(var a = 0; a < 3; ++a){
                var u = n.get(o);
                o--, r.setBoolean(i, r.getHeight() - 11 + a, u), r.setBoolean(r.getHeight() - 11 + a, i, u);
            }
        }
    }, t.embedDataBits = function(e, r, n) {
        for(var o = 0, i = -1, a = n.getWidth() - 1, u = n.getHeight() - 1; a > 0;){
            for(6 === a && (a -= 1); u >= 0 && u < n.getHeight();){
                for(var s = 0; s < 2; ++s){
                    var c = a - s;
                    if (t.isEmpty(n.get(c, u))) {
                        var f = void 0;
                        o < e.getSize() ? (f = e.get(o), ++o) : f = !1, 255 !== r && ao.getDataMaskBit(r, c, u) && (f = !f), n.setBoolean(c, u, f);
                    }
                }
                u += i;
            }
            u += i = -i, a -= 2;
        }
        if (o !== e.getSize()) throw new ho("Not all bits consumed: " + o + "/" + e.getSize());
    }, t.findMSBSet = function(t) {
        return 32 - I.numberOfLeadingZeros(t);
    }, t.calculateBCHCode = function(e, r) {
        if (0 === r) throw new l("0 polynomial");
        var n = t.findMSBSet(r);
        for(e <<= n - 1; t.findMSBSet(e) >= n;)e ^= r << t.findMSBSet(e) - n;
        return e;
    }, t.makeTypeInfoBits = function(e, r, n) {
        if (!co.isValidMaskPattern(r)) throw new ho("Invalid mask pattern");
        var o = e.getBits() << 3 | r;
        n.appendBits(o, 5);
        var i = t.calculateBCHCode(o, t.TYPE_INFO_POLY);
        n.appendBits(i, 10);
        var a = new S;
        if (a.appendBits(t.TYPE_INFO_MASK_PATTERN, 15), n.xor(a), 15 !== n.getSize()) throw new ho("should not happen but we got: " + n.getSize());
    }, t.makeVersionInfoBits = function(e, r) {
        r.appendBits(e.getVersionNumber(), 6);
        var n = t.calculateBCHCode(e.getVersionNumber(), t.VERSION_INFO_POLY);
        if (r.appendBits(n, 12), 18 !== r.getSize()) throw new ho("should not happen but we got: " + r.getSize());
    }, t.isEmpty = function(t) {
        return 255 === t;
    }, t.embedTimingPatterns = function(e) {
        for(var r = 8; r < e.getWidth() - 8; ++r){
            var n = (r + 1) % 2;
            t.isEmpty(e.get(r, 6)) && e.setNumber(r, 6, n), t.isEmpty(e.get(6, r)) && e.setNumber(6, r, n);
        }
    }, t.embedDarkDotAtLeftBottomCorner = function(t) {
        if (0 === t.get(8, t.getHeight() - 8)) throw new ho;
        t.setNumber(8, t.getHeight() - 8, 1);
    }, t.embedHorizontalSeparationPattern = function(e, r, n) {
        for(var o = 0; o < 8; ++o){
            if (!t.isEmpty(n.get(e + o, r))) throw new ho;
            n.setNumber(e + o, r, 0);
        }
    }, t.embedVerticalSeparationPattern = function(e, r, n) {
        for(var o = 0; o < 7; ++o){
            if (!t.isEmpty(n.get(e, r + o))) throw new ho;
            n.setNumber(e, r + o, 0);
        }
    }, t.embedPositionAdjustmentPattern = function(e, r, n) {
        for(var o = 0; o < 5; ++o)for(var i = t.POSITION_ADJUSTMENT_PATTERN[o], a = 0; a < 5; ++a)n.setNumber(e + a, r + o, i[a]);
    }, t.embedPositionDetectionPattern = function(e, r, n) {
        for(var o = 0; o < 7; ++o)for(var i = t.POSITION_DETECTION_PATTERN[o], a = 0; a < 7; ++a)n.setNumber(e + a, r + o, i[a]);
    }, t.embedPositionDetectionPatternsAndSeparators = function(e) {
        var r = t.POSITION_DETECTION_PATTERN[0].length;
        t.embedPositionDetectionPattern(0, 0, e), t.embedPositionDetectionPattern(e.getWidth() - r, 0, e), t.embedPositionDetectionPattern(0, e.getWidth() - r, e);
        t.embedHorizontalSeparationPattern(0, 7, e), t.embedHorizontalSeparationPattern(e.getWidth() - 8, 7, e), t.embedHorizontalSeparationPattern(0, e.getWidth() - 8, e);
        t.embedVerticalSeparationPattern(7, 0, e), t.embedVerticalSeparationPattern(e.getHeight() - 7 - 1, 0, e), t.embedVerticalSeparationPattern(7, e.getHeight() - 7, e);
    }, t.maybeEmbedPositionAdjustmentPatterns = function(e, r) {
        if (!(e.getVersionNumber() < 2)) for(var n = e.getVersionNumber() - 1, o = t.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[n], i = 0, a = o.length; i !== a; i++){
            var u = o[i];
            if (u >= 0) for(var s = 0; s !== a; s++){
                var c = o[s];
                c >= 0 && t.isEmpty(r.get(c, u)) && t.embedPositionAdjustmentPattern(c - 2, u - 2, r);
            }
        }
    }, t.POSITION_DETECTION_PATTERN = Array.from([
        Int32Array.from([
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ]),
        Int32Array.from([
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]),
        Int32Array.from([
            1,
            0,
            1,
            1,
            1,
            0,
            1
        ]),
        Int32Array.from([
            1,
            0,
            1,
            1,
            1,
            0,
            1
        ]),
        Int32Array.from([
            1,
            0,
            1,
            1,
            1,
            0,
            1
        ]),
        Int32Array.from([
            1,
            0,
            0,
            0,
            0,
            0,
            1
        ]),
        Int32Array.from([
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ])
    ]), t.POSITION_ADJUSTMENT_PATTERN = Array.from([
        Int32Array.from([
            1,
            1,
            1,
            1,
            1
        ]),
        Int32Array.from([
            1,
            0,
            0,
            0,
            1
        ]),
        Int32Array.from([
            1,
            0,
            1,
            0,
            1
        ]),
        Int32Array.from([
            1,
            0,
            0,
            0,
            1
        ]),
        Int32Array.from([
            1,
            1,
            1,
            1,
            1
        ])
    ]), t.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([
        Int32Array.from([
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            18,
            -1,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            22,
            -1,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            26,
            -1,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            -1,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            34,
            -1,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            22,
            38,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            24,
            42,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            26,
            46,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            28,
            50,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            54,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            32,
            58,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            34,
            62,
            -1,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            26,
            46,
            66,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            26,
            48,
            70,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            26,
            50,
            74,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            54,
            78,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            56,
            82,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            58,
            86,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            34,
            62,
            90,
            -1,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            28,
            50,
            72,
            94,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            26,
            50,
            74,
            98,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            54,
            78,
            102,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            28,
            54,
            80,
            106,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            32,
            58,
            84,
            110,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            58,
            86,
            114,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            34,
            62,
            90,
            118,
            -1,
            -1
        ]),
        Int32Array.from([
            6,
            26,
            50,
            74,
            98,
            122,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            54,
            78,
            102,
            126,
            -1
        ]),
        Int32Array.from([
            6,
            26,
            52,
            78,
            104,
            130,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            56,
            82,
            108,
            134,
            -1
        ]),
        Int32Array.from([
            6,
            34,
            60,
            86,
            112,
            138,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            58,
            86,
            114,
            142,
            -1
        ]),
        Int32Array.from([
            6,
            34,
            62,
            90,
            118,
            146,
            -1
        ]),
        Int32Array.from([
            6,
            30,
            54,
            78,
            102,
            126,
            150
        ]),
        Int32Array.from([
            6,
            24,
            50,
            76,
            102,
            128,
            154
        ]),
        Int32Array.from([
            6,
            28,
            54,
            80,
            106,
            132,
            158
        ]),
        Int32Array.from([
            6,
            32,
            58,
            84,
            110,
            136,
            162
        ]),
        Int32Array.from([
            6,
            26,
            54,
            82,
            110,
            138,
            166
        ]),
        Int32Array.from([
            6,
            30,
            58,
            86,
            114,
            142,
            170
        ])
    ]), t.TYPE_INFO_COORDINATES = Array.from([
        Int32Array.from([
            8,
            0
        ]),
        Int32Array.from([
            8,
            1
        ]),
        Int32Array.from([
            8,
            2
        ]),
        Int32Array.from([
            8,
            3
        ]),
        Int32Array.from([
            8,
            4
        ]),
        Int32Array.from([
            8,
            5
        ]),
        Int32Array.from([
            8,
            7
        ]),
        Int32Array.from([
            8,
            8
        ]),
        Int32Array.from([
            7,
            8
        ]),
        Int32Array.from([
            5,
            8
        ]),
        Int32Array.from([
            4,
            8
        ]),
        Int32Array.from([
            3,
            8
        ]),
        Int32Array.from([
            2,
            8
        ]),
        Int32Array.from([
            1,
            8
        ]),
        Int32Array.from([
            0,
            8
        ])
    ]), t.VERSION_INFO_POLY = 7973, t.TYPE_INFO_POLY = 1335, t.TYPE_INFO_MASK_PATTERN = 21522, t;
}(), po = function() {
    function t(t, e) {
        this.dataBytes = t, this.errorCorrectionBytes = e;
    }
    return t.prototype.getDataBytes = function() {
        return this.dataBytes;
    }, t.prototype.getErrorCorrectionBytes = function() {
        return this.errorCorrectionBytes;
    }, t;
}(), go = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
!function() {
    function t() {}
    t.calculateMaskPenalty = function(t) {
        return ao.applyMaskPenaltyRule1(t) + ao.applyMaskPenaltyRule2(t) + ao.applyMaskPenaltyRule3(t) + ao.applyMaskPenaltyRule4(t);
    }, t.encode = function(e, r, n) {
        void 0 === n && (n = null);
        var o = t.DEFAULT_BYTE_MODE_ENCODING, i = null !== n && void 0 !== n.get(oo.CHARACTER_SET);
        i && (o = n.get(oo.CHARACTER_SET).toString());
        var a = this.chooseMode(e, o), u = new S;
        if (a === Wr.BYTE && (i || t.DEFAULT_BYTE_MODE_ENCODING !== o)) {
            var s = P.getCharacterSetECIByName(o);
            void 0 !== s && this.appendECI(s, u);
        }
        this.appendModeInfo(a, u);
        var c, f = new S;
        if (this.appendBytes(e, a, f, o), null !== n && void 0 !== n.get(oo.QR_VERSION)) {
            var h = Number.parseInt(n.get(oo.QR_VERSION).toString(), 10);
            c = Fr.getVersionForNumber(h);
            var l = this.calculateBitsNeeded(a, u, f, c);
            if (!this.willFit(l, c, r)) throw new ho("Data too big for requested version");
        } else c = this.recommendVersion(r, a, u, f);
        var d = new S;
        d.appendBitArray(u);
        var p = a === Wr.BYTE ? f.getSizeInBytes() : e.length;
        this.appendLengthInfo(p, c, a, d), d.appendBitArray(f);
        var g = c.getECBlocksForLevel(r), y = c.getTotalCodewords() - g.getTotalECCodewords();
        this.terminateBits(y, d);
        var w = this.interleaveWithECBytes(d, c.getTotalCodewords(), y, g.getNumBlocks()), _ = new co;
        _.setECLevel(r), _.setMode(a), _.setVersion(c);
        var v = c.getDimensionForVersion(), m = new so(v, v), A = this.chooseMaskPattern(w, r, c, m);
        return _.setMaskPattern(A), lo.buildMatrix(w, r, c, A, m), _.setMatrix(m), _;
    }, t.recommendVersion = function(t, e, r, n) {
        var o = this.calculateBitsNeeded(e, r, n, Fr.getVersionForNumber(1)), i = this.chooseVersion(o, t), a = this.calculateBitsNeeded(e, r, n, i);
        return this.chooseVersion(a, t);
    }, t.calculateBitsNeeded = function(t, e, r, n) {
        return e.getSize() + t.getCharacterCountBits(n) + r.getSize();
    }, t.getAlphanumericCode = function(e) {
        return e < t.ALPHANUMERIC_TABLE.length ? t.ALPHANUMERIC_TABLE[e] : -1;
    }, t.chooseMode = function(e, r) {
        if (void 0 === r && (r = null), P.SJIS.getName() === r && this.isOnlyDoubleByteKanji(e)) return Wr.KANJI;
        for(var n = !1, o = !1, i = 0, a = e.length; i < a; ++i){
            var u = e.charAt(i);
            if (t.isDigit(u)) n = !0;
            else {
                if (-1 === this.getAlphanumericCode(u.charCodeAt(0))) return Wr.BYTE;
                o = !0;
            }
        }
        return o ? Wr.ALPHANUMERIC : n ? Wr.NUMERIC : Wr.BYTE;
    }, t.isOnlyDoubleByteKanji = function(t) {
        var e;
        try {
            e = L.encode(t, P.SJIS);
        } catch (t) {
            return !1;
        }
        var r = e.length;
        if (r % 2 != 0) return !1;
        for(var n = 0; n < r; n += 2){
            var o = 255 & e[n];
            if ((o < 129 || o > 159) && (o < 224 || o > 235)) return !1;
        }
        return !0;
    }, t.chooseMaskPattern = function(t, e, r, n) {
        for(var o = Number.MAX_SAFE_INTEGER, i = -1, a = 0; a < co.NUM_MASK_PATTERNS; a++){
            lo.buildMatrix(t, e, r, a, n);
            var u = this.calculateMaskPenalty(n);
            u < o && (o = u, i = a);
        }
        return i;
    }, t.chooseVersion = function(e, r) {
        for(var n = 1; n <= 40; n++){
            var o = Fr.getVersionForNumber(n);
            if (t.willFit(e, o, r)) return o;
        }
        throw new ho("Data too big");
    }, t.willFit = function(t, e, r) {
        return e.getTotalCodewords() - e.getECBlocksForLevel(r).getTotalECCodewords() >= (t + 7) / 8;
    }, t.terminateBits = function(t, e) {
        var r = 8 * t;
        if (e.getSize() > r) throw new ho("data bits cannot fit in the QR Code" + e.getSize() + " > " + r);
        for(var n = 0; n < 4 && e.getSize() < r; ++n)e.appendBit(!1);
        var o = 7 & e.getSize();
        if (o > 0) for(n = o; n < 8; n++)e.appendBit(!1);
        var i = t - e.getSizeInBytes();
        for(n = 0; n < i; ++n)e.appendBits(0 == (1 & n) ? 236 : 17, 8);
        if (e.getSize() !== r) throw new ho("Bits size does not equal capacity");
    }, t.getNumDataBytesAndNumECBytesForBlockID = function(t, e, r, n, o, i) {
        if (n >= r) throw new ho("Block ID too large");
        var a = t % r, u = r - a, s = Math.floor(t / r), c = s + 1, f = Math.floor(e / r), h = f + 1, l = s - f, d = c - h;
        if (l !== d) throw new ho("EC bytes mismatch");
        if (r !== u + a) throw new ho("RS blocks mismatch");
        if (t !== (f + l) * u + (h + d) * a) throw new ho("Total bytes mismatch");
        n < u ? (o[0] = f, i[0] = l) : (o[0] = h, i[0] = d);
    }, t.interleaveWithECBytes = function(e, r, n, o) {
        var i, a, u, s;
        if (e.getSizeInBytes() !== n) throw new ho("Number of bits and data bytes does not match");
        for(var c = 0, f = 0, h = 0, l = new Array, d = 0; d < o; ++d){
            var p = new Int32Array(1), g = new Int32Array(1);
            t.getNumDataBytesAndNumECBytesForBlockID(r, n, o, d, p, g);
            var y = p[0], w = new Uint8Array(y);
            e.toBytes(8 * c, w, 0, y);
            var _ = t.generateECBytes(w, g[0]);
            l.push(new po(w, _)), f = Math.max(f, y), h = Math.max(h, _.length), c += p[0];
        }
        if (n !== c) throw new ho("Data bytes does not match offset");
        var v = new S;
        for(d = 0; d < f; ++d)try {
            for(var m = (i = void 0, go(l)), A = m.next(); !A.done; A = m.next()){
                d < (w = A.value.getDataBytes()).length && v.appendBits(w[d], 8);
            }
        } catch (t) {
            i = {
                error: t
            };
        } finally{
            try {
                A && !A.done && (a = m.return) && a.call(m);
            } finally{
                if (i) throw i.error;
            }
        }
        for(d = 0; d < h; ++d)try {
            for(var E = (u = void 0, go(l)), C = E.next(); !C.done; C = E.next()){
                d < (_ = C.value.getErrorCorrectionBytes()).length && v.appendBits(_[d], 8);
            }
        } catch (t) {
            u = {
                error: t
            };
        } finally{
            try {
                C && !C.done && (s = E.return) && s.call(E);
            } finally{
                if (u) throw u.error;
            }
        }
        if (r !== v.getSizeInBytes()) throw new ho("Interleaving error: " + r + " and " + v.getSizeInBytes() + " differ.");
        return v;
    }, t.generateECBytes = function(t, e) {
        for(var r = t.length, n = new Int32Array(r + e), o = 0; o < r; o++)n[o] = 255 & t[o];
        new io(lt.QR_CODE_FIELD_256).encode(n, e);
        var i = new Uint8Array(e);
        for(o = 0; o < e; o++)i[o] = n[r + o];
        return i;
    }, t.appendModeInfo = function(t, e) {
        e.appendBits(t.getBits(), 4);
    }, t.appendLengthInfo = function(t, e, r, n) {
        var o = r.getCharacterCountBits(e);
        if (t >= 1 << o) throw new ho(t + " is bigger than " + ((1 << o) - 1));
        n.appendBits(t, o);
    }, t.appendBytes = function(e, r, n, o) {
        switch(r){
            case Wr.NUMERIC:
                t.appendNumericBytes(e, n);
                break;
            case Wr.ALPHANUMERIC:
                t.appendAlphanumericBytes(e, n);
                break;
            case Wr.BYTE:
                t.append8BitBytes(e, n, o);
                break;
            case Wr.KANJI:
                t.appendKanjiBytes(e, n);
                break;
            default:
                throw new ho("Invalid mode: " + r);
        }
    }, t.getDigit = function(t) {
        return t.charCodeAt(0) - 48;
    }, t.isDigit = function(e) {
        var r = t.getDigit(e);
        return r >= 0 && r <= 9;
    }, t.appendNumericBytes = function(e, r) {
        for(var n = e.length, o = 0; o < n;){
            var i = t.getDigit(e.charAt(o));
            if (o + 2 < n) {
                var a = t.getDigit(e.charAt(o + 1)), u = t.getDigit(e.charAt(o + 2));
                r.appendBits(100 * i + 10 * a + u, 10), o += 3;
            } else if (o + 1 < n) {
                a = t.getDigit(e.charAt(o + 1));
                r.appendBits(10 * i + a, 7), o += 2;
            } else r.appendBits(i, 4), o++;
        }
    }, t.appendAlphanumericBytes = function(e, r) {
        for(var n = e.length, o = 0; o < n;){
            var i = t.getAlphanumericCode(e.charCodeAt(o));
            if (-1 === i) throw new ho;
            if (o + 1 < n) {
                var a = t.getAlphanumericCode(e.charCodeAt(o + 1));
                if (-1 === a) throw new ho;
                r.appendBits(45 * i + a, 11), o += 2;
            } else r.appendBits(i, 6), o++;
        }
    }, t.append8BitBytes = function(t, e, r) {
        var n;
        try {
            n = L.encode(t, r);
        } catch (t) {
            throw new ho(t);
        }
        for(var o = 0, i = n.length; o !== i; o++){
            var a = n[o];
            e.appendBits(a, 8);
        }
    }, t.appendKanjiBytes = function(t, e) {
        var r;
        try {
            r = L.encode(t, P.SJIS);
        } catch (t) {
            throw new ho(t);
        }
        for(var n = r.length, o = 0; o < n; o += 2){
            var i = (255 & r[o]) << 8 & 4294967295 | 255 & r[o + 1], a = -1;
            if (i >= 33088 && i <= 40956 ? a = i - 33088 : i >= 57408 && i <= 60351 && (a = i - 49472), -1 === a) throw new ho("Invalid byte sequence");
            var u = 192 * (a >> 8) + (255 & a);
            e.appendBits(u, 13);
        }
    }, t.appendECI = function(t, e) {
        e.appendBits(Wr.ECI.getBits(), 4), e.appendBits(t.getValue(), 8);
    }, t.ALPHANUMERIC_TABLE = Int32Array.from([
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        36,
        -1,
        -1,
        -1,
        37,
        38,
        -1,
        -1,
        -1,
        -1,
        39,
        40,
        -1,
        41,
        42,
        43,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        44,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        -1,
        -1,
        -1,
        -1,
        -1
    ]), t.DEFAULT_BYTE_MODE_ENCODING = P.UTF8.getName();
}();
var yo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r, n, o, i, a, u, s) {
        var c = t.call(this, a, u) || this;
        if (c.yuvData = e, c.dataWidth = r, c.dataHeight = n, c.left = o, c.top = i, o + a > r || i + u > n) throw new l("Crop rectangle does not fit within image data.");
        return s && c.reverseHorizontal(a, u), c;
    }
    yo(e, t), e.prototype.getRow = function(t, e) {
        if (t < 0 || t >= this.getHeight()) throw new l("Requested row is outside the image: " + t);
        var r = this.getWidth();
        (null == e || e.length < r) && (e = new Uint8ClampedArray(r));
        var n = (t + this.top) * this.dataWidth + this.left;
        return w.arraycopy(this.yuvData, n, e, 0, r), e;
    }, e.prototype.getMatrix = function() {
        var t = this.getWidth(), e = this.getHeight();
        if (t === this.dataWidth && e === this.dataHeight) return this.yuvData;
        var r = t * e, n = new Uint8ClampedArray(r), o = this.top * this.dataWidth + this.left;
        if (t === this.dataWidth) return w.arraycopy(this.yuvData, o, n, 0, r), n;
        for(var i = 0; i < e; i++){
            var a = i * t;
            w.arraycopy(this.yuvData, o, n, a, t), o += this.dataWidth;
        }
        return n;
    }, e.prototype.isCropSupported = function() {
        return !0;
    }, e.prototype.crop = function(t, r, n, o) {
        return new e(this.yuvData, this.dataWidth, this.dataHeight, this.left + t, this.top + r, n, o, !1);
    }, e.prototype.renderThumbnail = function() {
        for(var t = this.getWidth() / e.THUMBNAIL_SCALE_FACTOR, r = this.getHeight() / e.THUMBNAIL_SCALE_FACTOR, n = new Int32Array(t * r), o = this.yuvData, i = this.top * this.dataWidth + this.left, a = 0; a < r; a++){
            for(var u = a * t, s = 0; s < t; s++){
                var c = 255 & o[i + s * e.THUMBNAIL_SCALE_FACTOR];
                n[u + s] = 4278190080 | 65793 * c;
            }
            i += this.dataWidth * e.THUMBNAIL_SCALE_FACTOR;
        }
        return n;
    }, e.prototype.getThumbnailWidth = function() {
        return this.getWidth() / e.THUMBNAIL_SCALE_FACTOR;
    }, e.prototype.getThumbnailHeight = function() {
        return this.getHeight() / e.THUMBNAIL_SCALE_FACTOR;
    }, e.prototype.reverseHorizontal = function(t, e) {
        for(var r = this.yuvData, n = 0, o = this.top * this.dataWidth + this.left; n < e; n++, o += this.dataWidth)for(var i = o + t / 2, a = o, u = o + t - 1; a < i; a++, u--){
            var s = r[a];
            r[a] = r[u], r[u] = s;
        }
    }, e.prototype.invert = function() {
        return new Y(this);
    }, e.THUMBNAIL_SCALE_FACTOR = 2;
}(j);
var wo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r, n, o, i, a, u) {
        var s = t.call(this, r, n) || this;
        if (s.dataWidth = o, s.dataHeight = i, s.left = a, s.top = u, 4 === e.BYTES_PER_ELEMENT) {
            for(var c = r * n, f = new Uint8ClampedArray(c), h = 0; h < c; h++){
                var d = e[h], p = d >> 16 & 255, g = d >> 7 & 510, y = 255 & d;
                f[h] = (p + g + y) / 4 & 255;
            }
            s.luminances = f;
        } else s.luminances = e;
        if (void 0 === o && (s.dataWidth = r), void 0 === i && (s.dataHeight = n), void 0 === a && (s.left = 0), void 0 === u && (s.top = 0), s.left + r > s.dataWidth || s.top + n > s.dataHeight) throw new l("Crop rectangle does not fit within image data.");
        return s;
    }
    wo(e, t), e.prototype.getRow = function(t, e) {
        if (t < 0 || t >= this.getHeight()) throw new l("Requested row is outside the image: " + t);
        var r = this.getWidth();
        (null == e || e.length < r) && (e = new Uint8ClampedArray(r));
        var n = (t + this.top) * this.dataWidth + this.left;
        return w.arraycopy(this.luminances, n, e, 0, r), e;
    }, e.prototype.getMatrix = function() {
        var t = this.getWidth(), e = this.getHeight();
        if (t === this.dataWidth && e === this.dataHeight) return this.luminances;
        var r = t * e, n = new Uint8ClampedArray(r), o = this.top * this.dataWidth + this.left;
        if (t === this.dataWidth) return w.arraycopy(this.luminances, o, n, 0, r), n;
        for(var i = 0; i < e; i++){
            var a = i * t;
            w.arraycopy(this.luminances, o, n, a, t), o += this.dataWidth;
        }
        return n;
    }, e.prototype.isCropSupported = function() {
        return !0;
    }, e.prototype.crop = function(t, r, n, o) {
        return new e(this.luminances, n, o, this.dataWidth, this.dataHeight, this.left + t, this.top + r);
    }, e.prototype.invert = function() {
        return new Y(this);
    };
}(j);
var _o = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    _o(e, t), e.forName = function(t) {
        return this.getCharacterSetECIByName(t);
    };
}(P);
var vo = function() {
    function t(t) {
        this.previous = t;
    }
    return t.prototype.getPrevious = function() {
        return this.previous;
    }, t;
}(), mo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Ao = function(t) {
    function e(e, r, n) {
        var o = t.call(this, e) || this;
        return o.value = r, o.bitCount = n, o;
    }
    return mo(e, t), e.prototype.appendTo = function(t, e) {
        t.appendBits(this.value, this.bitCount);
    }, e.prototype.add = function(t, r) {
        return new e(this, t, r);
    }, e.prototype.addBinaryShift = function(t, r) {
        return console.warn("addBinaryShift on SimpleToken, this simply returns a copy of this token"), new e(this, t, r);
    }, e.prototype.toString = function() {
        var t = this.value & (1 << this.bitCount) - 1;
        return t |= 1 << this.bitCount, "<" + I.toBinaryString(t | 1 << this.bitCount).substring(1) + ">";
    }, e;
}(vo), Eo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r, n) {
        var o = t.call(this, e, 0, 0) || this;
        return o.binaryShiftStart = r, o.binaryShiftByteCount = n, o;
    }
    Eo(e, t), e.prototype.appendTo = function(t, e) {
        for(var r = 0; r < this.binaryShiftByteCount; r++)(0 === r || 31 === r && this.binaryShiftByteCount <= 62) && (t.appendBits(31, 5), this.binaryShiftByteCount > 62 ? t.appendBits(this.binaryShiftByteCount - 31, 16) : 0 === r ? t.appendBits(Math.min(this.binaryShiftByteCount, 31), 5) : t.appendBits(this.binaryShiftByteCount - 31, 5)), t.appendBits(e[this.binaryShiftStart + r], 8);
    }, e.prototype.addBinaryShift = function(t, r) {
        return new e(this, t, r);
    }, e.prototype.toString = function() {
        return "<" + this.binaryShiftStart + "::" + (this.binaryShiftStart + this.binaryShiftByteCount - 1) + ">";
    };
}(Ao);
new Ao(null, 0, 0);
var Co = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
!function(t) {
    var e, r;
    try {
        for(var n = Co(t), o = n.next(); !o.done; o = n.next()){
            var i = o.value;
            C.fill(i, -1);
        }
    } catch (t) {
        e = {
            error: t
        };
    } finally{
        try {
            o && !o.done && (r = n.return) && r.call(n);
        } finally{
            if (e) throw e.error;
        }
    }
    t[0][4] = 0, t[1][4] = 0, t[1][0] = 28, t[3][4] = 0, t[2][4] = 0, t[2][0] = 15;
}(C.createInt32Array(6, 6)), function(t) {
    var e = F.getCharCode(" "), r = F.getCharCode("."), n = F.getCharCode(",");
    t[0][e] = 1;
    for(var o = F.getCharCode("Z"), i = F.getCharCode("A"), a = i; a <= o; a++)t[0][a] = a - i + 2;
    t[1][e] = 1;
    var u = F.getCharCode("z"), s = F.getCharCode("a");
    for(a = s; a <= u; a++)t[1][a] = a - s + 2;
    t[2][e] = 1;
    var c = F.getCharCode("9"), f = F.getCharCode("0");
    for(a = f; a <= c; a++)t[2][a] = a - f + 2;
    t[2][n] = 12, t[2][r] = 13;
    for(var h = [
        "\0",
        " ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "\b",
        "\t",
        "\n",
        "\v",
        "\f",
        "\r",
        "",
        "",
        "",
        "",
        "",
        "@",
        "\\",
        "^",
        "_",
        "`",
        "|",
        "~",
        ""
    ], l = 0; l < h.length; l++)t[3][F.getCharCode(h[l])] = l;
    var d = [
        "\0",
        "\r",
        "\0",
        "\0",
        "\0",
        "\0",
        "!",
        "'",
        "#",
        "$",
        "%",
        "&",
        "'",
        "(",
        ")",
        "*",
        "+",
        ",",
        "-",
        ".",
        "/",
        ":",
        ";",
        "<",
        "=",
        ">",
        "?",
        "[",
        "]",
        "{",
        "}"
    ];
    for(l = 0; l < d.length; l++)F.getCharCode(d[l]) > 0 && (t[4][F.getCharCode(d[l])] = l);
}(C.createInt32Array(5, 256));
var Io = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), So = function(t) {
    function e(r) {
        var n = t.call(this, r.width, r.height) || this;
        return n.canvas = r, n.buffer = e.makeBufferFromCanvasImageData(r), n;
    }
    return Io(e, t), e.makeBufferFromCanvasImageData = function(t) {
        var r = t.getContext("2d");
        if (!r) throw new Error("Couldn't get canvas context.");
        var n = r.getImageData(0, 0, t.width, t.height);
        return e.toGrayscaleBuffer(n.data, t.width, t.height);
    }, e.toGrayscaleBuffer = function(t, e, r) {
        for(var n = new Uint8ClampedArray(e * r), o = 0, i = 0, a = t.length; o < a; o += 4, i++){
            var u = void 0;
            if (0 === t[o + 3]) u = 255;
            else u = 306 * t[o] + 601 * t[o + 1] + 117 * t[o + 2] + 512 >> 10;
            n[i] = u;
        }
        return n;
    }, e.prototype.getRow = function(t, e) {
        if (t < 0 || t >= this.getHeight()) throw new l("Requested row is outside the image: " + t);
        var r = this.getWidth(), n = t * r;
        return null === e ? e = this.buffer.slice(n, n + r) : (e.length < r && (e = new Uint8ClampedArray(r)), e.set(this.buffer.slice(n, n + r))), e;
    }, e.prototype.getMatrix = function() {
        return this.buffer;
    }, e.prototype.isCropSupported = function() {
        return !0;
    }, e.prototype.crop = function(e, r, n, o) {
        return t.prototype.crop.call(this, e, r, n, o), this;
    }, e.prototype.isRotateSupported = function() {
        return !0;
    }, e.prototype.rotateCounterClockwise = function() {
        return this.rotate(-90), this;
    }, e.prototype.rotateCounterClockwise45 = function() {
        return this.rotate(-45), this;
    }, e.prototype.invert = function() {
        return new Y(this);
    }, e.prototype.getTempCanvasElement = function() {
        if (null === this.tempCanvasElement) {
            var t = this.canvas.ownerDocument.createElement("canvas");
            t.width = this.canvas.width, t.height = this.canvas.height, this.tempCanvasElement = t;
        }
        return this.tempCanvasElement;
    }, e.prototype.rotate = function(t) {
        var r = this.getTempCanvasElement();
        if (!r) throw new Error("Could not create a Canvas element.");
        var n = t * e.DEGREE_TO_RADIANS, o = this.canvas.width, i = this.canvas.height, a = Math.ceil(Math.abs(Math.cos(n)) * o + Math.abs(Math.sin(n)) * i), u = Math.ceil(Math.abs(Math.sin(n)) * o + Math.abs(Math.cos(n)) * i);
        r.width = a, r.height = u;
        var s = r.getContext("2d");
        if (!s) throw new Error("Could not create a Convas Context element.");
        return s.translate(a / 2, u / 2), s.rotate(n), s.drawImage(this.canvas, o / -2, i / -2), this.buffer = e.makeBufferFromCanvasImageData(r), this;
    }, e.DEGREE_TO_RADIANS = Math.PI / 180, e;
}(j);
function Oo() {
    return "undefined" != typeof navigator;
}
function To() {
    return !!(Oo() && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices);
}
var bo = function() {
    return bo = Object.assign || function(t) {
        for(var e, r = 1, n = arguments.length; r < n; r++)for(var o in e = arguments[r])Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        return t;
    }, bo.apply(this, arguments);
}, Ro = function(t, e, r, n) {
    return new (r || (r = Promise))(function(o, i) {
        function a(t) {
            try {
                s(n.next(t));
            } catch (t) {
                i(t);
            }
        }
        function u(t) {
            try {
                s(n.throw(t));
            } catch (t) {
                i(t);
            }
        }
        function s(t) {
            var e;
            t.done ? o(t.value) : (e = t.value, e instanceof r ? e : new r(function(t) {
                t(e);
            })).then(a, u);
        }
        s((n = n.apply(t, e || [])).next());
    });
}, No = function(t, e) {
    var r, n, o, i, a = {
        label: 0,
        sent: function() {
            if (1 & o[0]) throw o[1];
            return o[1];
        },
        trys: [],
        ops: []
    };
    return i = {
        next: u(0),
        throw: u(1),
        return: u(2)
    }, "function" == typeof Symbol && (i[Symbol.iterator] = function() {
        return this;
    }), i;
    "TURBOPACK unreachable";
    function u(i) {
        return function(u) {
            return function(i) {
                if (r) throw new TypeError("Generator is already executing.");
                for(; a;)try {
                    if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;
                    switch(n = 0, o && (i = [
                        2 & i[0],
                        o.value
                    ]), i[0]){
                        case 0:
                        case 1:
                            o = i;
                            break;
                        case 4:
                            return a.label++, {
                                value: i[1],
                                done: !1
                            };
                        case 5:
                            a.label++, n = i[1], i = [
                                0
                            ];
                            continue;
                        case 7:
                            i = a.ops.pop(), a.trys.pop();
                            continue;
                        default:
                            if (!(o = a.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
                                a = 0;
                                continue;
                            }
                            if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                                a.label = i[1];
                                break;
                            }
                            if (6 === i[0] && a.label < o[1]) {
                                a.label = o[1], o = i;
                                break;
                            }
                            if (o && a.label < o[2]) {
                                a.label = o[2], a.ops.push(i);
                                break;
                            }
                            o[2] && a.ops.pop(), a.trys.pop();
                            continue;
                    }
                    i = e.call(t, a);
                } catch (t) {
                    i = [
                        6,
                        t
                    ], n = 0;
                } finally{
                    r = o = 0;
                }
                if (5 & i[0]) throw i[1];
                return {
                    value: i[0] ? i[1] : void 0,
                    done: !0
                };
            }([
                i,
                u
            ]);
        };
    }
}, Do = function(t) {
    var e = "function" == typeof Symbol && Symbol.iterator, r = e && t[e], n = 0;
    if (r) return r.call(t);
    if (t && "number" == typeof t.length) return {
        next: function() {
            return t && n >= t.length && (t = void 0), {
                value: t && t[n++],
                done: !t
            };
        }
    };
    throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
}, Po = {
    delayBetweenScanAttempts: 500,
    delayBetweenScanSuccess: 500,
    tryPlayVideoTimeout: 5e3
}, Mo = function() {
    function t(t, e, r) {
        void 0 === e && (e = new Map), void 0 === r && (r = {}), this.reader = t, this.hints = e, this.options = bo(bo({}, Po), r);
    }
    return Object.defineProperty(t.prototype, "possibleFormats", {
        set: function(t) {
            this.hints.set(T.POSSIBLE_FORMATS, t);
        },
        enumerable: !1,
        configurable: !0
    }), t.addVideoSource = function(t, e) {
        try {
            t.srcObject = e;
        } catch (r) {
            t.src = URL.createObjectURL(e);
        }
    }, t.mediaStreamSetTorch = function(t, e) {
        return Ro(this, void 0, void 0, function() {
            return No(this, function(r) {
                switch(r.label){
                    case 0:
                        return [
                            4,
                            t.applyConstraints({
                                advanced: [
                                    {
                                        fillLightMode: e ? "flash" : "off",
                                        torch: !!e
                                    }
                                ]
                            })
                        ];
                    case 1:
                        return r.sent(), [
                            2
                        ];
                }
            });
        });
    }, t.mediaStreamIsTorchCompatible = function(e) {
        var r, n, o = e.getVideoTracks();
        try {
            for(var i = Do(o), a = i.next(); !a.done; a = i.next()){
                var u = a.value;
                if (t.mediaStreamIsTorchCompatibleTrack(u)) return !0;
            }
        } catch (t) {
            r = {
                error: t
            };
        } finally{
            try {
                a && !a.done && (n = i.return) && n.call(i);
            } finally{
                if (r) throw r.error;
            }
        }
        return !1;
    }, t.mediaStreamIsTorchCompatibleTrack = function(t) {
        try {
            return "torch" in t.getCapabilities();
        } catch (t) {
            return console.error(t), console.warn("Your browser may be not fully compatible with WebRTC and/or ImageCapture specs. Torch will not be available."), !1;
        }
    }, t.isVideoPlaying = function(t) {
        return t.currentTime > 0 && !t.paused && t.readyState > 2;
    }, t.getMediaElement = function(t, e) {
        var r = document.getElementById(t);
        if (!r) throw new f("element with id '" + t + "' not found");
        if (r.nodeName.toLowerCase() !== e.toLowerCase()) throw new f("element with id '" + t + "' must be an " + e + " element");
        return r;
    }, t.createVideoElement = function(e) {
        if (e instanceof HTMLVideoElement) return e;
        if ("string" == typeof e) return t.getMediaElement(e, "video");
        if (!e && "undefined" != typeof document) {
            var r = document.createElement("video");
            return r.width = 200, r.height = 200, r;
        }
        throw new Error("Couldn't get videoElement from videoSource!");
    }, t.prepareImageElement = function(e) {
        if (e instanceof HTMLImageElement) return e;
        if ("string" == typeof e) return t.getMediaElement(e, "img");
        if (void 0 === e) {
            var r = document.createElement("img");
            return r.width = 200, r.height = 200, r;
        }
        throw new Error("Couldn't get imageElement from imageSource!");
    }, t.prepareVideoElement = function(e) {
        var r = t.createVideoElement(e);
        return r.setAttribute("autoplay", "true"), r.setAttribute("muted", "true"), r.setAttribute("playsinline", "true"), r;
    }, t.isImageLoaded = function(t) {
        return !!t.complete && 0 !== t.naturalWidth;
    }, t.createBinaryBitmapFromCanvas = function(t) {
        var e = new So(t), r = new W(e);
        return new d(r);
    }, t.drawImageOnCanvas = function(t, e) {
        t.drawImage(e, 0, 0);
    }, t.getMediaElementDimensions = function(t) {
        if (t instanceof HTMLVideoElement) return {
            height: t.videoHeight,
            width: t.videoWidth
        };
        if (t instanceof HTMLImageElement) return {
            height: t.naturalHeight || t.height,
            width: t.naturalWidth || t.width
        };
        throw new Error("Couldn't find the Source's dimentions!");
    }, t.createCaptureCanvas = function(e) {
        if (!e) throw new f("Cannot create a capture canvas without a media element.");
        if ("undefined" == typeof document) throw new Error('The page "Document" is undefined, make sure you\'re running in a browser.');
        var r = document.createElement("canvas"), n = t.getMediaElementDimensions(e), o = n.width, i = n.height;
        return r.style.width = o + "px", r.style.height = i + "px", r.width = o, r.height = i, r;
    }, t.tryPlayVideo = function(e) {
        return Ro(this, void 0, void 0, function() {
            var r;
            return No(this, function(n) {
                switch(n.label){
                    case 0:
                        if (null == e ? void 0 : e.ended) return console.error("Trying to play video that has ended."), [
                            2,
                            !1
                        ];
                        if (t.isVideoPlaying(e)) return console.warn("Trying to play video that is already playing."), [
                            2,
                            !0
                        ];
                        n.label = 1;
                    case 1:
                        return n.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]), [
                            4,
                            e.play()
                        ];
                    case 2:
                        return n.sent(), [
                            2,
                            !0
                        ];
                    case 3:
                        return r = n.sent(), console.warn("It was not possible to play the video.", r), [
                            2,
                            !1
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, t.createCanvasFromMediaElement = function(e) {
        var r = t.createCaptureCanvas(e), n = r.getContext("2d");
        if (!n) throw new Error("Couldn't find Canvas 2D Context.");
        return t.drawImageOnCanvas(n, e), r;
    }, t.createBinaryBitmapFromMediaElem = function(e) {
        var r = t.createCanvasFromMediaElement(e);
        return t.createBinaryBitmapFromCanvas(r);
    }, t.destroyImageElement = function(t) {
        t.src = "", t.removeAttribute("src"), t = void 0;
    }, t.listVideoInputDevices = function() {
        return Ro(this, void 0, void 0, function() {
            var t, e, r, n, o, i, a, u, s, c, f, h;
            return No(this, function(l) {
                switch(l.label){
                    case 0:
                        if (!Oo()) throw new Error("Can't enumerate devices, navigator is not present.");
                        if (!To()) throw new Error("Can't enumerate devices, method not supported.");
                        return [
                            4,
                            navigator.mediaDevices.enumerateDevices()
                        ];
                    case 1:
                        t = l.sent(), e = [];
                        try {
                            for(r = Do(t), n = r.next(); !n.done; n = r.next())o = n.value, "videoinput" === (i = "video" === o.kind ? "videoinput" : o.kind) && (a = o.deviceId || o.id, u = o.label || "Video device " + (e.length + 1), s = o.groupId, c = {
                                deviceId: a,
                                label: u,
                                kind: i,
                                groupId: s
                            }, e.push(c));
                        } catch (t) {
                            f = {
                                error: t
                            };
                        } finally{
                            try {
                                n && !n.done && (h = r.return) && h.call(r);
                            } finally{
                                if (f) throw f.error;
                            }
                        }
                        return [
                            2,
                            e
                        ];
                }
            });
        });
    }, t.findDeviceById = function(e) {
        return Ro(this, void 0, void 0, function() {
            var r;
            return No(this, function(n) {
                switch(n.label){
                    case 0:
                        return [
                            4,
                            t.listVideoInputDevices()
                        ];
                    case 1:
                        return (r = n.sent()) ? [
                            2,
                            r.find(function(t) {
                                return t.deviceId === e;
                            })
                        ] : [
                            2
                        ];
                }
            });
        });
    }, t.cleanVideoSource = function(t) {
        if (t) {
            try {
                t.srcObject = null;
            } catch (e) {
                t.src = "";
            }
            t && t.removeAttribute("src");
        }
    }, t.playVideoOnLoadAsync = function(e, r) {
        return Ro(this, void 0, void 0, function() {
            return No(this, function(n) {
                switch(n.label){
                    case 0:
                        return [
                            4,
                            t.tryPlayVideo(e)
                        ];
                    case 1:
                        return n.sent() ? [
                            2,
                            !0
                        ] : [
                            2,
                            new Promise(function(n, o) {
                                var i = setTimeout(function() {
                                    t.isVideoPlaying(e) || (o(!1), e.removeEventListener("canplay", a));
                                }, r), a = function() {
                                    t.tryPlayVideo(e).then(function(t) {
                                        clearTimeout(i), e.removeEventListener("canplay", a), n(t);
                                    });
                                };
                                e.addEventListener("canplay", a);
                            })
                        ];
                }
            });
        });
    }, t.attachStreamToVideo = function(e, r, n) {
        return void 0 === n && (n = 5e3), Ro(this, void 0, void 0, function() {
            var o;
            return No(this, function(i) {
                switch(i.label){
                    case 0:
                        return o = t.prepareVideoElement(r), t.addVideoSource(o, e), [
                            4,
                            t.playVideoOnLoadAsync(o, n)
                        ];
                    case 1:
                        return i.sent(), [
                            2,
                            o
                        ];
                }
            });
        });
    }, t._waitImageLoad = function(e) {
        return new Promise(function(r, n) {
            var o = setTimeout(function() {
                t.isImageLoaded(e) || (e.removeEventListener("load", i), n());
            }, 1e4), i = function() {
                clearTimeout(o), e.removeEventListener("load", i), r();
            };
            e.addEventListener("load", i);
        });
    }, t.checkCallbackFnOrThrow = function(t) {
        if (!t) throw new f("`callbackFn` is a required parameter, you cannot capture results without it.");
    }, t.disposeMediaStream = function(t) {
        t.getVideoTracks().forEach(function(t) {
            return t.stop();
        }), t = void 0;
    }, t.prototype.decode = function(e) {
        var r = t.createCanvasFromMediaElement(e);
        return this.decodeFromCanvas(r);
    }, t.prototype.decodeBitmap = function(t) {
        return this.reader.decode(t, this.hints);
    }, t.prototype.decodeFromCanvas = function(e) {
        var r = t.createBinaryBitmapFromCanvas(e);
        return this.decodeBitmap(r);
    }, t.prototype.decodeFromImageElement = function(e) {
        return Ro(this, void 0, void 0, function() {
            var r;
            return No(this, function(n) {
                switch(n.label){
                    case 0:
                        if (!e) throw new f("An image element must be provided.");
                        return r = t.prepareImageElement(e), [
                            4,
                            this._decodeOnLoadImage(r)
                        ];
                    case 1:
                        return [
                            2,
                            n.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeFromImageUrl = function(e) {
        return Ro(this, void 0, void 0, function() {
            var r;
            return No(this, function(n) {
                switch(n.label){
                    case 0:
                        if (!e) throw new f("An URL must be provided.");
                        (r = t.prepareImageElement()).src = e, n.label = 1;
                    case 1:
                        return n.trys.push([
                            1,
                            ,
                            3,
                            4
                        ]), [
                            4,
                            this.decodeFromImageElement(r)
                        ];
                    case 2:
                        return [
                            2,
                            n.sent()
                        ];
                    case 3:
                        return t.destroyImageElement(r), [
                            7
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, t.prototype.decodeFromConstraints = function(e, r, n) {
        return Ro(this, void 0, void 0, function() {
            var o, i;
            return No(this, function(a) {
                switch(a.label){
                    case 0:
                        return t.checkCallbackFnOrThrow(n), [
                            4,
                            navigator.mediaDevices.getUserMedia(e)
                        ];
                    case 1:
                        o = a.sent(), a.label = 2;
                    case 2:
                        return a.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]), [
                            4,
                            this.decodeFromStream(o, r, n)
                        ];
                    case 3:
                        return [
                            2,
                            a.sent()
                        ];
                    case 4:
                        throw i = a.sent(), t.disposeMediaStream(o), i;
                    case 5:
                        return [
                            2
                        ];
                }
            });
        });
    }, t.prototype.decodeFromStream = function(e, r, n) {
        return Ro(this, void 0, void 0, function() {
            var o, i, a, u, s, c, f, h, l, d, p = this;
            return No(this, function(g) {
                switch(g.label){
                    case 0:
                        return t.checkCallbackFnOrThrow(n), o = this.options.tryPlayVideoTimeout, [
                            4,
                            t.attachStreamToVideo(e, r, o)
                        ];
                    case 1:
                        return i = g.sent(), a = function() {
                            var t, r;
                            try {
                                for(var n = Do(e.getVideoTracks()), o = n.next(); !o.done; o = n.next()){
                                    o.value.stop();
                                }
                            } catch (e) {
                                t = {
                                    error: e
                                };
                            } finally{
                                try {
                                    o && !o.done && (r = n.return) && r.call(n);
                                } finally{
                                    if (t) throw t.error;
                                }
                            }
                            e = void 0;
                        }, u = function() {
                            a(), t.cleanVideoSource(i);
                        }, s = this.scan(i, n, u), c = e.getVideoTracks(), f = bo(bo({}, s), {
                            stop: function() {
                                s.stop();
                            },
                            streamVideoConstraintsApply: function(t, e) {
                                return Ro(this, void 0, void 0, function() {
                                    var r, n, o, i, a, u;
                                    return No(this, function(s) {
                                        switch(s.label){
                                            case 0:
                                                r = e ? c.filter(e) : c, s.label = 1;
                                            case 1:
                                                s.trys.push([
                                                    1,
                                                    6,
                                                    7,
                                                    8
                                                ]), n = Do(r), o = n.next(), s.label = 2;
                                            case 2:
                                                return o.done ? [
                                                    3,
                                                    5
                                                ] : [
                                                    4,
                                                    o.value.applyConstraints(t)
                                                ];
                                            case 3:
                                                s.sent(), s.label = 4;
                                            case 4:
                                                return o = n.next(), [
                                                    3,
                                                    2
                                                ];
                                            case 5:
                                                return [
                                                    3,
                                                    8
                                                ];
                                            case 6:
                                                return i = s.sent(), a = {
                                                    error: i
                                                }, [
                                                    3,
                                                    8
                                                ];
                                            case 7:
                                                try {
                                                    o && !o.done && (u = n.return) && u.call(n);
                                                } finally{
                                                    if (a) throw a.error;
                                                }
                                                return [
                                                    7
                                                ];
                                            case 8:
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                });
                            },
                            streamVideoConstraintsGet: function(t) {
                                return c.find(t).getConstraints();
                            },
                            streamVideoSettingsGet: function(t) {
                                return c.find(t).getSettings();
                            },
                            streamVideoCapabilitiesGet: function(t) {
                                return c.find(t).getCapabilities();
                            }
                        }), t.mediaStreamIsTorchCompatible(e) && (h = null == c ? void 0 : c.find(function(e) {
                            return t.mediaStreamIsTorchCompatibleTrack(e);
                        }), l = function(e) {
                            return Ro(p, void 0, void 0, function() {
                                return No(this, function(r) {
                                    switch(r.label){
                                        case 0:
                                            return [
                                                4,
                                                t.mediaStreamSetTorch(h, e)
                                            ];
                                        case 1:
                                            return r.sent(), [
                                                2
                                            ];
                                    }
                                });
                            });
                        }, f.switchTorch = l, d = function() {
                            s.stop(), l(!1);
                        }, f.stop = d), [
                            2,
                            f
                        ];
                }
            });
        });
    }, t.prototype.decodeFromVideoDevice = function(e, r, n) {
        return Ro(this, void 0, void 0, function() {
            var o;
            return No(this, function(i) {
                switch(i.label){
                    case 0:
                        return t.checkCallbackFnOrThrow(n), o = {
                            video: e ? {
                                deviceId: {
                                    exact: e
                                }
                            } : {
                                facingMode: "environment"
                            }
                        }, [
                            4,
                            this.decodeFromConstraints(o, r, n)
                        ];
                    case 1:
                        return [
                            2,
                            i.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeFromVideoElement = function(e, r) {
        return Ro(this, void 0, void 0, function() {
            var n, o;
            return No(this, function(i) {
                switch(i.label){
                    case 0:
                        if (t.checkCallbackFnOrThrow(r), !e) throw new f("A video element must be provided.");
                        return n = t.prepareVideoElement(e), o = this.options.tryPlayVideoTimeout, [
                            4,
                            t.playVideoOnLoadAsync(n, o)
                        ];
                    case 1:
                        return i.sent(), [
                            2,
                            this.scan(n, r)
                        ];
                }
            });
        });
    }, t.prototype.decodeFromVideoUrl = function(e, r) {
        return Ro(this, void 0, void 0, function() {
            var n, o, i;
            return No(this, function(a) {
                switch(a.label){
                    case 0:
                        if (t.checkCallbackFnOrThrow(r), !e) throw new f("An URL must be provided.");
                        return (n = t.prepareVideoElement()).src = e, o = function() {
                            t.cleanVideoSource(n);
                        }, i = this.options.tryPlayVideoTimeout, [
                            4,
                            t.playVideoOnLoadAsync(n, i)
                        ];
                    case 1:
                        return a.sent(), [
                            2,
                            this.scan(n, r, o)
                        ];
                }
            });
        });
    }, t.prototype.decodeOnceFromConstraints = function(t, e) {
        return Ro(this, void 0, void 0, function() {
            var r;
            return No(this, function(n) {
                switch(n.label){
                    case 0:
                        return [
                            4,
                            navigator.mediaDevices.getUserMedia(t)
                        ];
                    case 1:
                        return r = n.sent(), [
                            4,
                            this.decodeOnceFromStream(r, e)
                        ];
                    case 2:
                        return [
                            2,
                            n.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeOnceFromStream = function(e, r) {
        return Ro(this, void 0, void 0, function() {
            var n, o;
            return No(this, function(i) {
                switch(i.label){
                    case 0:
                        return n = Boolean(r), [
                            4,
                            t.attachStreamToVideo(e, r)
                        ];
                    case 1:
                        o = i.sent(), i.label = 2;
                    case 2:
                        return i.trys.push([
                            2,
                            ,
                            4,
                            5
                        ]), [
                            4,
                            this.scanOneResult(o)
                        ];
                    case 3:
                        return [
                            2,
                            i.sent()
                        ];
                    case 4:
                        return n || t.cleanVideoSource(o), [
                            7
                        ];
                    case 5:
                        return [
                            2
                        ];
                }
            });
        });
    }, t.prototype.decodeOnceFromVideoDevice = function(t, e) {
        return Ro(this, void 0, void 0, function() {
            var r;
            return No(this, function(n) {
                switch(n.label){
                    case 0:
                        return r = {
                            video: t ? {
                                deviceId: {
                                    exact: t
                                }
                            } : {
                                facingMode: "environment"
                            }
                        }, [
                            4,
                            this.decodeOnceFromConstraints(r, e)
                        ];
                    case 1:
                        return [
                            2,
                            n.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeOnceFromVideoElement = function(e) {
        return Ro(this, void 0, void 0, function() {
            var r, n;
            return No(this, function(o) {
                switch(o.label){
                    case 0:
                        if (!e) throw new f("A video element must be provided.");
                        return r = t.prepareVideoElement(e), n = this.options.tryPlayVideoTimeout, [
                            4,
                            t.playVideoOnLoadAsync(r, n)
                        ];
                    case 1:
                        return o.sent(), [
                            4,
                            this.scanOneResult(r)
                        ];
                    case 2:
                        return [
                            2,
                            o.sent()
                        ];
                }
            });
        });
    }, t.prototype.decodeOnceFromVideoUrl = function(e) {
        return Ro(this, void 0, void 0, function() {
            var r, n;
            return No(this, function(o) {
                switch(o.label){
                    case 0:
                        if (!e) throw new f("An URL must be provided.");
                        (r = t.prepareVideoElement()).src = e, n = this.decodeOnceFromVideoElement(r), o.label = 1;
                    case 1:
                        return o.trys.push([
                            1,
                            ,
                            3,
                            4
                        ]), [
                            4,
                            n
                        ];
                    case 2:
                        return [
                            2,
                            o.sent()
                        ];
                    case 3:
                        return t.cleanVideoSource(r), [
                            7
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, t.prototype.scanOneResult = function(t, e, r, n) {
        var o = this;
        return void 0 === e && (e = !0), void 0 === r && (r = !0), void 0 === n && (n = !0), new Promise(function(i, a) {
            o.scan(t, function(t, o, u) {
                if (t) return i(t), void u.stop();
                if (o) {
                    if (o instanceof U && e) return;
                    if (o instanceof g && r) return;
                    if (o instanceof R && n) return;
                    u.stop(), a(o);
                }
            });
        });
    }, t.prototype.scan = function(e, r, n) {
        var o = this;
        t.checkCallbackFnOrThrow(r);
        var i = t.createCaptureCanvas(e), a = i.getContext("2d");
        if (!a) throw new Error("Couldn't create canvas for visual element scan.");
        var u, s = function() {
            a = void 0, i = void 0;
        }, c = !1, f = {
            stop: function() {
                c = !0, clearTimeout(u), s(), n && n();
            }
        }, h = function() {
            if (!c) try {
                t.drawImageOnCanvas(a, e);
                var l = o.decodeFromCanvas(i);
                r(l, void 0, f), u = setTimeout(h, o.options.delayBetweenScanSuccess);
            } catch (t) {
                if (r(void 0, t, f), t instanceof g || t instanceof R || t instanceof U) return void (u = setTimeout(h, o.options.delayBetweenScanAttempts));
                s(), n && n(t);
            }
        };
        return h(), f;
    }, t.prototype._decodeOnLoadImage = function(e) {
        return Ro(this, void 0, void 0, function() {
            return No(this, function(r) {
                switch(r.label){
                    case 0:
                        return t.isImageLoaded(e) ? [
                            3,
                            2
                        ] : [
                            4,
                            t._waitImageLoad(e)
                        ];
                    case 1:
                        r.sent(), r.label = 2;
                    case 2:
                        return [
                            2,
                            this.decode(e)
                        ];
                }
            });
        });
    }, t;
}(), Bo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r) {
        return t.call(this, new Mt, e, r) || this;
    }
    Bo(e, t);
}(Mo);
var Lo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r) {
        return t.call(this, new fr(e), e, r) || this;
    }
    Lo(e, t);
}(Mo);
var Fo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r) {
        return t.call(this, new Or, e, r) || this;
    }
    Fo(e, t);
}(Mo);
var ko = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r) {
        var n = this, o = new $n;
        return o.setHints(e), (n = t.call(this, o, e, r) || this).reader = o, n;
    }
    ko(e, t), Object.defineProperty(e.prototype, "possibleFormats", {
        set: function(t) {
            this.hints.set(T.POSSIBLE_FORMATS, t), this.reader.setHints(this.hints);
        },
        enumerable: !1,
        configurable: !0
    }), e.prototype.decodeBitmap = function(t) {
        return this.reader.decodeWithState(t);
    }, e.prototype.setHints = function(t) {
        this.hints = t, this.reader.setHints(this.hints);
    };
}(Mo);
var xo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}();
!function(t) {
    function e(e, r) {
        return t.call(this, new Kn, e, r) || this;
    }
    xo(e, t);
}(Mo);
var Vo = function() {
    var t = function(e, r) {
        return t = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t, e) {
            t.__proto__ = e;
        } || function(t, e) {
            for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
        }, t(e, r);
    };
    return function(e, r) {
        function n() {
            this.constructor = e;
        }
        t(e, r), e.prototype = null === r ? Object.create(r) : (n.prototype = r.prototype, new n);
    };
}(), Uo = function(t) {
    function e(e, r) {
        return t.call(this, new an, e, r) || this;
    }
    return Vo(e, t), e;
}(Mo), Ho = function(t, e, r) {
    var n = typeof t === r;
    return n || console.warn('[ReactQrReader]: Expected "'.concat(e, '" to be a of type "').concat(r, '".')), n;
}, Go = function(t) {
    var n = t.scanDelay, o = t.constraints, i = t.onResult, a = t.videoId, u = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(null);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(function() {
        var t = new Uo(null, {
            delayBetweenScanAttempts: n
        });
        if (!function() {
            var t = "undefined" != typeof navigator && !!navigator.mediaDevices;
            return t || console.warn('[ReactQrReader]: MediaDevices API has no support for your browser. You can fix this by running "npm i webrtc-adapter"'), t;
        }() && Ho(i, "onResult", "function")) {
            i(null, new Error('MediaDevices API has no support for your browser. You can fix this by running "npm i webrtc-adapter"'), t);
        }
        return Ho(o, "constraints", "object") && t.decodeFromConstraints({
            video: o
        }, a, function(e, r) {
            Ho(i, "onResult", "function") && i(e, r, t);
        }).then(function(t) {
            return u.current = t;
        }).catch(function(e) {
            Ho(i, "onResult", "function") && i(null, e, t);
        }), function() {
            var t;
            null === (t = u.current) || void 0 === t || t.stop();
        };
    }, []);
}, Xo = function() {
    return Xo = Object.assign || function(t) {
        for(var e, r = 1, n = arguments.length; r < n; r++)for(var o in e = arguments[r])Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        return t;
    }, Xo.apply(this, arguments);
}, Wo = {
    container: {
        width: "100%",
        paddingTop: "100%",
        overflow: "hidden",
        position: "relative"
    },
    video: {
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        display: "block",
        overflow: "hidden",
        position: "absolute",
        transform: void 0
    }
}, jo = function(e) {
    var r = e.videoContainerStyle, n = e.containerStyle, o = e.videoStyle, i = e.constraints, a = e.ViewFinder, u = e.scanDelay, s = e.className, c = e.onResult, f = e.videoId;
    return Go({
        constraints: i,
        scanDelay: u,
        onResult: c,
        videoId: f
    }), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"])("section", {
        className: s,
        style: n
    }, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"])("div", {
        style: Xo(Xo({}, Wo.container), r)
    }, !!a && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"])(a, null), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createElement"])("video", {
        muted: !0,
        id: f,
        style: Xo(Xo(Xo({}, Wo.video), o), {
            transform: "user" === (null == i ? void 0 : i.facingMode) && "scaleX(-1)"
        })
    })));
};
jo.displayName = "QrReader", jo.defaultProps = {
    constraints: {
        facingMode: "user"
    },
    videoId: "video",
    scanDelay: 500
};
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/loader-circle.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_context__.s({
    "__iconNode": (()=>__iconNode),
    "default": (()=>LoaderCircle)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-ssr] (ecmascript)");
;
const __iconNode = [
    [
        "path",
        {
            d: "M21 12a9 9 0 1 1-6.219-8.56",
            key: "13zald"
        }
    ]
];
const LoaderCircle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])("LoaderCircle", __iconNode);
;
 //# sourceMappingURL=loader-circle.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/loader-circle.js [app-ssr] (ecmascript) <export default as Loader2>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Loader2": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$loader$2d$circle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$loader$2d$circle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/loader-circle.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/refresh-cw.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_context__.s({
    "__iconNode": (()=>__iconNode),
    "default": (()=>RefreshCw)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-ssr] (ecmascript)");
;
const __iconNode = [
    [
        "path",
        {
            d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",
            key: "v9h5vc"
        }
    ],
    [
        "path",
        {
            d: "M21 3v5h-5",
            key: "1q7to0"
        }
    ],
    [
        "path",
        {
            d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",
            key: "3uifl3"
        }
    ],
    [
        "path",
        {
            d: "M8 16H3v5",
            key: "1cv678"
        }
    ]
];
const RefreshCw = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])("RefreshCw", __iconNode);
;
 //# sourceMappingURL=refresh-cw.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/refresh-cw.js [app-ssr] (ecmascript) <export default as RefreshCw>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RefreshCw": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$refresh$2d$cw$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$refresh$2d$cw$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/refresh-cw.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/jsqr/dist/jsQR.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
(function webpackUniversalModuleDefinition(root, factory) {
    if ("TURBOPACK compile-time truthy", 1) module.exports = factory();
    else {
        "TURBOPACK unreachable";
    }
})(typeof self !== 'undefined' ? self : this, function() {
    return /******/ function(modules) {
        /******/ // The module cache
        /******/ var installedModules = {};
        /******/ /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) {
                /******/ return installedModules[moduleId].exports;
            /******/ }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module1 = installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __webpack_require__);
            /******/ /******/ // Flag the module as loaded
            /******/ module1.l = true;
            /******/ /******/ // Return the exports of the module
            /******/ return module1.exports;
        /******/ }
        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/ /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/ /******/ // define getter function for harmony exports
        /******/ __webpack_require__.d = function(exports, name, getter) {
            /******/ if (!__webpack_require__.o(exports, name)) {
                /******/ Object.defineProperty(exports, name, {
                    /******/ configurable: false,
                    /******/ enumerable: true,
                    /******/ get: getter
                });
            /******/ }
        /******/ };
        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = function(module1) {
            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {
                return module1['default'];
            } : /******/ function getModuleExports() {
                return module1;
            };
            /******/ __webpack_require__.d(getter, 'a', getter);
            /******/ return getter;
        /******/ };
        /******/ /******/ // Object.prototype.hasOwnProperty.call
        /******/ __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/ /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = "";
        /******/ /******/ // Load entry module and return exports
        /******/ return __webpack_require__(__webpack_require__.s = 3);
    /******/ }([
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix = function() {
                function BitMatrix(data, width) {
                    this.width = width;
                    this.height = data.length / width;
                    this.data = data;
                }
                BitMatrix.createEmpty = function(width, height) {
                    return new BitMatrix(new Uint8ClampedArray(width * height), width);
                };
                BitMatrix.prototype.get = function(x, y) {
                    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
                        return false;
                    }
                    return !!this.data[y * this.width + x];
                };
                BitMatrix.prototype.set = function(x, y, v) {
                    this.data[y * this.width + x] = v ? 1 : 0;
                };
                BitMatrix.prototype.setRegion = function(left, top, width, height, v) {
                    for(var y = top; y < top + height; y++){
                        for(var x = left; x < left + width; x++){
                            this.set(x, y, !!v);
                        }
                    }
                };
                return BitMatrix;
            }();
            exports.BitMatrix = BitMatrix;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var GenericGFPoly_1 = __webpack_require__(2);
            function addOrSubtractGF(a, b) {
                return a ^ b; // tslint:disable-line:no-bitwise
            }
            exports.addOrSubtractGF = addOrSubtractGF;
            var GenericGF = function() {
                function GenericGF(primitive, size, genBase) {
                    this.primitive = primitive;
                    this.size = size;
                    this.generatorBase = genBase;
                    this.expTable = new Array(this.size);
                    this.logTable = new Array(this.size);
                    var x = 1;
                    for(var i = 0; i < this.size; i++){
                        this.expTable[i] = x;
                        x = x * 2;
                        if (x >= this.size) {
                            x = (x ^ this.primitive) & this.size - 1; // tslint:disable-line:no-bitwise
                        }
                    }
                    for(var i = 0; i < this.size - 1; i++){
                        this.logTable[this.expTable[i]] = i;
                    }
                    this.zero = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([
                        0
                    ]));
                    this.one = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([
                        1
                    ]));
                }
                GenericGF.prototype.multiply = function(a, b) {
                    if (a === 0 || b === 0) {
                        return 0;
                    }
                    return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
                };
                GenericGF.prototype.inverse = function(a) {
                    if (a === 0) {
                        throw new Error("Can't invert 0");
                    }
                    return this.expTable[this.size - this.logTable[a] - 1];
                };
                GenericGF.prototype.buildMonomial = function(degree, coefficient) {
                    if (degree < 0) {
                        throw new Error("Invalid monomial degree less than 0");
                    }
                    if (coefficient === 0) {
                        return this.zero;
                    }
                    var coefficients = new Uint8ClampedArray(degree + 1);
                    coefficients[0] = coefficient;
                    return new GenericGFPoly_1.default(this, coefficients);
                };
                GenericGF.prototype.log = function(a) {
                    if (a === 0) {
                        throw new Error("Can't take log(0)");
                    }
                    return this.logTable[a];
                };
                GenericGF.prototype.exp = function(a) {
                    return this.expTable[a];
                };
                return GenericGF;
            }();
            exports.default = GenericGF;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var GenericGF_1 = __webpack_require__(1);
            var GenericGFPoly = function() {
                function GenericGFPoly(field, coefficients) {
                    if (coefficients.length === 0) {
                        throw new Error("No coefficients.");
                    }
                    this.field = field;
                    var coefficientsLength = coefficients.length;
                    if (coefficientsLength > 1 && coefficients[0] === 0) {
                        // Leading term must be non-zero for anything except the constant polynomial "0"
                        var firstNonZero = 1;
                        while(firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0){
                            firstNonZero++;
                        }
                        if (firstNonZero === coefficientsLength) {
                            this.coefficients = field.zero.coefficients;
                        } else {
                            this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);
                            for(var i = 0; i < this.coefficients.length; i++){
                                this.coefficients[i] = coefficients[firstNonZero + i];
                            }
                        }
                    } else {
                        this.coefficients = coefficients;
                    }
                }
                GenericGFPoly.prototype.degree = function() {
                    return this.coefficients.length - 1;
                };
                GenericGFPoly.prototype.isZero = function() {
                    return this.coefficients[0] === 0;
                };
                GenericGFPoly.prototype.getCoefficient = function(degree) {
                    return this.coefficients[this.coefficients.length - 1 - degree];
                };
                GenericGFPoly.prototype.addOrSubtract = function(other) {
                    var _a;
                    if (this.isZero()) {
                        return other;
                    }
                    if (other.isZero()) {
                        return this;
                    }
                    var smallerCoefficients = this.coefficients;
                    var largerCoefficients = other.coefficients;
                    if (smallerCoefficients.length > largerCoefficients.length) {
                        _a = [
                            largerCoefficients,
                            smallerCoefficients
                        ], smallerCoefficients = _a[0], largerCoefficients = _a[1];
                    }
                    var sumDiff = new Uint8ClampedArray(largerCoefficients.length);
                    var lengthDiff = largerCoefficients.length - smallerCoefficients.length;
                    for(var i = 0; i < lengthDiff; i++){
                        sumDiff[i] = largerCoefficients[i];
                    }
                    for(var i = lengthDiff; i < largerCoefficients.length; i++){
                        sumDiff[i] = GenericGF_1.addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
                    }
                    return new GenericGFPoly(this.field, sumDiff);
                };
                GenericGFPoly.prototype.multiply = function(scalar) {
                    if (scalar === 0) {
                        return this.field.zero;
                    }
                    if (scalar === 1) {
                        return this;
                    }
                    var size = this.coefficients.length;
                    var product = new Uint8ClampedArray(size);
                    for(var i = 0; i < size; i++){
                        product[i] = this.field.multiply(this.coefficients[i], scalar);
                    }
                    return new GenericGFPoly(this.field, product);
                };
                GenericGFPoly.prototype.multiplyPoly = function(other) {
                    if (this.isZero() || other.isZero()) {
                        return this.field.zero;
                    }
                    var aCoefficients = this.coefficients;
                    var aLength = aCoefficients.length;
                    var bCoefficients = other.coefficients;
                    var bLength = bCoefficients.length;
                    var product = new Uint8ClampedArray(aLength + bLength - 1);
                    for(var i = 0; i < aLength; i++){
                        var aCoeff = aCoefficients[i];
                        for(var j = 0; j < bLength; j++){
                            product[i + j] = GenericGF_1.addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));
                        }
                    }
                    return new GenericGFPoly(this.field, product);
                };
                GenericGFPoly.prototype.multiplyByMonomial = function(degree, coefficient) {
                    if (degree < 0) {
                        throw new Error("Invalid degree less than 0");
                    }
                    if (coefficient === 0) {
                        return this.field.zero;
                    }
                    var size = this.coefficients.length;
                    var product = new Uint8ClampedArray(size + degree);
                    for(var i = 0; i < size; i++){
                        product[i] = this.field.multiply(this.coefficients[i], coefficient);
                    }
                    return new GenericGFPoly(this.field, product);
                };
                GenericGFPoly.prototype.evaluateAt = function(a) {
                    var result = 0;
                    if (a === 0) {
                        // Just return the x^0 coefficient
                        return this.getCoefficient(0);
                    }
                    var size = this.coefficients.length;
                    if (a === 1) {
                        // Just the sum of the coefficients
                        this.coefficients.forEach(function(coefficient) {
                            result = GenericGF_1.addOrSubtractGF(result, coefficient);
                        });
                        return result;
                    }
                    result = this.coefficients[0];
                    for(var i = 1; i < size; i++){
                        result = GenericGF_1.addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);
                    }
                    return result;
                };
                return GenericGFPoly;
            }();
            exports.default = GenericGFPoly;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var binarizer_1 = __webpack_require__(4);
            var decoder_1 = __webpack_require__(5);
            var extractor_1 = __webpack_require__(11);
            var locator_1 = __webpack_require__(12);
            function scan(matrix) {
                var locations = locator_1.locate(matrix);
                if (!locations) {
                    return null;
                }
                for(var _i = 0, locations_1 = locations; _i < locations_1.length; _i++){
                    var location_1 = locations_1[_i];
                    var extracted = extractor_1.extract(matrix, location_1);
                    var decoded = decoder_1.decode(extracted.matrix);
                    if (decoded) {
                        return {
                            binaryData: decoded.bytes,
                            data: decoded.text,
                            chunks: decoded.chunks,
                            version: decoded.version,
                            location: {
                                topRightCorner: extracted.mappingFunction(location_1.dimension, 0),
                                topLeftCorner: extracted.mappingFunction(0, 0),
                                bottomRightCorner: extracted.mappingFunction(location_1.dimension, location_1.dimension),
                                bottomLeftCorner: extracted.mappingFunction(0, location_1.dimension),
                                topRightFinderPattern: location_1.topRight,
                                topLeftFinderPattern: location_1.topLeft,
                                bottomLeftFinderPattern: location_1.bottomLeft,
                                bottomRightAlignmentPattern: location_1.alignmentPattern
                            }
                        };
                    }
                }
                return null;
            }
            var defaultOptions = {
                inversionAttempts: "attemptBoth"
            };
            function jsQR(data, width, height, providedOptions) {
                if (providedOptions === void 0) {
                    providedOptions = {};
                }
                var options = defaultOptions;
                Object.keys(options || {}).forEach(function(opt) {
                    options[opt] = providedOptions[opt] || options[opt];
                });
                var shouldInvert = options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst";
                var tryInvertedFirst = options.inversionAttempts === "onlyInvert" || options.inversionAttempts === "invertFirst";
                var _a = binarizer_1.binarize(data, width, height, shouldInvert), binarized = _a.binarized, inverted = _a.inverted;
                var result = scan(tryInvertedFirst ? inverted : binarized);
                if (!result && (options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst")) {
                    result = scan(tryInvertedFirst ? binarized : inverted);
                }
                return result;
            }
            jsQR.default = jsQR;
            exports.default = jsQR;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix_1 = __webpack_require__(0);
            var REGION_SIZE = 8;
            var MIN_DYNAMIC_RANGE = 24;
            function numBetween(value, min, max) {
                return value < min ? min : value > max ? max : value;
            }
            // Like BitMatrix but accepts arbitry Uint8 values
            var Matrix = function() {
                function Matrix(width, height) {
                    this.width = width;
                    this.data = new Uint8ClampedArray(width * height);
                }
                Matrix.prototype.get = function(x, y) {
                    return this.data[y * this.width + x];
                };
                Matrix.prototype.set = function(x, y, value) {
                    this.data[y * this.width + x] = value;
                };
                return Matrix;
            }();
            function binarize(data, width, height, returnInverted) {
                if (data.length !== width * height * 4) {
                    throw new Error("Malformed data passed to binarizer.");
                }
                // Convert image to greyscale
                var greyscalePixels = new Matrix(width, height);
                for(var x = 0; x < width; x++){
                    for(var y = 0; y < height; y++){
                        var r = data[(y * width + x) * 4 + 0];
                        var g = data[(y * width + x) * 4 + 1];
                        var b = data[(y * width + x) * 4 + 2];
                        greyscalePixels.set(x, y, 0.2126 * r + 0.7152 * g + 0.0722 * b);
                    }
                }
                var horizontalRegionCount = Math.ceil(width / REGION_SIZE);
                var verticalRegionCount = Math.ceil(height / REGION_SIZE);
                var blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);
                for(var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++){
                    for(var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++){
                        var sum = 0;
                        var min = Infinity;
                        var max = 0;
                        for(var y = 0; y < REGION_SIZE; y++){
                            for(var x = 0; x < REGION_SIZE; x++){
                                var pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);
                                sum += pixelLumosity;
                                min = Math.min(min, pixelLumosity);
                                max = Math.max(max, pixelLumosity);
                            }
                        }
                        var average = sum / Math.pow(REGION_SIZE, 2);
                        if (max - min <= MIN_DYNAMIC_RANGE) {
                            // If variation within the block is low, assume this is a block with only light or only
                            // dark pixels. In that case we do not want to use the average, as it would divide this
                            // low contrast area into black and white pixels, essentially creating data out of noise.
                            //
                            // Default the blackpoint for these blocks to be half the min - effectively white them out
                            average = min / 2;
                            if (verticalRegion > 0 && hortizontalRegion > 0) {
                                // Correct the "white background" assumption for blocks that have neighbors by comparing
                                // the pixels in this block to the previously calculated black points. This is based on
                                // the fact that dark barcode symbology is always surrounded by some amount of light
                                // background for which reasonable black point estimates were made. The bp estimated at
                                // the boundaries is used for the interior.
                                // The (min < bp) is arbitrary but works better than other heuristics that were tried.
                                var averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) + 2 * blackPoints.get(hortizontalRegion - 1, verticalRegion) + blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;
                                if (min < averageNeighborBlackPoint) {
                                    average = averageNeighborBlackPoint;
                                }
                            }
                        }
                        blackPoints.set(hortizontalRegion, verticalRegion, average);
                    }
                }
                var binarized = BitMatrix_1.BitMatrix.createEmpty(width, height);
                var inverted = null;
                if (returnInverted) {
                    inverted = BitMatrix_1.BitMatrix.createEmpty(width, height);
                }
                for(var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++){
                    for(var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++){
                        var left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);
                        var top_1 = numBetween(verticalRegion, 2, verticalRegionCount - 3);
                        var sum = 0;
                        for(var xRegion = -2; xRegion <= 2; xRegion++){
                            for(var yRegion = -2; yRegion <= 2; yRegion++){
                                sum += blackPoints.get(left + xRegion, top_1 + yRegion);
                            }
                        }
                        var threshold = sum / 25;
                        for(var xRegion = 0; xRegion < REGION_SIZE; xRegion++){
                            for(var yRegion = 0; yRegion < REGION_SIZE; yRegion++){
                                var x = hortizontalRegion * REGION_SIZE + xRegion;
                                var y = verticalRegion * REGION_SIZE + yRegion;
                                var lum = greyscalePixels.get(x, y);
                                binarized.set(x, y, lum <= threshold);
                                if (returnInverted) {
                                    inverted.set(x, y, !(lum <= threshold));
                                }
                            }
                        }
                    }
                }
                if (returnInverted) {
                    return {
                        binarized: binarized,
                        inverted: inverted
                    };
                }
                return {
                    binarized: binarized
                };
            }
            exports.binarize = binarize;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix_1 = __webpack_require__(0);
            var decodeData_1 = __webpack_require__(6);
            var reedsolomon_1 = __webpack_require__(9);
            var version_1 = __webpack_require__(10);
            // tslint:disable:no-bitwise
            function numBitsDiffering(x, y) {
                var z = x ^ y;
                var bitCount = 0;
                while(z){
                    bitCount++;
                    z &= z - 1;
                }
                return bitCount;
            }
            function pushBit(bit, byte) {
                return byte << 1 | bit;
            }
            // tslint:enable:no-bitwise
            var FORMAT_INFO_TABLE = [
                {
                    bits: 0x5412,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x5125,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x5E7C,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x5B4B,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x45F9,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x40CE,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x4F97,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x4AA0,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 7
                    }
                },
                {
                    bits: 0x77C4,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x72F3,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x7DAA,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x789D,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x662F,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x6318,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x6C41,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x6976,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 7
                    }
                },
                {
                    bits: 0x1689,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x13BE,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x1CE7,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x19D0,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x0762,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x0255,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x0D0C,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x083B,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 7
                    }
                },
                {
                    bits: 0x355F,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x3068,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x3F31,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x3A06,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x24B4,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x2183,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x2EDA,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x2BED,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 7
                    }
                }
            ];
            var DATA_MASKS = [
                function(p) {
                    return (p.y + p.x) % 2 === 0;
                },
                function(p) {
                    return p.y % 2 === 0;
                },
                function(p) {
                    return p.x % 3 === 0;
                },
                function(p) {
                    return (p.y + p.x) % 3 === 0;
                },
                function(p) {
                    return (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0;
                },
                function(p) {
                    return p.x * p.y % 2 + p.x * p.y % 3 === 0;
                },
                function(p) {
                    return (p.y * p.x % 2 + p.y * p.x % 3) % 2 === 0;
                },
                function(p) {
                    return ((p.y + p.x) % 2 + p.y * p.x % 3) % 2 === 0;
                }
            ];
            function buildFunctionPatternMask(version) {
                var dimension = 17 + 4 * version.versionNumber;
                var matrix = BitMatrix_1.BitMatrix.createEmpty(dimension, dimension);
                matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format
                matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format
                matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format
                // Alignment patterns
                for(var _i = 0, _a = version.alignmentPatternCenters; _i < _a.length; _i++){
                    var x = _a[_i];
                    for(var _b = 0, _c = version.alignmentPatternCenters; _b < _c.length; _b++){
                        var y = _c[_b];
                        if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {
                            matrix.setRegion(x - 2, y - 2, 5, 5, true);
                        }
                    }
                }
                matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern
                matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern
                if (version.versionNumber > 6) {
                    matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right
                    matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left
                }
                return matrix;
            }
            function readCodewords(matrix, version, formatInfo) {
                var dataMask = DATA_MASKS[formatInfo.dataMask];
                var dimension = matrix.height;
                var functionPatternMask = buildFunctionPatternMask(version);
                var codewords = [];
                var currentByte = 0;
                var bitsRead = 0;
                // Read columns in pairs, from right to left
                var readingUp = true;
                for(var columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2){
                    if (columnIndex === 6) {
                        columnIndex--;
                    }
                    for(var i = 0; i < dimension; i++){
                        var y = readingUp ? dimension - 1 - i : i;
                        for(var columnOffset = 0; columnOffset < 2; columnOffset++){
                            var x = columnIndex - columnOffset;
                            if (!functionPatternMask.get(x, y)) {
                                bitsRead++;
                                var bit = matrix.get(x, y);
                                if (dataMask({
                                    y: y,
                                    x: x
                                })) {
                                    bit = !bit;
                                }
                                currentByte = pushBit(bit, currentByte);
                                if (bitsRead === 8) {
                                    codewords.push(currentByte);
                                    bitsRead = 0;
                                    currentByte = 0;
                                }
                            }
                        }
                    }
                    readingUp = !readingUp;
                }
                return codewords;
            }
            function readVersion(matrix) {
                var dimension = matrix.height;
                var provisionalVersion = Math.floor((dimension - 17) / 4);
                if (provisionalVersion <= 6) {
                    return version_1.VERSIONS[provisionalVersion - 1];
                }
                var topRightVersionBits = 0;
                for(var y = 5; y >= 0; y--){
                    for(var x = dimension - 9; x >= dimension - 11; x--){
                        topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);
                    }
                }
                var bottomLeftVersionBits = 0;
                for(var x = 5; x >= 0; x--){
                    for(var y = dimension - 9; y >= dimension - 11; y--){
                        bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);
                    }
                }
                var bestDifference = Infinity;
                var bestVersion;
                for(var _i = 0, VERSIONS_1 = version_1.VERSIONS; _i < VERSIONS_1.length; _i++){
                    var version = VERSIONS_1[_i];
                    if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {
                        return version;
                    }
                    var difference = numBitsDiffering(topRightVersionBits, version.infoBits);
                    if (difference < bestDifference) {
                        bestVersion = version;
                        bestDifference = difference;
                    }
                    difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);
                    if (difference < bestDifference) {
                        bestVersion = version;
                        bestDifference = difference;
                    }
                }
                // We can tolerate up to 3 bits of error since no two version info codewords will
                // differ in less than 8 bits.
                if (bestDifference <= 3) {
                    return bestVersion;
                }
            }
            function readFormatInformation(matrix) {
                var topLeftFormatInfoBits = 0;
                for(var x = 0; x <= 8; x++){
                    if (x !== 6) {
                        topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);
                    }
                }
                for(var y = 7; y >= 0; y--){
                    if (y !== 6) {
                        topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);
                    }
                }
                var dimension = matrix.height;
                var topRightBottomRightFormatInfoBits = 0;
                for(var y = dimension - 1; y >= dimension - 7; y--){
                    topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);
                }
                for(var x = dimension - 8; x < dimension; x++){
                    topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);
                }
                var bestDifference = Infinity;
                var bestFormatInfo = null;
                for(var _i = 0, FORMAT_INFO_TABLE_1 = FORMAT_INFO_TABLE; _i < FORMAT_INFO_TABLE_1.length; _i++){
                    var _a = FORMAT_INFO_TABLE_1[_i], bits = _a.bits, formatInfo = _a.formatInfo;
                    if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {
                        return formatInfo;
                    }
                    var difference = numBitsDiffering(topLeftFormatInfoBits, bits);
                    if (difference < bestDifference) {
                        bestFormatInfo = formatInfo;
                        bestDifference = difference;
                    }
                    if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) {
                        difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);
                        if (difference < bestDifference) {
                            bestFormatInfo = formatInfo;
                            bestDifference = difference;
                        }
                    }
                }
                // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match
                if (bestDifference <= 3) {
                    return bestFormatInfo;
                }
                return null;
            }
            function getDataBlocks(codewords, version, ecLevel) {
                var ecInfo = version.errorCorrectionLevels[ecLevel];
                var dataBlocks = [];
                var totalCodewords = 0;
                ecInfo.ecBlocks.forEach(function(block) {
                    for(var i = 0; i < block.numBlocks; i++){
                        dataBlocks.push({
                            numDataCodewords: block.dataCodewordsPerBlock,
                            codewords: []
                        });
                        totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;
                    }
                });
                // In some cases the QR code will be malformed enough that we pull off more or less than we should.
                // If we pull off less there's nothing we can do.
                // If we pull off more we can safely truncate
                if (codewords.length < totalCodewords) {
                    return null;
                }
                codewords = codewords.slice(0, totalCodewords);
                var shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;
                // Pull codewords to fill the blocks up to the minimum size
                for(var i = 0; i < shortBlockSize; i++){
                    for(var _i = 0, dataBlocks_1 = dataBlocks; _i < dataBlocks_1.length; _i++){
                        var dataBlock = dataBlocks_1[_i];
                        dataBlock.codewords.push(codewords.shift());
                    }
                }
                // If there are any large blocks, pull codewords to fill the last element of those
                if (ecInfo.ecBlocks.length > 1) {
                    var smallBlockCount = ecInfo.ecBlocks[0].numBlocks;
                    var largeBlockCount = ecInfo.ecBlocks[1].numBlocks;
                    for(var i = 0; i < largeBlockCount; i++){
                        dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());
                    }
                }
                // Add the rest of the codewords to the blocks. These are the error correction codewords.
                while(codewords.length > 0){
                    for(var _a = 0, dataBlocks_2 = dataBlocks; _a < dataBlocks_2.length; _a++){
                        var dataBlock = dataBlocks_2[_a];
                        dataBlock.codewords.push(codewords.shift());
                    }
                }
                return dataBlocks;
            }
            function decodeMatrix(matrix) {
                var version = readVersion(matrix);
                if (!version) {
                    return null;
                }
                var formatInfo = readFormatInformation(matrix);
                if (!formatInfo) {
                    return null;
                }
                var codewords = readCodewords(matrix, version, formatInfo);
                var dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);
                if (!dataBlocks) {
                    return null;
                }
                // Count total number of data bytes
                var totalBytes = dataBlocks.reduce(function(a, b) {
                    return a + b.numDataCodewords;
                }, 0);
                var resultBytes = new Uint8ClampedArray(totalBytes);
                var resultIndex = 0;
                for(var _i = 0, dataBlocks_3 = dataBlocks; _i < dataBlocks_3.length; _i++){
                    var dataBlock = dataBlocks_3[_i];
                    var correctedBytes = reedsolomon_1.decode(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);
                    if (!correctedBytes) {
                        return null;
                    }
                    for(var i = 0; i < dataBlock.numDataCodewords; i++){
                        resultBytes[resultIndex++] = correctedBytes[i];
                    }
                }
                try {
                    return decodeData_1.decode(resultBytes, version.versionNumber);
                } catch (_a) {
                    return null;
                }
            }
            function decode(matrix) {
                if (matrix == null) {
                    return null;
                }
                var result = decodeMatrix(matrix);
                if (result) {
                    return result;
                }
                // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.
                for(var x = 0; x < matrix.width; x++){
                    for(var y = x + 1; y < matrix.height; y++){
                        if (matrix.get(x, y) !== matrix.get(y, x)) {
                            matrix.set(x, y, !matrix.get(x, y));
                            matrix.set(y, x, !matrix.get(y, x));
                        }
                    }
                }
                return decodeMatrix(matrix);
            }
            exports.decode = decode;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // tslint:disable:no-bitwise
            var BitStream_1 = __webpack_require__(7);
            var shiftJISTable_1 = __webpack_require__(8);
            var Mode;
            (function(Mode) {
                Mode["Numeric"] = "numeric";
                Mode["Alphanumeric"] = "alphanumeric";
                Mode["Byte"] = "byte";
                Mode["Kanji"] = "kanji";
                Mode["ECI"] = "eci";
            })(Mode = exports.Mode || (exports.Mode = {}));
            var ModeByte;
            (function(ModeByte) {
                ModeByte[ModeByte["Terminator"] = 0] = "Terminator";
                ModeByte[ModeByte["Numeric"] = 1] = "Numeric";
                ModeByte[ModeByte["Alphanumeric"] = 2] = "Alphanumeric";
                ModeByte[ModeByte["Byte"] = 4] = "Byte";
                ModeByte[ModeByte["Kanji"] = 8] = "Kanji";
                ModeByte[ModeByte["ECI"] = 7] = "ECI";
            // StructuredAppend = 0x3,
            // FNC1FirstPosition = 0x5,
            // FNC1SecondPosition = 0x9,
            })(ModeByte || (ModeByte = {}));
            function decodeNumeric(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    10,
                    12,
                    14
                ][size];
                var length = stream.readBits(characterCountSize);
                // Read digits in groups of 3
                while(length >= 3){
                    var num = stream.readBits(10);
                    if (num >= 1000) {
                        throw new Error("Invalid numeric value above 999");
                    }
                    var a = Math.floor(num / 100);
                    var b = Math.floor(num / 10) % 10;
                    var c = num % 10;
                    bytes.push(48 + a, 48 + b, 48 + c);
                    text += a.toString() + b.toString() + c.toString();
                    length -= 3;
                }
                // If the number of digits aren't a multiple of 3, the remaining digits are special cased.
                if (length === 2) {
                    var num = stream.readBits(7);
                    if (num >= 100) {
                        throw new Error("Invalid numeric value above 99");
                    }
                    var a = Math.floor(num / 10);
                    var b = num % 10;
                    bytes.push(48 + a, 48 + b);
                    text += a.toString() + b.toString();
                } else if (length === 1) {
                    var num = stream.readBits(4);
                    if (num >= 10) {
                        throw new Error("Invalid numeric value above 9");
                    }
                    bytes.push(48 + num);
                    text += num.toString();
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            var AlphanumericCharacterCodes = [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "A",
                "B",
                "C",
                "D",
                "E",
                "F",
                "G",
                "H",
                "I",
                "J",
                "K",
                "L",
                "M",
                "N",
                "O",
                "P",
                "Q",
                "R",
                "S",
                "T",
                "U",
                "V",
                "W",
                "X",
                "Y",
                "Z",
                " ",
                "$",
                "%",
                "*",
                "+",
                "-",
                ".",
                "/",
                ":"
            ];
            function decodeAlphanumeric(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    9,
                    11,
                    13
                ][size];
                var length = stream.readBits(characterCountSize);
                while(length >= 2){
                    var v = stream.readBits(11);
                    var a = Math.floor(v / 45);
                    var b = v % 45;
                    bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));
                    text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];
                    length -= 2;
                }
                if (length === 1) {
                    var a = stream.readBits(6);
                    bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));
                    text += AlphanumericCharacterCodes[a];
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            function decodeByte(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    8,
                    16,
                    16
                ][size];
                var length = stream.readBits(characterCountSize);
                for(var i = 0; i < length; i++){
                    var b = stream.readBits(8);
                    bytes.push(b);
                }
                try {
                    text += decodeURIComponent(bytes.map(function(b) {
                        return "%" + ("0" + b.toString(16)).substr(-2);
                    }).join(""));
                } catch (_a) {
                // failed to decode
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            function decodeKanji(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    8,
                    10,
                    12
                ][size];
                var length = stream.readBits(characterCountSize);
                for(var i = 0; i < length; i++){
                    var k = stream.readBits(13);
                    var c = Math.floor(k / 0xC0) << 8 | k % 0xC0;
                    if (c < 0x1F00) {
                        c += 0x8140;
                    } else {
                        c += 0xC140;
                    }
                    bytes.push(c >> 8, c & 0xFF);
                    text += String.fromCharCode(shiftJISTable_1.shiftJISTable[c]);
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            function decode(data, version) {
                var _a, _b, _c, _d;
                var stream = new BitStream_1.BitStream(data);
                // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).
                var size = version <= 9 ? 0 : version <= 26 ? 1 : 2;
                var result = {
                    text: "",
                    bytes: [],
                    chunks: [],
                    version: version
                };
                while(stream.available() >= 4){
                    var mode = stream.readBits(4);
                    if (mode === ModeByte.Terminator) {
                        return result;
                    } else if (mode === ModeByte.ECI) {
                        if (stream.readBits(1) === 0) {
                            result.chunks.push({
                                type: Mode.ECI,
                                assignmentNumber: stream.readBits(7)
                            });
                        } else if (stream.readBits(1) === 0) {
                            result.chunks.push({
                                type: Mode.ECI,
                                assignmentNumber: stream.readBits(14)
                            });
                        } else if (stream.readBits(1) === 0) {
                            result.chunks.push({
                                type: Mode.ECI,
                                assignmentNumber: stream.readBits(21)
                            });
                        } else {
                            // ECI data seems corrupted
                            result.chunks.push({
                                type: Mode.ECI,
                                assignmentNumber: -1
                            });
                        }
                    } else if (mode === ModeByte.Numeric) {
                        var numericResult = decodeNumeric(stream, size);
                        result.text += numericResult.text;
                        (_a = result.bytes).push.apply(_a, numericResult.bytes);
                        result.chunks.push({
                            type: Mode.Numeric,
                            text: numericResult.text
                        });
                    } else if (mode === ModeByte.Alphanumeric) {
                        var alphanumericResult = decodeAlphanumeric(stream, size);
                        result.text += alphanumericResult.text;
                        (_b = result.bytes).push.apply(_b, alphanumericResult.bytes);
                        result.chunks.push({
                            type: Mode.Alphanumeric,
                            text: alphanumericResult.text
                        });
                    } else if (mode === ModeByte.Byte) {
                        var byteResult = decodeByte(stream, size);
                        result.text += byteResult.text;
                        (_c = result.bytes).push.apply(_c, byteResult.bytes);
                        result.chunks.push({
                            type: Mode.Byte,
                            bytes: byteResult.bytes,
                            text: byteResult.text
                        });
                    } else if (mode === ModeByte.Kanji) {
                        var kanjiResult = decodeKanji(stream, size);
                        result.text += kanjiResult.text;
                        (_d = result.bytes).push.apply(_d, kanjiResult.bytes);
                        result.chunks.push({
                            type: Mode.Kanji,
                            bytes: kanjiResult.bytes,
                            text: kanjiResult.text
                        });
                    }
                }
                // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker
                if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {
                    return result;
                }
            }
            exports.decode = decode;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            // tslint:disable:no-bitwise
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitStream = function() {
                function BitStream(bytes) {
                    this.byteOffset = 0;
                    this.bitOffset = 0;
                    this.bytes = bytes;
                }
                BitStream.prototype.readBits = function(numBits) {
                    if (numBits < 1 || numBits > 32 || numBits > this.available()) {
                        throw new Error("Cannot read " + numBits.toString() + " bits");
                    }
                    var result = 0;
                    // First, read remainder from current byte
                    if (this.bitOffset > 0) {
                        var bitsLeft = 8 - this.bitOffset;
                        var toRead = numBits < bitsLeft ? numBits : bitsLeft;
                        var bitsToNotRead = bitsLeft - toRead;
                        var mask = 0xFF >> 8 - toRead << bitsToNotRead;
                        result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                        numBits -= toRead;
                        this.bitOffset += toRead;
                        if (this.bitOffset === 8) {
                            this.bitOffset = 0;
                            this.byteOffset++;
                        }
                    }
                    // Next read whole bytes
                    if (numBits > 0) {
                        while(numBits >= 8){
                            result = result << 8 | this.bytes[this.byteOffset] & 0xFF;
                            this.byteOffset++;
                            numBits -= 8;
                        }
                        // Finally read a partial byte
                        if (numBits > 0) {
                            var bitsToNotRead = 8 - numBits;
                            var mask = 0xFF >> bitsToNotRead << bitsToNotRead;
                            result = result << numBits | (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                            this.bitOffset += numBits;
                        }
                    }
                    return result;
                };
                BitStream.prototype.available = function() {
                    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
                };
                return BitStream;
            }();
            exports.BitStream = BitStream;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.shiftJISTable = {
                0x20: 0x0020,
                0x21: 0x0021,
                0x22: 0x0022,
                0x23: 0x0023,
                0x24: 0x0024,
                0x25: 0x0025,
                0x26: 0x0026,
                0x27: 0x0027,
                0x28: 0x0028,
                0x29: 0x0029,
                0x2A: 0x002A,
                0x2B: 0x002B,
                0x2C: 0x002C,
                0x2D: 0x002D,
                0x2E: 0x002E,
                0x2F: 0x002F,
                0x30: 0x0030,
                0x31: 0x0031,
                0x32: 0x0032,
                0x33: 0x0033,
                0x34: 0x0034,
                0x35: 0x0035,
                0x36: 0x0036,
                0x37: 0x0037,
                0x38: 0x0038,
                0x39: 0x0039,
                0x3A: 0x003A,
                0x3B: 0x003B,
                0x3C: 0x003C,
                0x3D: 0x003D,
                0x3E: 0x003E,
                0x3F: 0x003F,
                0x40: 0x0040,
                0x41: 0x0041,
                0x42: 0x0042,
                0x43: 0x0043,
                0x44: 0x0044,
                0x45: 0x0045,
                0x46: 0x0046,
                0x47: 0x0047,
                0x48: 0x0048,
                0x49: 0x0049,
                0x4A: 0x004A,
                0x4B: 0x004B,
                0x4C: 0x004C,
                0x4D: 0x004D,
                0x4E: 0x004E,
                0x4F: 0x004F,
                0x50: 0x0050,
                0x51: 0x0051,
                0x52: 0x0052,
                0x53: 0x0053,
                0x54: 0x0054,
                0x55: 0x0055,
                0x56: 0x0056,
                0x57: 0x0057,
                0x58: 0x0058,
                0x59: 0x0059,
                0x5A: 0x005A,
                0x5B: 0x005B,
                0x5C: 0x00A5,
                0x5D: 0x005D,
                0x5E: 0x005E,
                0x5F: 0x005F,
                0x60: 0x0060,
                0x61: 0x0061,
                0x62: 0x0062,
                0x63: 0x0063,
                0x64: 0x0064,
                0x65: 0x0065,
                0x66: 0x0066,
                0x67: 0x0067,
                0x68: 0x0068,
                0x69: 0x0069,
                0x6A: 0x006A,
                0x6B: 0x006B,
                0x6C: 0x006C,
                0x6D: 0x006D,
                0x6E: 0x006E,
                0x6F: 0x006F,
                0x70: 0x0070,
                0x71: 0x0071,
                0x72: 0x0072,
                0x73: 0x0073,
                0x74: 0x0074,
                0x75: 0x0075,
                0x76: 0x0076,
                0x77: 0x0077,
                0x78: 0x0078,
                0x79: 0x0079,
                0x7A: 0x007A,
                0x7B: 0x007B,
                0x7C: 0x007C,
                0x7D: 0x007D,
                0x7E: 0x203E,
                0x8140: 0x3000,
                0x8141: 0x3001,
                0x8142: 0x3002,
                0x8143: 0xFF0C,
                0x8144: 0xFF0E,
                0x8145: 0x30FB,
                0x8146: 0xFF1A,
                0x8147: 0xFF1B,
                0x8148: 0xFF1F,
                0x8149: 0xFF01,
                0x814A: 0x309B,
                0x814B: 0x309C,
                0x814C: 0x00B4,
                0x814D: 0xFF40,
                0x814E: 0x00A8,
                0x814F: 0xFF3E,
                0x8150: 0xFFE3,
                0x8151: 0xFF3F,
                0x8152: 0x30FD,
                0x8153: 0x30FE,
                0x8154: 0x309D,
                0x8155: 0x309E,
                0x8156: 0x3003,
                0x8157: 0x4EDD,
                0x8158: 0x3005,
                0x8159: 0x3006,
                0x815A: 0x3007,
                0x815B: 0x30FC,
                0x815C: 0x2015,
                0x815D: 0x2010,
                0x815E: 0xFF0F,
                0x815F: 0x005C,
                0x8160: 0x301C,
                0x8161: 0x2016,
                0x8162: 0xFF5C,
                0x8163: 0x2026,
                0x8164: 0x2025,
                0x8165: 0x2018,
                0x8166: 0x2019,
                0x8167: 0x201C,
                0x8168: 0x201D,
                0x8169: 0xFF08,
                0x816A: 0xFF09,
                0x816B: 0x3014,
                0x816C: 0x3015,
                0x816D: 0xFF3B,
                0x816E: 0xFF3D,
                0x816F: 0xFF5B,
                0x8170: 0xFF5D,
                0x8171: 0x3008,
                0x8172: 0x3009,
                0x8173: 0x300A,
                0x8174: 0x300B,
                0x8175: 0x300C,
                0x8176: 0x300D,
                0x8177: 0x300E,
                0x8178: 0x300F,
                0x8179: 0x3010,
                0x817A: 0x3011,
                0x817B: 0xFF0B,
                0x817C: 0x2212,
                0x817D: 0x00B1,
                0x817E: 0x00D7,
                0x8180: 0x00F7,
                0x8181: 0xFF1D,
                0x8182: 0x2260,
                0x8183: 0xFF1C,
                0x8184: 0xFF1E,
                0x8185: 0x2266,
                0x8186: 0x2267,
                0x8187: 0x221E,
                0x8188: 0x2234,
                0x8189: 0x2642,
                0x818A: 0x2640,
                0x818B: 0x00B0,
                0x818C: 0x2032,
                0x818D: 0x2033,
                0x818E: 0x2103,
                0x818F: 0xFFE5,
                0x8190: 0xFF04,
                0x8191: 0x00A2,
                0x8192: 0x00A3,
                0x8193: 0xFF05,
                0x8194: 0xFF03,
                0x8195: 0xFF06,
                0x8196: 0xFF0A,
                0x8197: 0xFF20,
                0x8198: 0x00A7,
                0x8199: 0x2606,
                0x819A: 0x2605,
                0x819B: 0x25CB,
                0x819C: 0x25CF,
                0x819D: 0x25CE,
                0x819E: 0x25C7,
                0x819F: 0x25C6,
                0x81A0: 0x25A1,
                0x81A1: 0x25A0,
                0x81A2: 0x25B3,
                0x81A3: 0x25B2,
                0x81A4: 0x25BD,
                0x81A5: 0x25BC,
                0x81A6: 0x203B,
                0x81A7: 0x3012,
                0x81A8: 0x2192,
                0x81A9: 0x2190,
                0x81AA: 0x2191,
                0x81AB: 0x2193,
                0x81AC: 0x3013,
                0x81B8: 0x2208,
                0x81B9: 0x220B,
                0x81BA: 0x2286,
                0x81BB: 0x2287,
                0x81BC: 0x2282,
                0x81BD: 0x2283,
                0x81BE: 0x222A,
                0x81BF: 0x2229,
                0x81C8: 0x2227,
                0x81C9: 0x2228,
                0x81CA: 0x00AC,
                0x81CB: 0x21D2,
                0x81CC: 0x21D4,
                0x81CD: 0x2200,
                0x81CE: 0x2203,
                0x81DA: 0x2220,
                0x81DB: 0x22A5,
                0x81DC: 0x2312,
                0x81DD: 0x2202,
                0x81DE: 0x2207,
                0x81DF: 0x2261,
                0x81E0: 0x2252,
                0x81E1: 0x226A,
                0x81E2: 0x226B,
                0x81E3: 0x221A,
                0x81E4: 0x223D,
                0x81E5: 0x221D,
                0x81E6: 0x2235,
                0x81E7: 0x222B,
                0x81E8: 0x222C,
                0x81F0: 0x212B,
                0x81F1: 0x2030,
                0x81F2: 0x266F,
                0x81F3: 0x266D,
                0x81F4: 0x266A,
                0x81F5: 0x2020,
                0x81F6: 0x2021,
                0x81F7: 0x00B6,
                0x81FC: 0x25EF,
                0x824F: 0xFF10,
                0x8250: 0xFF11,
                0x8251: 0xFF12,
                0x8252: 0xFF13,
                0x8253: 0xFF14,
                0x8254: 0xFF15,
                0x8255: 0xFF16,
                0x8256: 0xFF17,
                0x8257: 0xFF18,
                0x8258: 0xFF19,
                0x8260: 0xFF21,
                0x8261: 0xFF22,
                0x8262: 0xFF23,
                0x8263: 0xFF24,
                0x8264: 0xFF25,
                0x8265: 0xFF26,
                0x8266: 0xFF27,
                0x8267: 0xFF28,
                0x8268: 0xFF29,
                0x8269: 0xFF2A,
                0x826A: 0xFF2B,
                0x826B: 0xFF2C,
                0x826C: 0xFF2D,
                0x826D: 0xFF2E,
                0x826E: 0xFF2F,
                0x826F: 0xFF30,
                0x8270: 0xFF31,
                0x8271: 0xFF32,
                0x8272: 0xFF33,
                0x8273: 0xFF34,
                0x8274: 0xFF35,
                0x8275: 0xFF36,
                0x8276: 0xFF37,
                0x8277: 0xFF38,
                0x8278: 0xFF39,
                0x8279: 0xFF3A,
                0x8281: 0xFF41,
                0x8282: 0xFF42,
                0x8283: 0xFF43,
                0x8284: 0xFF44,
                0x8285: 0xFF45,
                0x8286: 0xFF46,
                0x8287: 0xFF47,
                0x8288: 0xFF48,
                0x8289: 0xFF49,
                0x828A: 0xFF4A,
                0x828B: 0xFF4B,
                0x828C: 0xFF4C,
                0x828D: 0xFF4D,
                0x828E: 0xFF4E,
                0x828F: 0xFF4F,
                0x8290: 0xFF50,
                0x8291: 0xFF51,
                0x8292: 0xFF52,
                0x8293: 0xFF53,
                0x8294: 0xFF54,
                0x8295: 0xFF55,
                0x8296: 0xFF56,
                0x8297: 0xFF57,
                0x8298: 0xFF58,
                0x8299: 0xFF59,
                0x829A: 0xFF5A,
                0x829F: 0x3041,
                0x82A0: 0x3042,
                0x82A1: 0x3043,
                0x82A2: 0x3044,
                0x82A3: 0x3045,
                0x82A4: 0x3046,
                0x82A5: 0x3047,
                0x82A6: 0x3048,
                0x82A7: 0x3049,
                0x82A8: 0x304A,
                0x82A9: 0x304B,
                0x82AA: 0x304C,
                0x82AB: 0x304D,
                0x82AC: 0x304E,
                0x82AD: 0x304F,
                0x82AE: 0x3050,
                0x82AF: 0x3051,
                0x82B0: 0x3052,
                0x82B1: 0x3053,
                0x82B2: 0x3054,
                0x82B3: 0x3055,
                0x82B4: 0x3056,
                0x82B5: 0x3057,
                0x82B6: 0x3058,
                0x82B7: 0x3059,
                0x82B8: 0x305A,
                0x82B9: 0x305B,
                0x82BA: 0x305C,
                0x82BB: 0x305D,
                0x82BC: 0x305E,
                0x82BD: 0x305F,
                0x82BE: 0x3060,
                0x82BF: 0x3061,
                0x82C0: 0x3062,
                0x82C1: 0x3063,
                0x82C2: 0x3064,
                0x82C3: 0x3065,
                0x82C4: 0x3066,
                0x82C5: 0x3067,
                0x82C6: 0x3068,
                0x82C7: 0x3069,
                0x82C8: 0x306A,
                0x82C9: 0x306B,
                0x82CA: 0x306C,
                0x82CB: 0x306D,
                0x82CC: 0x306E,
                0x82CD: 0x306F,
                0x82CE: 0x3070,
                0x82CF: 0x3071,
                0x82D0: 0x3072,
                0x82D1: 0x3073,
                0x82D2: 0x3074,
                0x82D3: 0x3075,
                0x82D4: 0x3076,
                0x82D5: 0x3077,
                0x82D6: 0x3078,
                0x82D7: 0x3079,
                0x82D8: 0x307A,
                0x82D9: 0x307B,
                0x82DA: 0x307C,
                0x82DB: 0x307D,
                0x82DC: 0x307E,
                0x82DD: 0x307F,
                0x82DE: 0x3080,
                0x82DF: 0x3081,
                0x82E0: 0x3082,
                0x82E1: 0x3083,
                0x82E2: 0x3084,
                0x82E3: 0x3085,
                0x82E4: 0x3086,
                0x82E5: 0x3087,
                0x82E6: 0x3088,
                0x82E7: 0x3089,
                0x82E8: 0x308A,
                0x82E9: 0x308B,
                0x82EA: 0x308C,
                0x82EB: 0x308D,
                0x82EC: 0x308E,
                0x82ED: 0x308F,
                0x82EE: 0x3090,
                0x82EF: 0x3091,
                0x82F0: 0x3092,
                0x82F1: 0x3093,
                0x8340: 0x30A1,
                0x8341: 0x30A2,
                0x8342: 0x30A3,
                0x8343: 0x30A4,
                0x8344: 0x30A5,
                0x8345: 0x30A6,
                0x8346: 0x30A7,
                0x8347: 0x30A8,
                0x8348: 0x30A9,
                0x8349: 0x30AA,
                0x834A: 0x30AB,
                0x834B: 0x30AC,
                0x834C: 0x30AD,
                0x834D: 0x30AE,
                0x834E: 0x30AF,
                0x834F: 0x30B0,
                0x8350: 0x30B1,
                0x8351: 0x30B2,
                0x8352: 0x30B3,
                0x8353: 0x30B4,
                0x8354: 0x30B5,
                0x8355: 0x30B6,
                0x8356: 0x30B7,
                0x8357: 0x30B8,
                0x8358: 0x30B9,
                0x8359: 0x30BA,
                0x835A: 0x30BB,
                0x835B: 0x30BC,
                0x835C: 0x30BD,
                0x835D: 0x30BE,
                0x835E: 0x30BF,
                0x835F: 0x30C0,
                0x8360: 0x30C1,
                0x8361: 0x30C2,
                0x8362: 0x30C3,
                0x8363: 0x30C4,
                0x8364: 0x30C5,
                0x8365: 0x30C6,
                0x8366: 0x30C7,
                0x8367: 0x30C8,
                0x8368: 0x30C9,
                0x8369: 0x30CA,
                0x836A: 0x30CB,
                0x836B: 0x30CC,
                0x836C: 0x30CD,
                0x836D: 0x30CE,
                0x836E: 0x30CF,
                0x836F: 0x30D0,
                0x8370: 0x30D1,
                0x8371: 0x30D2,
                0x8372: 0x30D3,
                0x8373: 0x30D4,
                0x8374: 0x30D5,
                0x8375: 0x30D6,
                0x8376: 0x30D7,
                0x8377: 0x30D8,
                0x8378: 0x30D9,
                0x8379: 0x30DA,
                0x837A: 0x30DB,
                0x837B: 0x30DC,
                0x837C: 0x30DD,
                0x837D: 0x30DE,
                0x837E: 0x30DF,
                0x8380: 0x30E0,
                0x8381: 0x30E1,
                0x8382: 0x30E2,
                0x8383: 0x30E3,
                0x8384: 0x30E4,
                0x8385: 0x30E5,
                0x8386: 0x30E6,
                0x8387: 0x30E7,
                0x8388: 0x30E8,
                0x8389: 0x30E9,
                0x838A: 0x30EA,
                0x838B: 0x30EB,
                0x838C: 0x30EC,
                0x838D: 0x30ED,
                0x838E: 0x30EE,
                0x838F: 0x30EF,
                0x8390: 0x30F0,
                0x8391: 0x30F1,
                0x8392: 0x30F2,
                0x8393: 0x30F3,
                0x8394: 0x30F4,
                0x8395: 0x30F5,
                0x8396: 0x30F6,
                0x839F: 0x0391,
                0x83A0: 0x0392,
                0x83A1: 0x0393,
                0x83A2: 0x0394,
                0x83A3: 0x0395,
                0x83A4: 0x0396,
                0x83A5: 0x0397,
                0x83A6: 0x0398,
                0x83A7: 0x0399,
                0x83A8: 0x039A,
                0x83A9: 0x039B,
                0x83AA: 0x039C,
                0x83AB: 0x039D,
                0x83AC: 0x039E,
                0x83AD: 0x039F,
                0x83AE: 0x03A0,
                0x83AF: 0x03A1,
                0x83B0: 0x03A3,
                0x83B1: 0x03A4,
                0x83B2: 0x03A5,
                0x83B3: 0x03A6,
                0x83B4: 0x03A7,
                0x83B5: 0x03A8,
                0x83B6: 0x03A9,
                0x83BF: 0x03B1,
                0x83C0: 0x03B2,
                0x83C1: 0x03B3,
                0x83C2: 0x03B4,
                0x83C3: 0x03B5,
                0x83C4: 0x03B6,
                0x83C5: 0x03B7,
                0x83C6: 0x03B8,
                0x83C7: 0x03B9,
                0x83C8: 0x03BA,
                0x83C9: 0x03BB,
                0x83CA: 0x03BC,
                0x83CB: 0x03BD,
                0x83CC: 0x03BE,
                0x83CD: 0x03BF,
                0x83CE: 0x03C0,
                0x83CF: 0x03C1,
                0x83D0: 0x03C3,
                0x83D1: 0x03C4,
                0x83D2: 0x03C5,
                0x83D3: 0x03C6,
                0x83D4: 0x03C7,
                0x83D5: 0x03C8,
                0x83D6: 0x03C9,
                0x8440: 0x0410,
                0x8441: 0x0411,
                0x8442: 0x0412,
                0x8443: 0x0413,
                0x8444: 0x0414,
                0x8445: 0x0415,
                0x8446: 0x0401,
                0x8447: 0x0416,
                0x8448: 0x0417,
                0x8449: 0x0418,
                0x844A: 0x0419,
                0x844B: 0x041A,
                0x844C: 0x041B,
                0x844D: 0x041C,
                0x844E: 0x041D,
                0x844F: 0x041E,
                0x8450: 0x041F,
                0x8451: 0x0420,
                0x8452: 0x0421,
                0x8453: 0x0422,
                0x8454: 0x0423,
                0x8455: 0x0424,
                0x8456: 0x0425,
                0x8457: 0x0426,
                0x8458: 0x0427,
                0x8459: 0x0428,
                0x845A: 0x0429,
                0x845B: 0x042A,
                0x845C: 0x042B,
                0x845D: 0x042C,
                0x845E: 0x042D,
                0x845F: 0x042E,
                0x8460: 0x042F,
                0x8470: 0x0430,
                0x8471: 0x0431,
                0x8472: 0x0432,
                0x8473: 0x0433,
                0x8474: 0x0434,
                0x8475: 0x0435,
                0x8476: 0x0451,
                0x8477: 0x0436,
                0x8478: 0x0437,
                0x8479: 0x0438,
                0x847A: 0x0439,
                0x847B: 0x043A,
                0x847C: 0x043B,
                0x847D: 0x043C,
                0x847E: 0x043D,
                0x8480: 0x043E,
                0x8481: 0x043F,
                0x8482: 0x0440,
                0x8483: 0x0441,
                0x8484: 0x0442,
                0x8485: 0x0443,
                0x8486: 0x0444,
                0x8487: 0x0445,
                0x8488: 0x0446,
                0x8489: 0x0447,
                0x848A: 0x0448,
                0x848B: 0x0449,
                0x848C: 0x044A,
                0x848D: 0x044B,
                0x848E: 0x044C,
                0x848F: 0x044D,
                0x8490: 0x044E,
                0x8491: 0x044F,
                0x849F: 0x2500,
                0x84A0: 0x2502,
                0x84A1: 0x250C,
                0x84A2: 0x2510,
                0x84A3: 0x2518,
                0x84A4: 0x2514,
                0x84A5: 0x251C,
                0x84A6: 0x252C,
                0x84A7: 0x2524,
                0x84A8: 0x2534,
                0x84A9: 0x253C,
                0x84AA: 0x2501,
                0x84AB: 0x2503,
                0x84AC: 0x250F,
                0x84AD: 0x2513,
                0x84AE: 0x251B,
                0x84AF: 0x2517,
                0x84B0: 0x2523,
                0x84B1: 0x2533,
                0x84B2: 0x252B,
                0x84B3: 0x253B,
                0x84B4: 0x254B,
                0x84B5: 0x2520,
                0x84B6: 0x252F,
                0x84B7: 0x2528,
                0x84B8: 0x2537,
                0x84B9: 0x253F,
                0x84BA: 0x251D,
                0x84BB: 0x2530,
                0x84BC: 0x2525,
                0x84BD: 0x2538,
                0x84BE: 0x2542,
                0x889F: 0x4E9C,
                0x88A0: 0x5516,
                0x88A1: 0x5A03,
                0x88A2: 0x963F,
                0x88A3: 0x54C0,
                0x88A4: 0x611B,
                0x88A5: 0x6328,
                0x88A6: 0x59F6,
                0x88A7: 0x9022,
                0x88A8: 0x8475,
                0x88A9: 0x831C,
                0x88AA: 0x7A50,
                0x88AB: 0x60AA,
                0x88AC: 0x63E1,
                0x88AD: 0x6E25,
                0x88AE: 0x65ED,
                0x88AF: 0x8466,
                0x88B0: 0x82A6,
                0x88B1: 0x9BF5,
                0x88B2: 0x6893,
                0x88B3: 0x5727,
                0x88B4: 0x65A1,
                0x88B5: 0x6271,
                0x88B6: 0x5B9B,
                0x88B7: 0x59D0,
                0x88B8: 0x867B,
                0x88B9: 0x98F4,
                0x88BA: 0x7D62,
                0x88BB: 0x7DBE,
                0x88BC: 0x9B8E,
                0x88BD: 0x6216,
                0x88BE: 0x7C9F,
                0x88BF: 0x88B7,
                0x88C0: 0x5B89,
                0x88C1: 0x5EB5,
                0x88C2: 0x6309,
                0x88C3: 0x6697,
                0x88C4: 0x6848,
                0x88C5: 0x95C7,
                0x88C6: 0x978D,
                0x88C7: 0x674F,
                0x88C8: 0x4EE5,
                0x88C9: 0x4F0A,
                0x88CA: 0x4F4D,
                0x88CB: 0x4F9D,
                0x88CC: 0x5049,
                0x88CD: 0x56F2,
                0x88CE: 0x5937,
                0x88CF: 0x59D4,
                0x88D0: 0x5A01,
                0x88D1: 0x5C09,
                0x88D2: 0x60DF,
                0x88D3: 0x610F,
                0x88D4: 0x6170,
                0x88D5: 0x6613,
                0x88D6: 0x6905,
                0x88D7: 0x70BA,
                0x88D8: 0x754F,
                0x88D9: 0x7570,
                0x88DA: 0x79FB,
                0x88DB: 0x7DAD,
                0x88DC: 0x7DEF,
                0x88DD: 0x80C3,
                0x88DE: 0x840E,
                0x88DF: 0x8863,
                0x88E0: 0x8B02,
                0x88E1: 0x9055,
                0x88E2: 0x907A,
                0x88E3: 0x533B,
                0x88E4: 0x4E95,
                0x88E5: 0x4EA5,
                0x88E6: 0x57DF,
                0x88E7: 0x80B2,
                0x88E8: 0x90C1,
                0x88E9: 0x78EF,
                0x88EA: 0x4E00,
                0x88EB: 0x58F1,
                0x88EC: 0x6EA2,
                0x88ED: 0x9038,
                0x88EE: 0x7A32,
                0x88EF: 0x8328,
                0x88F0: 0x828B,
                0x88F1: 0x9C2F,
                0x88F2: 0x5141,
                0x88F3: 0x5370,
                0x88F4: 0x54BD,
                0x88F5: 0x54E1,
                0x88F6: 0x56E0,
                0x88F7: 0x59FB,
                0x88F8: 0x5F15,
                0x88F9: 0x98F2,
                0x88FA: 0x6DEB,
                0x88FB: 0x80E4,
                0x88FC: 0x852D,
                0x8940: 0x9662,
                0x8941: 0x9670,
                0x8942: 0x96A0,
                0x8943: 0x97FB,
                0x8944: 0x540B,
                0x8945: 0x53F3,
                0x8946: 0x5B87,
                0x8947: 0x70CF,
                0x8948: 0x7FBD,
                0x8949: 0x8FC2,
                0x894A: 0x96E8,
                0x894B: 0x536F,
                0x894C: 0x9D5C,
                0x894D: 0x7ABA,
                0x894E: 0x4E11,
                0x894F: 0x7893,
                0x8950: 0x81FC,
                0x8951: 0x6E26,
                0x8952: 0x5618,
                0x8953: 0x5504,
                0x8954: 0x6B1D,
                0x8955: 0x851A,
                0x8956: 0x9C3B,
                0x8957: 0x59E5,
                0x8958: 0x53A9,
                0x8959: 0x6D66,
                0x895A: 0x74DC,
                0x895B: 0x958F,
                0x895C: 0x5642,
                0x895D: 0x4E91,
                0x895E: 0x904B,
                0x895F: 0x96F2,
                0x8960: 0x834F,
                0x8961: 0x990C,
                0x8962: 0x53E1,
                0x8963: 0x55B6,
                0x8964: 0x5B30,
                0x8965: 0x5F71,
                0x8966: 0x6620,
                0x8967: 0x66F3,
                0x8968: 0x6804,
                0x8969: 0x6C38,
                0x896A: 0x6CF3,
                0x896B: 0x6D29,
                0x896C: 0x745B,
                0x896D: 0x76C8,
                0x896E: 0x7A4E,
                0x896F: 0x9834,
                0x8970: 0x82F1,
                0x8971: 0x885B,
                0x8972: 0x8A60,
                0x8973: 0x92ED,
                0x8974: 0x6DB2,
                0x8975: 0x75AB,
                0x8976: 0x76CA,
                0x8977: 0x99C5,
                0x8978: 0x60A6,
                0x8979: 0x8B01,
                0x897A: 0x8D8A,
                0x897B: 0x95B2,
                0x897C: 0x698E,
                0x897D: 0x53AD,
                0x897E: 0x5186,
                0x8980: 0x5712,
                0x8981: 0x5830,
                0x8982: 0x5944,
                0x8983: 0x5BB4,
                0x8984: 0x5EF6,
                0x8985: 0x6028,
                0x8986: 0x63A9,
                0x8987: 0x63F4,
                0x8988: 0x6CBF,
                0x8989: 0x6F14,
                0x898A: 0x708E,
                0x898B: 0x7114,
                0x898C: 0x7159,
                0x898D: 0x71D5,
                0x898E: 0x733F,
                0x898F: 0x7E01,
                0x8990: 0x8276,
                0x8991: 0x82D1,
                0x8992: 0x8597,
                0x8993: 0x9060,
                0x8994: 0x925B,
                0x8995: 0x9D1B,
                0x8996: 0x5869,
                0x8997: 0x65BC,
                0x8998: 0x6C5A,
                0x8999: 0x7525,
                0x899A: 0x51F9,
                0x899B: 0x592E,
                0x899C: 0x5965,
                0x899D: 0x5F80,
                0x899E: 0x5FDC,
                0x899F: 0x62BC,
                0x89A0: 0x65FA,
                0x89A1: 0x6A2A,
                0x89A2: 0x6B27,
                0x89A3: 0x6BB4,
                0x89A4: 0x738B,
                0x89A5: 0x7FC1,
                0x89A6: 0x8956,
                0x89A7: 0x9D2C,
                0x89A8: 0x9D0E,
                0x89A9: 0x9EC4,
                0x89AA: 0x5CA1,
                0x89AB: 0x6C96,
                0x89AC: 0x837B,
                0x89AD: 0x5104,
                0x89AE: 0x5C4B,
                0x89AF: 0x61B6,
                0x89B0: 0x81C6,
                0x89B1: 0x6876,
                0x89B2: 0x7261,
                0x89B3: 0x4E59,
                0x89B4: 0x4FFA,
                0x89B5: 0x5378,
                0x89B6: 0x6069,
                0x89B7: 0x6E29,
                0x89B8: 0x7A4F,
                0x89B9: 0x97F3,
                0x89BA: 0x4E0B,
                0x89BB: 0x5316,
                0x89BC: 0x4EEE,
                0x89BD: 0x4F55,
                0x89BE: 0x4F3D,
                0x89BF: 0x4FA1,
                0x89C0: 0x4F73,
                0x89C1: 0x52A0,
                0x89C2: 0x53EF,
                0x89C3: 0x5609,
                0x89C4: 0x590F,
                0x89C5: 0x5AC1,
                0x89C6: 0x5BB6,
                0x89C7: 0x5BE1,
                0x89C8: 0x79D1,
                0x89C9: 0x6687,
                0x89CA: 0x679C,
                0x89CB: 0x67B6,
                0x89CC: 0x6B4C,
                0x89CD: 0x6CB3,
                0x89CE: 0x706B,
                0x89CF: 0x73C2,
                0x89D0: 0x798D,
                0x89D1: 0x79BE,
                0x89D2: 0x7A3C,
                0x89D3: 0x7B87,
                0x89D4: 0x82B1,
                0x89D5: 0x82DB,
                0x89D6: 0x8304,
                0x89D7: 0x8377,
                0x89D8: 0x83EF,
                0x89D9: 0x83D3,
                0x89DA: 0x8766,
                0x89DB: 0x8AB2,
                0x89DC: 0x5629,
                0x89DD: 0x8CA8,
                0x89DE: 0x8FE6,
                0x89DF: 0x904E,
                0x89E0: 0x971E,
                0x89E1: 0x868A,
                0x89E2: 0x4FC4,
                0x89E3: 0x5CE8,
                0x89E4: 0x6211,
                0x89E5: 0x7259,
                0x89E6: 0x753B,
                0x89E7: 0x81E5,
                0x89E8: 0x82BD,
                0x89E9: 0x86FE,
                0x89EA: 0x8CC0,
                0x89EB: 0x96C5,
                0x89EC: 0x9913,
                0x89ED: 0x99D5,
                0x89EE: 0x4ECB,
                0x89EF: 0x4F1A,
                0x89F0: 0x89E3,
                0x89F1: 0x56DE,
                0x89F2: 0x584A,
                0x89F3: 0x58CA,
                0x89F4: 0x5EFB,
                0x89F5: 0x5FEB,
                0x89F6: 0x602A,
                0x89F7: 0x6094,
                0x89F8: 0x6062,
                0x89F9: 0x61D0,
                0x89FA: 0x6212,
                0x89FB: 0x62D0,
                0x89FC: 0x6539,
                0x8A40: 0x9B41,
                0x8A41: 0x6666,
                0x8A42: 0x68B0,
                0x8A43: 0x6D77,
                0x8A44: 0x7070,
                0x8A45: 0x754C,
                0x8A46: 0x7686,
                0x8A47: 0x7D75,
                0x8A48: 0x82A5,
                0x8A49: 0x87F9,
                0x8A4A: 0x958B,
                0x8A4B: 0x968E,
                0x8A4C: 0x8C9D,
                0x8A4D: 0x51F1,
                0x8A4E: 0x52BE,
                0x8A4F: 0x5916,
                0x8A50: 0x54B3,
                0x8A51: 0x5BB3,
                0x8A52: 0x5D16,
                0x8A53: 0x6168,
                0x8A54: 0x6982,
                0x8A55: 0x6DAF,
                0x8A56: 0x788D,
                0x8A57: 0x84CB,
                0x8A58: 0x8857,
                0x8A59: 0x8A72,
                0x8A5A: 0x93A7,
                0x8A5B: 0x9AB8,
                0x8A5C: 0x6D6C,
                0x8A5D: 0x99A8,
                0x8A5E: 0x86D9,
                0x8A5F: 0x57A3,
                0x8A60: 0x67FF,
                0x8A61: 0x86CE,
                0x8A62: 0x920E,
                0x8A63: 0x5283,
                0x8A64: 0x5687,
                0x8A65: 0x5404,
                0x8A66: 0x5ED3,
                0x8A67: 0x62E1,
                0x8A68: 0x64B9,
                0x8A69: 0x683C,
                0x8A6A: 0x6838,
                0x8A6B: 0x6BBB,
                0x8A6C: 0x7372,
                0x8A6D: 0x78BA,
                0x8A6E: 0x7A6B,
                0x8A6F: 0x899A,
                0x8A70: 0x89D2,
                0x8A71: 0x8D6B,
                0x8A72: 0x8F03,
                0x8A73: 0x90ED,
                0x8A74: 0x95A3,
                0x8A75: 0x9694,
                0x8A76: 0x9769,
                0x8A77: 0x5B66,
                0x8A78: 0x5CB3,
                0x8A79: 0x697D,
                0x8A7A: 0x984D,
                0x8A7B: 0x984E,
                0x8A7C: 0x639B,
                0x8A7D: 0x7B20,
                0x8A7E: 0x6A2B,
                0x8A80: 0x6A7F,
                0x8A81: 0x68B6,
                0x8A82: 0x9C0D,
                0x8A83: 0x6F5F,
                0x8A84: 0x5272,
                0x8A85: 0x559D,
                0x8A86: 0x6070,
                0x8A87: 0x62EC,
                0x8A88: 0x6D3B,
                0x8A89: 0x6E07,
                0x8A8A: 0x6ED1,
                0x8A8B: 0x845B,
                0x8A8C: 0x8910,
                0x8A8D: 0x8F44,
                0x8A8E: 0x4E14,
                0x8A8F: 0x9C39,
                0x8A90: 0x53F6,
                0x8A91: 0x691B,
                0x8A92: 0x6A3A,
                0x8A93: 0x9784,
                0x8A94: 0x682A,
                0x8A95: 0x515C,
                0x8A96: 0x7AC3,
                0x8A97: 0x84B2,
                0x8A98: 0x91DC,
                0x8A99: 0x938C,
                0x8A9A: 0x565B,
                0x8A9B: 0x9D28,
                0x8A9C: 0x6822,
                0x8A9D: 0x8305,
                0x8A9E: 0x8431,
                0x8A9F: 0x7CA5,
                0x8AA0: 0x5208,
                0x8AA1: 0x82C5,
                0x8AA2: 0x74E6,
                0x8AA3: 0x4E7E,
                0x8AA4: 0x4F83,
                0x8AA5: 0x51A0,
                0x8AA6: 0x5BD2,
                0x8AA7: 0x520A,
                0x8AA8: 0x52D8,
                0x8AA9: 0x52E7,
                0x8AAA: 0x5DFB,
                0x8AAB: 0x559A,
                0x8AAC: 0x582A,
                0x8AAD: 0x59E6,
                0x8AAE: 0x5B8C,
                0x8AAF: 0x5B98,
                0x8AB0: 0x5BDB,
                0x8AB1: 0x5E72,
                0x8AB2: 0x5E79,
                0x8AB3: 0x60A3,
                0x8AB4: 0x611F,
                0x8AB5: 0x6163,
                0x8AB6: 0x61BE,
                0x8AB7: 0x63DB,
                0x8AB8: 0x6562,
                0x8AB9: 0x67D1,
                0x8ABA: 0x6853,
                0x8ABB: 0x68FA,
                0x8ABC: 0x6B3E,
                0x8ABD: 0x6B53,
                0x8ABE: 0x6C57,
                0x8ABF: 0x6F22,
                0x8AC0: 0x6F97,
                0x8AC1: 0x6F45,
                0x8AC2: 0x74B0,
                0x8AC3: 0x7518,
                0x8AC4: 0x76E3,
                0x8AC5: 0x770B,
                0x8AC6: 0x7AFF,
                0x8AC7: 0x7BA1,
                0x8AC8: 0x7C21,
                0x8AC9: 0x7DE9,
                0x8ACA: 0x7F36,
                0x8ACB: 0x7FF0,
                0x8ACC: 0x809D,
                0x8ACD: 0x8266,
                0x8ACE: 0x839E,
                0x8ACF: 0x89B3,
                0x8AD0: 0x8ACC,
                0x8AD1: 0x8CAB,
                0x8AD2: 0x9084,
                0x8AD3: 0x9451,
                0x8AD4: 0x9593,
                0x8AD5: 0x9591,
                0x8AD6: 0x95A2,
                0x8AD7: 0x9665,
                0x8AD8: 0x97D3,
                0x8AD9: 0x9928,
                0x8ADA: 0x8218,
                0x8ADB: 0x4E38,
                0x8ADC: 0x542B,
                0x8ADD: 0x5CB8,
                0x8ADE: 0x5DCC,
                0x8ADF: 0x73A9,
                0x8AE0: 0x764C,
                0x8AE1: 0x773C,
                0x8AE2: 0x5CA9,
                0x8AE3: 0x7FEB,
                0x8AE4: 0x8D0B,
                0x8AE5: 0x96C1,
                0x8AE6: 0x9811,
                0x8AE7: 0x9854,
                0x8AE8: 0x9858,
                0x8AE9: 0x4F01,
                0x8AEA: 0x4F0E,
                0x8AEB: 0x5371,
                0x8AEC: 0x559C,
                0x8AED: 0x5668,
                0x8AEE: 0x57FA,
                0x8AEF: 0x5947,
                0x8AF0: 0x5B09,
                0x8AF1: 0x5BC4,
                0x8AF2: 0x5C90,
                0x8AF3: 0x5E0C,
                0x8AF4: 0x5E7E,
                0x8AF5: 0x5FCC,
                0x8AF6: 0x63EE,
                0x8AF7: 0x673A,
                0x8AF8: 0x65D7,
                0x8AF9: 0x65E2,
                0x8AFA: 0x671F,
                0x8AFB: 0x68CB,
                0x8AFC: 0x68C4,
                0x8B40: 0x6A5F,
                0x8B41: 0x5E30,
                0x8B42: 0x6BC5,
                0x8B43: 0x6C17,
                0x8B44: 0x6C7D,
                0x8B45: 0x757F,
                0x8B46: 0x7948,
                0x8B47: 0x5B63,
                0x8B48: 0x7A00,
                0x8B49: 0x7D00,
                0x8B4A: 0x5FBD,
                0x8B4B: 0x898F,
                0x8B4C: 0x8A18,
                0x8B4D: 0x8CB4,
                0x8B4E: 0x8D77,
                0x8B4F: 0x8ECC,
                0x8B50: 0x8F1D,
                0x8B51: 0x98E2,
                0x8B52: 0x9A0E,
                0x8B53: 0x9B3C,
                0x8B54: 0x4E80,
                0x8B55: 0x507D,
                0x8B56: 0x5100,
                0x8B57: 0x5993,
                0x8B58: 0x5B9C,
                0x8B59: 0x622F,
                0x8B5A: 0x6280,
                0x8B5B: 0x64EC,
                0x8B5C: 0x6B3A,
                0x8B5D: 0x72A0,
                0x8B5E: 0x7591,
                0x8B5F: 0x7947,
                0x8B60: 0x7FA9,
                0x8B61: 0x87FB,
                0x8B62: 0x8ABC,
                0x8B63: 0x8B70,
                0x8B64: 0x63AC,
                0x8B65: 0x83CA,
                0x8B66: 0x97A0,
                0x8B67: 0x5409,
                0x8B68: 0x5403,
                0x8B69: 0x55AB,
                0x8B6A: 0x6854,
                0x8B6B: 0x6A58,
                0x8B6C: 0x8A70,
                0x8B6D: 0x7827,
                0x8B6E: 0x6775,
                0x8B6F: 0x9ECD,
                0x8B70: 0x5374,
                0x8B71: 0x5BA2,
                0x8B72: 0x811A,
                0x8B73: 0x8650,
                0x8B74: 0x9006,
                0x8B75: 0x4E18,
                0x8B76: 0x4E45,
                0x8B77: 0x4EC7,
                0x8B78: 0x4F11,
                0x8B79: 0x53CA,
                0x8B7A: 0x5438,
                0x8B7B: 0x5BAE,
                0x8B7C: 0x5F13,
                0x8B7D: 0x6025,
                0x8B7E: 0x6551,
                0x8B80: 0x673D,
                0x8B81: 0x6C42,
                0x8B82: 0x6C72,
                0x8B83: 0x6CE3,
                0x8B84: 0x7078,
                0x8B85: 0x7403,
                0x8B86: 0x7A76,
                0x8B87: 0x7AAE,
                0x8B88: 0x7B08,
                0x8B89: 0x7D1A,
                0x8B8A: 0x7CFE,
                0x8B8B: 0x7D66,
                0x8B8C: 0x65E7,
                0x8B8D: 0x725B,
                0x8B8E: 0x53BB,
                0x8B8F: 0x5C45,
                0x8B90: 0x5DE8,
                0x8B91: 0x62D2,
                0x8B92: 0x62E0,
                0x8B93: 0x6319,
                0x8B94: 0x6E20,
                0x8B95: 0x865A,
                0x8B96: 0x8A31,
                0x8B97: 0x8DDD,
                0x8B98: 0x92F8,
                0x8B99: 0x6F01,
                0x8B9A: 0x79A6,
                0x8B9B: 0x9B5A,
                0x8B9C: 0x4EA8,
                0x8B9D: 0x4EAB,
                0x8B9E: 0x4EAC,
                0x8B9F: 0x4F9B,
                0x8BA0: 0x4FA0,
                0x8BA1: 0x50D1,
                0x8BA2: 0x5147,
                0x8BA3: 0x7AF6,
                0x8BA4: 0x5171,
                0x8BA5: 0x51F6,
                0x8BA6: 0x5354,
                0x8BA7: 0x5321,
                0x8BA8: 0x537F,
                0x8BA9: 0x53EB,
                0x8BAA: 0x55AC,
                0x8BAB: 0x5883,
                0x8BAC: 0x5CE1,
                0x8BAD: 0x5F37,
                0x8BAE: 0x5F4A,
                0x8BAF: 0x602F,
                0x8BB0: 0x6050,
                0x8BB1: 0x606D,
                0x8BB2: 0x631F,
                0x8BB3: 0x6559,
                0x8BB4: 0x6A4B,
                0x8BB5: 0x6CC1,
                0x8BB6: 0x72C2,
                0x8BB7: 0x72ED,
                0x8BB8: 0x77EF,
                0x8BB9: 0x80F8,
                0x8BBA: 0x8105,
                0x8BBB: 0x8208,
                0x8BBC: 0x854E,
                0x8BBD: 0x90F7,
                0x8BBE: 0x93E1,
                0x8BBF: 0x97FF,
                0x8BC0: 0x9957,
                0x8BC1: 0x9A5A,
                0x8BC2: 0x4EF0,
                0x8BC3: 0x51DD,
                0x8BC4: 0x5C2D,
                0x8BC5: 0x6681,
                0x8BC6: 0x696D,
                0x8BC7: 0x5C40,
                0x8BC8: 0x66F2,
                0x8BC9: 0x6975,
                0x8BCA: 0x7389,
                0x8BCB: 0x6850,
                0x8BCC: 0x7C81,
                0x8BCD: 0x50C5,
                0x8BCE: 0x52E4,
                0x8BCF: 0x5747,
                0x8BD0: 0x5DFE,
                0x8BD1: 0x9326,
                0x8BD2: 0x65A4,
                0x8BD3: 0x6B23,
                0x8BD4: 0x6B3D,
                0x8BD5: 0x7434,
                0x8BD6: 0x7981,
                0x8BD7: 0x79BD,
                0x8BD8: 0x7B4B,
                0x8BD9: 0x7DCA,
                0x8BDA: 0x82B9,
                0x8BDB: 0x83CC,
                0x8BDC: 0x887F,
                0x8BDD: 0x895F,
                0x8BDE: 0x8B39,
                0x8BDF: 0x8FD1,
                0x8BE0: 0x91D1,
                0x8BE1: 0x541F,
                0x8BE2: 0x9280,
                0x8BE3: 0x4E5D,
                0x8BE4: 0x5036,
                0x8BE5: 0x53E5,
                0x8BE6: 0x533A,
                0x8BE7: 0x72D7,
                0x8BE8: 0x7396,
                0x8BE9: 0x77E9,
                0x8BEA: 0x82E6,
                0x8BEB: 0x8EAF,
                0x8BEC: 0x99C6,
                0x8BED: 0x99C8,
                0x8BEE: 0x99D2,
                0x8BEF: 0x5177,
                0x8BF0: 0x611A,
                0x8BF1: 0x865E,
                0x8BF2: 0x55B0,
                0x8BF3: 0x7A7A,
                0x8BF4: 0x5076,
                0x8BF5: 0x5BD3,
                0x8BF6: 0x9047,
                0x8BF7: 0x9685,
                0x8BF8: 0x4E32,
                0x8BF9: 0x6ADB,
                0x8BFA: 0x91E7,
                0x8BFB: 0x5C51,
                0x8BFC: 0x5C48,
                0x8C40: 0x6398,
                0x8C41: 0x7A9F,
                0x8C42: 0x6C93,
                0x8C43: 0x9774,
                0x8C44: 0x8F61,
                0x8C45: 0x7AAA,
                0x8C46: 0x718A,
                0x8C47: 0x9688,
                0x8C48: 0x7C82,
                0x8C49: 0x6817,
                0x8C4A: 0x7E70,
                0x8C4B: 0x6851,
                0x8C4C: 0x936C,
                0x8C4D: 0x52F2,
                0x8C4E: 0x541B,
                0x8C4F: 0x85AB,
                0x8C50: 0x8A13,
                0x8C51: 0x7FA4,
                0x8C52: 0x8ECD,
                0x8C53: 0x90E1,
                0x8C54: 0x5366,
                0x8C55: 0x8888,
                0x8C56: 0x7941,
                0x8C57: 0x4FC2,
                0x8C58: 0x50BE,
                0x8C59: 0x5211,
                0x8C5A: 0x5144,
                0x8C5B: 0x5553,
                0x8C5C: 0x572D,
                0x8C5D: 0x73EA,
                0x8C5E: 0x578B,
                0x8C5F: 0x5951,
                0x8C60: 0x5F62,
                0x8C61: 0x5F84,
                0x8C62: 0x6075,
                0x8C63: 0x6176,
                0x8C64: 0x6167,
                0x8C65: 0x61A9,
                0x8C66: 0x63B2,
                0x8C67: 0x643A,
                0x8C68: 0x656C,
                0x8C69: 0x666F,
                0x8C6A: 0x6842,
                0x8C6B: 0x6E13,
                0x8C6C: 0x7566,
                0x8C6D: 0x7A3D,
                0x8C6E: 0x7CFB,
                0x8C6F: 0x7D4C,
                0x8C70: 0x7D99,
                0x8C71: 0x7E4B,
                0x8C72: 0x7F6B,
                0x8C73: 0x830E,
                0x8C74: 0x834A,
                0x8C75: 0x86CD,
                0x8C76: 0x8A08,
                0x8C77: 0x8A63,
                0x8C78: 0x8B66,
                0x8C79: 0x8EFD,
                0x8C7A: 0x981A,
                0x8C7B: 0x9D8F,
                0x8C7C: 0x82B8,
                0x8C7D: 0x8FCE,
                0x8C7E: 0x9BE8,
                0x8C80: 0x5287,
                0x8C81: 0x621F,
                0x8C82: 0x6483,
                0x8C83: 0x6FC0,
                0x8C84: 0x9699,
                0x8C85: 0x6841,
                0x8C86: 0x5091,
                0x8C87: 0x6B20,
                0x8C88: 0x6C7A,
                0x8C89: 0x6F54,
                0x8C8A: 0x7A74,
                0x8C8B: 0x7D50,
                0x8C8C: 0x8840,
                0x8C8D: 0x8A23,
                0x8C8E: 0x6708,
                0x8C8F: 0x4EF6,
                0x8C90: 0x5039,
                0x8C91: 0x5026,
                0x8C92: 0x5065,
                0x8C93: 0x517C,
                0x8C94: 0x5238,
                0x8C95: 0x5263,
                0x8C96: 0x55A7,
                0x8C97: 0x570F,
                0x8C98: 0x5805,
                0x8C99: 0x5ACC,
                0x8C9A: 0x5EFA,
                0x8C9B: 0x61B2,
                0x8C9C: 0x61F8,
                0x8C9D: 0x62F3,
                0x8C9E: 0x6372,
                0x8C9F: 0x691C,
                0x8CA0: 0x6A29,
                0x8CA1: 0x727D,
                0x8CA2: 0x72AC,
                0x8CA3: 0x732E,
                0x8CA4: 0x7814,
                0x8CA5: 0x786F,
                0x8CA6: 0x7D79,
                0x8CA7: 0x770C,
                0x8CA8: 0x80A9,
                0x8CA9: 0x898B,
                0x8CAA: 0x8B19,
                0x8CAB: 0x8CE2,
                0x8CAC: 0x8ED2,
                0x8CAD: 0x9063,
                0x8CAE: 0x9375,
                0x8CAF: 0x967A,
                0x8CB0: 0x9855,
                0x8CB1: 0x9A13,
                0x8CB2: 0x9E78,
                0x8CB3: 0x5143,
                0x8CB4: 0x539F,
                0x8CB5: 0x53B3,
                0x8CB6: 0x5E7B,
                0x8CB7: 0x5F26,
                0x8CB8: 0x6E1B,
                0x8CB9: 0x6E90,
                0x8CBA: 0x7384,
                0x8CBB: 0x73FE,
                0x8CBC: 0x7D43,
                0x8CBD: 0x8237,
                0x8CBE: 0x8A00,
                0x8CBF: 0x8AFA,
                0x8CC0: 0x9650,
                0x8CC1: 0x4E4E,
                0x8CC2: 0x500B,
                0x8CC3: 0x53E4,
                0x8CC4: 0x547C,
                0x8CC5: 0x56FA,
                0x8CC6: 0x59D1,
                0x8CC7: 0x5B64,
                0x8CC8: 0x5DF1,
                0x8CC9: 0x5EAB,
                0x8CCA: 0x5F27,
                0x8CCB: 0x6238,
                0x8CCC: 0x6545,
                0x8CCD: 0x67AF,
                0x8CCE: 0x6E56,
                0x8CCF: 0x72D0,
                0x8CD0: 0x7CCA,
                0x8CD1: 0x88B4,
                0x8CD2: 0x80A1,
                0x8CD3: 0x80E1,
                0x8CD4: 0x83F0,
                0x8CD5: 0x864E,
                0x8CD6: 0x8A87,
                0x8CD7: 0x8DE8,
                0x8CD8: 0x9237,
                0x8CD9: 0x96C7,
                0x8CDA: 0x9867,
                0x8CDB: 0x9F13,
                0x8CDC: 0x4E94,
                0x8CDD: 0x4E92,
                0x8CDE: 0x4F0D,
                0x8CDF: 0x5348,
                0x8CE0: 0x5449,
                0x8CE1: 0x543E,
                0x8CE2: 0x5A2F,
                0x8CE3: 0x5F8C,
                0x8CE4: 0x5FA1,
                0x8CE5: 0x609F,
                0x8CE6: 0x68A7,
                0x8CE7: 0x6A8E,
                0x8CE8: 0x745A,
                0x8CE9: 0x7881,
                0x8CEA: 0x8A9E,
                0x8CEB: 0x8AA4,
                0x8CEC: 0x8B77,
                0x8CED: 0x9190,
                0x8CEE: 0x4E5E,
                0x8CEF: 0x9BC9,
                0x8CF0: 0x4EA4,
                0x8CF1: 0x4F7C,
                0x8CF2: 0x4FAF,
                0x8CF3: 0x5019,
                0x8CF4: 0x5016,
                0x8CF5: 0x5149,
                0x8CF6: 0x516C,
                0x8CF7: 0x529F,
                0x8CF8: 0x52B9,
                0x8CF9: 0x52FE,
                0x8CFA: 0x539A,
                0x8CFB: 0x53E3,
                0x8CFC: 0x5411,
                0x8D40: 0x540E,
                0x8D41: 0x5589,
                0x8D42: 0x5751,
                0x8D43: 0x57A2,
                0x8D44: 0x597D,
                0x8D45: 0x5B54,
                0x8D46: 0x5B5D,
                0x8D47: 0x5B8F,
                0x8D48: 0x5DE5,
                0x8D49: 0x5DE7,
                0x8D4A: 0x5DF7,
                0x8D4B: 0x5E78,
                0x8D4C: 0x5E83,
                0x8D4D: 0x5E9A,
                0x8D4E: 0x5EB7,
                0x8D4F: 0x5F18,
                0x8D50: 0x6052,
                0x8D51: 0x614C,
                0x8D52: 0x6297,
                0x8D53: 0x62D8,
                0x8D54: 0x63A7,
                0x8D55: 0x653B,
                0x8D56: 0x6602,
                0x8D57: 0x6643,
                0x8D58: 0x66F4,
                0x8D59: 0x676D,
                0x8D5A: 0x6821,
                0x8D5B: 0x6897,
                0x8D5C: 0x69CB,
                0x8D5D: 0x6C5F,
                0x8D5E: 0x6D2A,
                0x8D5F: 0x6D69,
                0x8D60: 0x6E2F,
                0x8D61: 0x6E9D,
                0x8D62: 0x7532,
                0x8D63: 0x7687,
                0x8D64: 0x786C,
                0x8D65: 0x7A3F,
                0x8D66: 0x7CE0,
                0x8D67: 0x7D05,
                0x8D68: 0x7D18,
                0x8D69: 0x7D5E,
                0x8D6A: 0x7DB1,
                0x8D6B: 0x8015,
                0x8D6C: 0x8003,
                0x8D6D: 0x80AF,
                0x8D6E: 0x80B1,
                0x8D6F: 0x8154,
                0x8D70: 0x818F,
                0x8D71: 0x822A,
                0x8D72: 0x8352,
                0x8D73: 0x884C,
                0x8D74: 0x8861,
                0x8D75: 0x8B1B,
                0x8D76: 0x8CA2,
                0x8D77: 0x8CFC,
                0x8D78: 0x90CA,
                0x8D79: 0x9175,
                0x8D7A: 0x9271,
                0x8D7B: 0x783F,
                0x8D7C: 0x92FC,
                0x8D7D: 0x95A4,
                0x8D7E: 0x964D,
                0x8D80: 0x9805,
                0x8D81: 0x9999,
                0x8D82: 0x9AD8,
                0x8D83: 0x9D3B,
                0x8D84: 0x525B,
                0x8D85: 0x52AB,
                0x8D86: 0x53F7,
                0x8D87: 0x5408,
                0x8D88: 0x58D5,
                0x8D89: 0x62F7,
                0x8D8A: 0x6FE0,
                0x8D8B: 0x8C6A,
                0x8D8C: 0x8F5F,
                0x8D8D: 0x9EB9,
                0x8D8E: 0x514B,
                0x8D8F: 0x523B,
                0x8D90: 0x544A,
                0x8D91: 0x56FD,
                0x8D92: 0x7A40,
                0x8D93: 0x9177,
                0x8D94: 0x9D60,
                0x8D95: 0x9ED2,
                0x8D96: 0x7344,
                0x8D97: 0x6F09,
                0x8D98: 0x8170,
                0x8D99: 0x7511,
                0x8D9A: 0x5FFD,
                0x8D9B: 0x60DA,
                0x8D9C: 0x9AA8,
                0x8D9D: 0x72DB,
                0x8D9E: 0x8FBC,
                0x8D9F: 0x6B64,
                0x8DA0: 0x9803,
                0x8DA1: 0x4ECA,
                0x8DA2: 0x56F0,
                0x8DA3: 0x5764,
                0x8DA4: 0x58BE,
                0x8DA5: 0x5A5A,
                0x8DA6: 0x6068,
                0x8DA7: 0x61C7,
                0x8DA8: 0x660F,
                0x8DA9: 0x6606,
                0x8DAA: 0x6839,
                0x8DAB: 0x68B1,
                0x8DAC: 0x6DF7,
                0x8DAD: 0x75D5,
                0x8DAE: 0x7D3A,
                0x8DAF: 0x826E,
                0x8DB0: 0x9B42,
                0x8DB1: 0x4E9B,
                0x8DB2: 0x4F50,
                0x8DB3: 0x53C9,
                0x8DB4: 0x5506,
                0x8DB5: 0x5D6F,
                0x8DB6: 0x5DE6,
                0x8DB7: 0x5DEE,
                0x8DB8: 0x67FB,
                0x8DB9: 0x6C99,
                0x8DBA: 0x7473,
                0x8DBB: 0x7802,
                0x8DBC: 0x8A50,
                0x8DBD: 0x9396,
                0x8DBE: 0x88DF,
                0x8DBF: 0x5750,
                0x8DC0: 0x5EA7,
                0x8DC1: 0x632B,
                0x8DC2: 0x50B5,
                0x8DC3: 0x50AC,
                0x8DC4: 0x518D,
                0x8DC5: 0x6700,
                0x8DC6: 0x54C9,
                0x8DC7: 0x585E,
                0x8DC8: 0x59BB,
                0x8DC9: 0x5BB0,
                0x8DCA: 0x5F69,
                0x8DCB: 0x624D,
                0x8DCC: 0x63A1,
                0x8DCD: 0x683D,
                0x8DCE: 0x6B73,
                0x8DCF: 0x6E08,
                0x8DD0: 0x707D,
                0x8DD1: 0x91C7,
                0x8DD2: 0x7280,
                0x8DD3: 0x7815,
                0x8DD4: 0x7826,
                0x8DD5: 0x796D,
                0x8DD6: 0x658E,
                0x8DD7: 0x7D30,
                0x8DD8: 0x83DC,
                0x8DD9: 0x88C1,
                0x8DDA: 0x8F09,
                0x8DDB: 0x969B,
                0x8DDC: 0x5264,
                0x8DDD: 0x5728,
                0x8DDE: 0x6750,
                0x8DDF: 0x7F6A,
                0x8DE0: 0x8CA1,
                0x8DE1: 0x51B4,
                0x8DE2: 0x5742,
                0x8DE3: 0x962A,
                0x8DE4: 0x583A,
                0x8DE5: 0x698A,
                0x8DE6: 0x80B4,
                0x8DE7: 0x54B2,
                0x8DE8: 0x5D0E,
                0x8DE9: 0x57FC,
                0x8DEA: 0x7895,
                0x8DEB: 0x9DFA,
                0x8DEC: 0x4F5C,
                0x8DED: 0x524A,
                0x8DEE: 0x548B,
                0x8DEF: 0x643E,
                0x8DF0: 0x6628,
                0x8DF1: 0x6714,
                0x8DF2: 0x67F5,
                0x8DF3: 0x7A84,
                0x8DF4: 0x7B56,
                0x8DF5: 0x7D22,
                0x8DF6: 0x932F,
                0x8DF7: 0x685C,
                0x8DF8: 0x9BAD,
                0x8DF9: 0x7B39,
                0x8DFA: 0x5319,
                0x8DFB: 0x518A,
                0x8DFC: 0x5237,
                0x8E40: 0x5BDF,
                0x8E41: 0x62F6,
                0x8E42: 0x64AE,
                0x8E43: 0x64E6,
                0x8E44: 0x672D,
                0x8E45: 0x6BBA,
                0x8E46: 0x85A9,
                0x8E47: 0x96D1,
                0x8E48: 0x7690,
                0x8E49: 0x9BD6,
                0x8E4A: 0x634C,
                0x8E4B: 0x9306,
                0x8E4C: 0x9BAB,
                0x8E4D: 0x76BF,
                0x8E4E: 0x6652,
                0x8E4F: 0x4E09,
                0x8E50: 0x5098,
                0x8E51: 0x53C2,
                0x8E52: 0x5C71,
                0x8E53: 0x60E8,
                0x8E54: 0x6492,
                0x8E55: 0x6563,
                0x8E56: 0x685F,
                0x8E57: 0x71E6,
                0x8E58: 0x73CA,
                0x8E59: 0x7523,
                0x8E5A: 0x7B97,
                0x8E5B: 0x7E82,
                0x8E5C: 0x8695,
                0x8E5D: 0x8B83,
                0x8E5E: 0x8CDB,
                0x8E5F: 0x9178,
                0x8E60: 0x9910,
                0x8E61: 0x65AC,
                0x8E62: 0x66AB,
                0x8E63: 0x6B8B,
                0x8E64: 0x4ED5,
                0x8E65: 0x4ED4,
                0x8E66: 0x4F3A,
                0x8E67: 0x4F7F,
                0x8E68: 0x523A,
                0x8E69: 0x53F8,
                0x8E6A: 0x53F2,
                0x8E6B: 0x55E3,
                0x8E6C: 0x56DB,
                0x8E6D: 0x58EB,
                0x8E6E: 0x59CB,
                0x8E6F: 0x59C9,
                0x8E70: 0x59FF,
                0x8E71: 0x5B50,
                0x8E72: 0x5C4D,
                0x8E73: 0x5E02,
                0x8E74: 0x5E2B,
                0x8E75: 0x5FD7,
                0x8E76: 0x601D,
                0x8E77: 0x6307,
                0x8E78: 0x652F,
                0x8E79: 0x5B5C,
                0x8E7A: 0x65AF,
                0x8E7B: 0x65BD,
                0x8E7C: 0x65E8,
                0x8E7D: 0x679D,
                0x8E7E: 0x6B62,
                0x8E80: 0x6B7B,
                0x8E81: 0x6C0F,
                0x8E82: 0x7345,
                0x8E83: 0x7949,
                0x8E84: 0x79C1,
                0x8E85: 0x7CF8,
                0x8E86: 0x7D19,
                0x8E87: 0x7D2B,
                0x8E88: 0x80A2,
                0x8E89: 0x8102,
                0x8E8A: 0x81F3,
                0x8E8B: 0x8996,
                0x8E8C: 0x8A5E,
                0x8E8D: 0x8A69,
                0x8E8E: 0x8A66,
                0x8E8F: 0x8A8C,
                0x8E90: 0x8AEE,
                0x8E91: 0x8CC7,
                0x8E92: 0x8CDC,
                0x8E93: 0x96CC,
                0x8E94: 0x98FC,
                0x8E95: 0x6B6F,
                0x8E96: 0x4E8B,
                0x8E97: 0x4F3C,
                0x8E98: 0x4F8D,
                0x8E99: 0x5150,
                0x8E9A: 0x5B57,
                0x8E9B: 0x5BFA,
                0x8E9C: 0x6148,
                0x8E9D: 0x6301,
                0x8E9E: 0x6642,
                0x8E9F: 0x6B21,
                0x8EA0: 0x6ECB,
                0x8EA1: 0x6CBB,
                0x8EA2: 0x723E,
                0x8EA3: 0x74BD,
                0x8EA4: 0x75D4,
                0x8EA5: 0x78C1,
                0x8EA6: 0x793A,
                0x8EA7: 0x800C,
                0x8EA8: 0x8033,
                0x8EA9: 0x81EA,
                0x8EAA: 0x8494,
                0x8EAB: 0x8F9E,
                0x8EAC: 0x6C50,
                0x8EAD: 0x9E7F,
                0x8EAE: 0x5F0F,
                0x8EAF: 0x8B58,
                0x8EB0: 0x9D2B,
                0x8EB1: 0x7AFA,
                0x8EB2: 0x8EF8,
                0x8EB3: 0x5B8D,
                0x8EB4: 0x96EB,
                0x8EB5: 0x4E03,
                0x8EB6: 0x53F1,
                0x8EB7: 0x57F7,
                0x8EB8: 0x5931,
                0x8EB9: 0x5AC9,
                0x8EBA: 0x5BA4,
                0x8EBB: 0x6089,
                0x8EBC: 0x6E7F,
                0x8EBD: 0x6F06,
                0x8EBE: 0x75BE,
                0x8EBF: 0x8CEA,
                0x8EC0: 0x5B9F,
                0x8EC1: 0x8500,
                0x8EC2: 0x7BE0,
                0x8EC3: 0x5072,
                0x8EC4: 0x67F4,
                0x8EC5: 0x829D,
                0x8EC6: 0x5C61,
                0x8EC7: 0x854A,
                0x8EC8: 0x7E1E,
                0x8EC9: 0x820E,
                0x8ECA: 0x5199,
                0x8ECB: 0x5C04,
                0x8ECC: 0x6368,
                0x8ECD: 0x8D66,
                0x8ECE: 0x659C,
                0x8ECF: 0x716E,
                0x8ED0: 0x793E,
                0x8ED1: 0x7D17,
                0x8ED2: 0x8005,
                0x8ED3: 0x8B1D,
                0x8ED4: 0x8ECA,
                0x8ED5: 0x906E,
                0x8ED6: 0x86C7,
                0x8ED7: 0x90AA,
                0x8ED8: 0x501F,
                0x8ED9: 0x52FA,
                0x8EDA: 0x5C3A,
                0x8EDB: 0x6753,
                0x8EDC: 0x707C,
                0x8EDD: 0x7235,
                0x8EDE: 0x914C,
                0x8EDF: 0x91C8,
                0x8EE0: 0x932B,
                0x8EE1: 0x82E5,
                0x8EE2: 0x5BC2,
                0x8EE3: 0x5F31,
                0x8EE4: 0x60F9,
                0x8EE5: 0x4E3B,
                0x8EE6: 0x53D6,
                0x8EE7: 0x5B88,
                0x8EE8: 0x624B,
                0x8EE9: 0x6731,
                0x8EEA: 0x6B8A,
                0x8EEB: 0x72E9,
                0x8EEC: 0x73E0,
                0x8EED: 0x7A2E,
                0x8EEE: 0x816B,
                0x8EEF: 0x8DA3,
                0x8EF0: 0x9152,
                0x8EF1: 0x9996,
                0x8EF2: 0x5112,
                0x8EF3: 0x53D7,
                0x8EF4: 0x546A,
                0x8EF5: 0x5BFF,
                0x8EF6: 0x6388,
                0x8EF7: 0x6A39,
                0x8EF8: 0x7DAC,
                0x8EF9: 0x9700,
                0x8EFA: 0x56DA,
                0x8EFB: 0x53CE,
                0x8EFC: 0x5468,
                0x8F40: 0x5B97,
                0x8F41: 0x5C31,
                0x8F42: 0x5DDE,
                0x8F43: 0x4FEE,
                0x8F44: 0x6101,
                0x8F45: 0x62FE,
                0x8F46: 0x6D32,
                0x8F47: 0x79C0,
                0x8F48: 0x79CB,
                0x8F49: 0x7D42,
                0x8F4A: 0x7E4D,
                0x8F4B: 0x7FD2,
                0x8F4C: 0x81ED,
                0x8F4D: 0x821F,
                0x8F4E: 0x8490,
                0x8F4F: 0x8846,
                0x8F50: 0x8972,
                0x8F51: 0x8B90,
                0x8F52: 0x8E74,
                0x8F53: 0x8F2F,
                0x8F54: 0x9031,
                0x8F55: 0x914B,
                0x8F56: 0x916C,
                0x8F57: 0x96C6,
                0x8F58: 0x919C,
                0x8F59: 0x4EC0,
                0x8F5A: 0x4F4F,
                0x8F5B: 0x5145,
                0x8F5C: 0x5341,
                0x8F5D: 0x5F93,
                0x8F5E: 0x620E,
                0x8F5F: 0x67D4,
                0x8F60: 0x6C41,
                0x8F61: 0x6E0B,
                0x8F62: 0x7363,
                0x8F63: 0x7E26,
                0x8F64: 0x91CD,
                0x8F65: 0x9283,
                0x8F66: 0x53D4,
                0x8F67: 0x5919,
                0x8F68: 0x5BBF,
                0x8F69: 0x6DD1,
                0x8F6A: 0x795D,
                0x8F6B: 0x7E2E,
                0x8F6C: 0x7C9B,
                0x8F6D: 0x587E,
                0x8F6E: 0x719F,
                0x8F6F: 0x51FA,
                0x8F70: 0x8853,
                0x8F71: 0x8FF0,
                0x8F72: 0x4FCA,
                0x8F73: 0x5CFB,
                0x8F74: 0x6625,
                0x8F75: 0x77AC,
                0x8F76: 0x7AE3,
                0x8F77: 0x821C,
                0x8F78: 0x99FF,
                0x8F79: 0x51C6,
                0x8F7A: 0x5FAA,
                0x8F7B: 0x65EC,
                0x8F7C: 0x696F,
                0x8F7D: 0x6B89,
                0x8F7E: 0x6DF3,
                0x8F80: 0x6E96,
                0x8F81: 0x6F64,
                0x8F82: 0x76FE,
                0x8F83: 0x7D14,
                0x8F84: 0x5DE1,
                0x8F85: 0x9075,
                0x8F86: 0x9187,
                0x8F87: 0x9806,
                0x8F88: 0x51E6,
                0x8F89: 0x521D,
                0x8F8A: 0x6240,
                0x8F8B: 0x6691,
                0x8F8C: 0x66D9,
                0x8F8D: 0x6E1A,
                0x8F8E: 0x5EB6,
                0x8F8F: 0x7DD2,
                0x8F90: 0x7F72,
                0x8F91: 0x66F8,
                0x8F92: 0x85AF,
                0x8F93: 0x85F7,
                0x8F94: 0x8AF8,
                0x8F95: 0x52A9,
                0x8F96: 0x53D9,
                0x8F97: 0x5973,
                0x8F98: 0x5E8F,
                0x8F99: 0x5F90,
                0x8F9A: 0x6055,
                0x8F9B: 0x92E4,
                0x8F9C: 0x9664,
                0x8F9D: 0x50B7,
                0x8F9E: 0x511F,
                0x8F9F: 0x52DD,
                0x8FA0: 0x5320,
                0x8FA1: 0x5347,
                0x8FA2: 0x53EC,
                0x8FA3: 0x54E8,
                0x8FA4: 0x5546,
                0x8FA5: 0x5531,
                0x8FA6: 0x5617,
                0x8FA7: 0x5968,
                0x8FA8: 0x59BE,
                0x8FA9: 0x5A3C,
                0x8FAA: 0x5BB5,
                0x8FAB: 0x5C06,
                0x8FAC: 0x5C0F,
                0x8FAD: 0x5C11,
                0x8FAE: 0x5C1A,
                0x8FAF: 0x5E84,
                0x8FB0: 0x5E8A,
                0x8FB1: 0x5EE0,
                0x8FB2: 0x5F70,
                0x8FB3: 0x627F,
                0x8FB4: 0x6284,
                0x8FB5: 0x62DB,
                0x8FB6: 0x638C,
                0x8FB7: 0x6377,
                0x8FB8: 0x6607,
                0x8FB9: 0x660C,
                0x8FBA: 0x662D,
                0x8FBB: 0x6676,
                0x8FBC: 0x677E,
                0x8FBD: 0x68A2,
                0x8FBE: 0x6A1F,
                0x8FBF: 0x6A35,
                0x8FC0: 0x6CBC,
                0x8FC1: 0x6D88,
                0x8FC2: 0x6E09,
                0x8FC3: 0x6E58,
                0x8FC4: 0x713C,
                0x8FC5: 0x7126,
                0x8FC6: 0x7167,
                0x8FC7: 0x75C7,
                0x8FC8: 0x7701,
                0x8FC9: 0x785D,
                0x8FCA: 0x7901,
                0x8FCB: 0x7965,
                0x8FCC: 0x79F0,
                0x8FCD: 0x7AE0,
                0x8FCE: 0x7B11,
                0x8FCF: 0x7CA7,
                0x8FD0: 0x7D39,
                0x8FD1: 0x8096,
                0x8FD2: 0x83D6,
                0x8FD3: 0x848B,
                0x8FD4: 0x8549,
                0x8FD5: 0x885D,
                0x8FD6: 0x88F3,
                0x8FD7: 0x8A1F,
                0x8FD8: 0x8A3C,
                0x8FD9: 0x8A54,
                0x8FDA: 0x8A73,
                0x8FDB: 0x8C61,
                0x8FDC: 0x8CDE,
                0x8FDD: 0x91A4,
                0x8FDE: 0x9266,
                0x8FDF: 0x937E,
                0x8FE0: 0x9418,
                0x8FE1: 0x969C,
                0x8FE2: 0x9798,
                0x8FE3: 0x4E0A,
                0x8FE4: 0x4E08,
                0x8FE5: 0x4E1E,
                0x8FE6: 0x4E57,
                0x8FE7: 0x5197,
                0x8FE8: 0x5270,
                0x8FE9: 0x57CE,
                0x8FEA: 0x5834,
                0x8FEB: 0x58CC,
                0x8FEC: 0x5B22,
                0x8FED: 0x5E38,
                0x8FEE: 0x60C5,
                0x8FEF: 0x64FE,
                0x8FF0: 0x6761,
                0x8FF1: 0x6756,
                0x8FF2: 0x6D44,
                0x8FF3: 0x72B6,
                0x8FF4: 0x7573,
                0x8FF5: 0x7A63,
                0x8FF6: 0x84B8,
                0x8FF7: 0x8B72,
                0x8FF8: 0x91B8,
                0x8FF9: 0x9320,
                0x8FFA: 0x5631,
                0x8FFB: 0x57F4,
                0x8FFC: 0x98FE,
                0x9040: 0x62ED,
                0x9041: 0x690D,
                0x9042: 0x6B96,
                0x9043: 0x71ED,
                0x9044: 0x7E54,
                0x9045: 0x8077,
                0x9046: 0x8272,
                0x9047: 0x89E6,
                0x9048: 0x98DF,
                0x9049: 0x8755,
                0x904A: 0x8FB1,
                0x904B: 0x5C3B,
                0x904C: 0x4F38,
                0x904D: 0x4FE1,
                0x904E: 0x4FB5,
                0x904F: 0x5507,
                0x9050: 0x5A20,
                0x9051: 0x5BDD,
                0x9052: 0x5BE9,
                0x9053: 0x5FC3,
                0x9054: 0x614E,
                0x9055: 0x632F,
                0x9056: 0x65B0,
                0x9057: 0x664B,
                0x9058: 0x68EE,
                0x9059: 0x699B,
                0x905A: 0x6D78,
                0x905B: 0x6DF1,
                0x905C: 0x7533,
                0x905D: 0x75B9,
                0x905E: 0x771F,
                0x905F: 0x795E,
                0x9060: 0x79E6,
                0x9061: 0x7D33,
                0x9062: 0x81E3,
                0x9063: 0x82AF,
                0x9064: 0x85AA,
                0x9065: 0x89AA,
                0x9066: 0x8A3A,
                0x9067: 0x8EAB,
                0x9068: 0x8F9B,
                0x9069: 0x9032,
                0x906A: 0x91DD,
                0x906B: 0x9707,
                0x906C: 0x4EBA,
                0x906D: 0x4EC1,
                0x906E: 0x5203,
                0x906F: 0x5875,
                0x9070: 0x58EC,
                0x9071: 0x5C0B,
                0x9072: 0x751A,
                0x9073: 0x5C3D,
                0x9074: 0x814E,
                0x9075: 0x8A0A,
                0x9076: 0x8FC5,
                0x9077: 0x9663,
                0x9078: 0x976D,
                0x9079: 0x7B25,
                0x907A: 0x8ACF,
                0x907B: 0x9808,
                0x907C: 0x9162,
                0x907D: 0x56F3,
                0x907E: 0x53A8,
                0x9080: 0x9017,
                0x9081: 0x5439,
                0x9082: 0x5782,
                0x9083: 0x5E25,
                0x9084: 0x63A8,
                0x9085: 0x6C34,
                0x9086: 0x708A,
                0x9087: 0x7761,
                0x9088: 0x7C8B,
                0x9089: 0x7FE0,
                0x908A: 0x8870,
                0x908B: 0x9042,
                0x908C: 0x9154,
                0x908D: 0x9310,
                0x908E: 0x9318,
                0x908F: 0x968F,
                0x9090: 0x745E,
                0x9091: 0x9AC4,
                0x9092: 0x5D07,
                0x9093: 0x5D69,
                0x9094: 0x6570,
                0x9095: 0x67A2,
                0x9096: 0x8DA8,
                0x9097: 0x96DB,
                0x9098: 0x636E,
                0x9099: 0x6749,
                0x909A: 0x6919,
                0x909B: 0x83C5,
                0x909C: 0x9817,
                0x909D: 0x96C0,
                0x909E: 0x88FE,
                0x909F: 0x6F84,
                0x90A0: 0x647A,
                0x90A1: 0x5BF8,
                0x90A2: 0x4E16,
                0x90A3: 0x702C,
                0x90A4: 0x755D,
                0x90A5: 0x662F,
                0x90A6: 0x51C4,
                0x90A7: 0x5236,
                0x90A8: 0x52E2,
                0x90A9: 0x59D3,
                0x90AA: 0x5F81,
                0x90AB: 0x6027,
                0x90AC: 0x6210,
                0x90AD: 0x653F,
                0x90AE: 0x6574,
                0x90AF: 0x661F,
                0x90B0: 0x6674,
                0x90B1: 0x68F2,
                0x90B2: 0x6816,
                0x90B3: 0x6B63,
                0x90B4: 0x6E05,
                0x90B5: 0x7272,
                0x90B6: 0x751F,
                0x90B7: 0x76DB,
                0x90B8: 0x7CBE,
                0x90B9: 0x8056,
                0x90BA: 0x58F0,
                0x90BB: 0x88FD,
                0x90BC: 0x897F,
                0x90BD: 0x8AA0,
                0x90BE: 0x8A93,
                0x90BF: 0x8ACB,
                0x90C0: 0x901D,
                0x90C1: 0x9192,
                0x90C2: 0x9752,
                0x90C3: 0x9759,
                0x90C4: 0x6589,
                0x90C5: 0x7A0E,
                0x90C6: 0x8106,
                0x90C7: 0x96BB,
                0x90C8: 0x5E2D,
                0x90C9: 0x60DC,
                0x90CA: 0x621A,
                0x90CB: 0x65A5,
                0x90CC: 0x6614,
                0x90CD: 0x6790,
                0x90CE: 0x77F3,
                0x90CF: 0x7A4D,
                0x90D0: 0x7C4D,
                0x90D1: 0x7E3E,
                0x90D2: 0x810A,
                0x90D3: 0x8CAC,
                0x90D4: 0x8D64,
                0x90D5: 0x8DE1,
                0x90D6: 0x8E5F,
                0x90D7: 0x78A9,
                0x90D8: 0x5207,
                0x90D9: 0x62D9,
                0x90DA: 0x63A5,
                0x90DB: 0x6442,
                0x90DC: 0x6298,
                0x90DD: 0x8A2D,
                0x90DE: 0x7A83,
                0x90DF: 0x7BC0,
                0x90E0: 0x8AAC,
                0x90E1: 0x96EA,
                0x90E2: 0x7D76,
                0x90E3: 0x820C,
                0x90E4: 0x8749,
                0x90E5: 0x4ED9,
                0x90E6: 0x5148,
                0x90E7: 0x5343,
                0x90E8: 0x5360,
                0x90E9: 0x5BA3,
                0x90EA: 0x5C02,
                0x90EB: 0x5C16,
                0x90EC: 0x5DDD,
                0x90ED: 0x6226,
                0x90EE: 0x6247,
                0x90EF: 0x64B0,
                0x90F0: 0x6813,
                0x90F1: 0x6834,
                0x90F2: 0x6CC9,
                0x90F3: 0x6D45,
                0x90F4: 0x6D17,
                0x90F5: 0x67D3,
                0x90F6: 0x6F5C,
                0x90F7: 0x714E,
                0x90F8: 0x717D,
                0x90F9: 0x65CB,
                0x90FA: 0x7A7F,
                0x90FB: 0x7BAD,
                0x90FC: 0x7DDA,
                0x9140: 0x7E4A,
                0x9141: 0x7FA8,
                0x9142: 0x817A,
                0x9143: 0x821B,
                0x9144: 0x8239,
                0x9145: 0x85A6,
                0x9146: 0x8A6E,
                0x9147: 0x8CCE,
                0x9148: 0x8DF5,
                0x9149: 0x9078,
                0x914A: 0x9077,
                0x914B: 0x92AD,
                0x914C: 0x9291,
                0x914D: 0x9583,
                0x914E: 0x9BAE,
                0x914F: 0x524D,
                0x9150: 0x5584,
                0x9151: 0x6F38,
                0x9152: 0x7136,
                0x9153: 0x5168,
                0x9154: 0x7985,
                0x9155: 0x7E55,
                0x9156: 0x81B3,
                0x9157: 0x7CCE,
                0x9158: 0x564C,
                0x9159: 0x5851,
                0x915A: 0x5CA8,
                0x915B: 0x63AA,
                0x915C: 0x66FE,
                0x915D: 0x66FD,
                0x915E: 0x695A,
                0x915F: 0x72D9,
                0x9160: 0x758F,
                0x9161: 0x758E,
                0x9162: 0x790E,
                0x9163: 0x7956,
                0x9164: 0x79DF,
                0x9165: 0x7C97,
                0x9166: 0x7D20,
                0x9167: 0x7D44,
                0x9168: 0x8607,
                0x9169: 0x8A34,
                0x916A: 0x963B,
                0x916B: 0x9061,
                0x916C: 0x9F20,
                0x916D: 0x50E7,
                0x916E: 0x5275,
                0x916F: 0x53CC,
                0x9170: 0x53E2,
                0x9171: 0x5009,
                0x9172: 0x55AA,
                0x9173: 0x58EE,
                0x9174: 0x594F,
                0x9175: 0x723D,
                0x9176: 0x5B8B,
                0x9177: 0x5C64,
                0x9178: 0x531D,
                0x9179: 0x60E3,
                0x917A: 0x60F3,
                0x917B: 0x635C,
                0x917C: 0x6383,
                0x917D: 0x633F,
                0x917E: 0x63BB,
                0x9180: 0x64CD,
                0x9181: 0x65E9,
                0x9182: 0x66F9,
                0x9183: 0x5DE3,
                0x9184: 0x69CD,
                0x9185: 0x69FD,
                0x9186: 0x6F15,
                0x9187: 0x71E5,
                0x9188: 0x4E89,
                0x9189: 0x75E9,
                0x918A: 0x76F8,
                0x918B: 0x7A93,
                0x918C: 0x7CDF,
                0x918D: 0x7DCF,
                0x918E: 0x7D9C,
                0x918F: 0x8061,
                0x9190: 0x8349,
                0x9191: 0x8358,
                0x9192: 0x846C,
                0x9193: 0x84BC,
                0x9194: 0x85FB,
                0x9195: 0x88C5,
                0x9196: 0x8D70,
                0x9197: 0x9001,
                0x9198: 0x906D,
                0x9199: 0x9397,
                0x919A: 0x971C,
                0x919B: 0x9A12,
                0x919C: 0x50CF,
                0x919D: 0x5897,
                0x919E: 0x618E,
                0x919F: 0x81D3,
                0x91A0: 0x8535,
                0x91A1: 0x8D08,
                0x91A2: 0x9020,
                0x91A3: 0x4FC3,
                0x91A4: 0x5074,
                0x91A5: 0x5247,
                0x91A6: 0x5373,
                0x91A7: 0x606F,
                0x91A8: 0x6349,
                0x91A9: 0x675F,
                0x91AA: 0x6E2C,
                0x91AB: 0x8DB3,
                0x91AC: 0x901F,
                0x91AD: 0x4FD7,
                0x91AE: 0x5C5E,
                0x91AF: 0x8CCA,
                0x91B0: 0x65CF,
                0x91B1: 0x7D9A,
                0x91B2: 0x5352,
                0x91B3: 0x8896,
                0x91B4: 0x5176,
                0x91B5: 0x63C3,
                0x91B6: 0x5B58,
                0x91B7: 0x5B6B,
                0x91B8: 0x5C0A,
                0x91B9: 0x640D,
                0x91BA: 0x6751,
                0x91BB: 0x905C,
                0x91BC: 0x4ED6,
                0x91BD: 0x591A,
                0x91BE: 0x592A,
                0x91BF: 0x6C70,
                0x91C0: 0x8A51,
                0x91C1: 0x553E,
                0x91C2: 0x5815,
                0x91C3: 0x59A5,
                0x91C4: 0x60F0,
                0x91C5: 0x6253,
                0x91C6: 0x67C1,
                0x91C7: 0x8235,
                0x91C8: 0x6955,
                0x91C9: 0x9640,
                0x91CA: 0x99C4,
                0x91CB: 0x9A28,
                0x91CC: 0x4F53,
                0x91CD: 0x5806,
                0x91CE: 0x5BFE,
                0x91CF: 0x8010,
                0x91D0: 0x5CB1,
                0x91D1: 0x5E2F,
                0x91D2: 0x5F85,
                0x91D3: 0x6020,
                0x91D4: 0x614B,
                0x91D5: 0x6234,
                0x91D6: 0x66FF,
                0x91D7: 0x6CF0,
                0x91D8: 0x6EDE,
                0x91D9: 0x80CE,
                0x91DA: 0x817F,
                0x91DB: 0x82D4,
                0x91DC: 0x888B,
                0x91DD: 0x8CB8,
                0x91DE: 0x9000,
                0x91DF: 0x902E,
                0x91E0: 0x968A,
                0x91E1: 0x9EDB,
                0x91E2: 0x9BDB,
                0x91E3: 0x4EE3,
                0x91E4: 0x53F0,
                0x91E5: 0x5927,
                0x91E6: 0x7B2C,
                0x91E7: 0x918D,
                0x91E8: 0x984C,
                0x91E9: 0x9DF9,
                0x91EA: 0x6EDD,
                0x91EB: 0x7027,
                0x91EC: 0x5353,
                0x91ED: 0x5544,
                0x91EE: 0x5B85,
                0x91EF: 0x6258,
                0x91F0: 0x629E,
                0x91F1: 0x62D3,
                0x91F2: 0x6CA2,
                0x91F3: 0x6FEF,
                0x91F4: 0x7422,
                0x91F5: 0x8A17,
                0x91F6: 0x9438,
                0x91F7: 0x6FC1,
                0x91F8: 0x8AFE,
                0x91F9: 0x8338,
                0x91FA: 0x51E7,
                0x91FB: 0x86F8,
                0x91FC: 0x53EA,
                0x9240: 0x53E9,
                0x9241: 0x4F46,
                0x9242: 0x9054,
                0x9243: 0x8FB0,
                0x9244: 0x596A,
                0x9245: 0x8131,
                0x9246: 0x5DFD,
                0x9247: 0x7AEA,
                0x9248: 0x8FBF,
                0x9249: 0x68DA,
                0x924A: 0x8C37,
                0x924B: 0x72F8,
                0x924C: 0x9C48,
                0x924D: 0x6A3D,
                0x924E: 0x8AB0,
                0x924F: 0x4E39,
                0x9250: 0x5358,
                0x9251: 0x5606,
                0x9252: 0x5766,
                0x9253: 0x62C5,
                0x9254: 0x63A2,
                0x9255: 0x65E6,
                0x9256: 0x6B4E,
                0x9257: 0x6DE1,
                0x9258: 0x6E5B,
                0x9259: 0x70AD,
                0x925A: 0x77ED,
                0x925B: 0x7AEF,
                0x925C: 0x7BAA,
                0x925D: 0x7DBB,
                0x925E: 0x803D,
                0x925F: 0x80C6,
                0x9260: 0x86CB,
                0x9261: 0x8A95,
                0x9262: 0x935B,
                0x9263: 0x56E3,
                0x9264: 0x58C7,
                0x9265: 0x5F3E,
                0x9266: 0x65AD,
                0x9267: 0x6696,
                0x9268: 0x6A80,
                0x9269: 0x6BB5,
                0x926A: 0x7537,
                0x926B: 0x8AC7,
                0x926C: 0x5024,
                0x926D: 0x77E5,
                0x926E: 0x5730,
                0x926F: 0x5F1B,
                0x9270: 0x6065,
                0x9271: 0x667A,
                0x9272: 0x6C60,
                0x9273: 0x75F4,
                0x9274: 0x7A1A,
                0x9275: 0x7F6E,
                0x9276: 0x81F4,
                0x9277: 0x8718,
                0x9278: 0x9045,
                0x9279: 0x99B3,
                0x927A: 0x7BC9,
                0x927B: 0x755C,
                0x927C: 0x7AF9,
                0x927D: 0x7B51,
                0x927E: 0x84C4,
                0x9280: 0x9010,
                0x9281: 0x79E9,
                0x9282: 0x7A92,
                0x9283: 0x8336,
                0x9284: 0x5AE1,
                0x9285: 0x7740,
                0x9286: 0x4E2D,
                0x9287: 0x4EF2,
                0x9288: 0x5B99,
                0x9289: 0x5FE0,
                0x928A: 0x62BD,
                0x928B: 0x663C,
                0x928C: 0x67F1,
                0x928D: 0x6CE8,
                0x928E: 0x866B,
                0x928F: 0x8877,
                0x9290: 0x8A3B,
                0x9291: 0x914E,
                0x9292: 0x92F3,
                0x9293: 0x99D0,
                0x9294: 0x6A17,
                0x9295: 0x7026,
                0x9296: 0x732A,
                0x9297: 0x82E7,
                0x9298: 0x8457,
                0x9299: 0x8CAF,
                0x929A: 0x4E01,
                0x929B: 0x5146,
                0x929C: 0x51CB,
                0x929D: 0x558B,
                0x929E: 0x5BF5,
                0x929F: 0x5E16,
                0x92A0: 0x5E33,
                0x92A1: 0x5E81,
                0x92A2: 0x5F14,
                0x92A3: 0x5F35,
                0x92A4: 0x5F6B,
                0x92A5: 0x5FB4,
                0x92A6: 0x61F2,
                0x92A7: 0x6311,
                0x92A8: 0x66A2,
                0x92A9: 0x671D,
                0x92AA: 0x6F6E,
                0x92AB: 0x7252,
                0x92AC: 0x753A,
                0x92AD: 0x773A,
                0x92AE: 0x8074,
                0x92AF: 0x8139,
                0x92B0: 0x8178,
                0x92B1: 0x8776,
                0x92B2: 0x8ABF,
                0x92B3: 0x8ADC,
                0x92B4: 0x8D85,
                0x92B5: 0x8DF3,
                0x92B6: 0x929A,
                0x92B7: 0x9577,
                0x92B8: 0x9802,
                0x92B9: 0x9CE5,
                0x92BA: 0x52C5,
                0x92BB: 0x6357,
                0x92BC: 0x76F4,
                0x92BD: 0x6715,
                0x92BE: 0x6C88,
                0x92BF: 0x73CD,
                0x92C0: 0x8CC3,
                0x92C1: 0x93AE,
                0x92C2: 0x9673,
                0x92C3: 0x6D25,
                0x92C4: 0x589C,
                0x92C5: 0x690E,
                0x92C6: 0x69CC,
                0x92C7: 0x8FFD,
                0x92C8: 0x939A,
                0x92C9: 0x75DB,
                0x92CA: 0x901A,
                0x92CB: 0x585A,
                0x92CC: 0x6802,
                0x92CD: 0x63B4,
                0x92CE: 0x69FB,
                0x92CF: 0x4F43,
                0x92D0: 0x6F2C,
                0x92D1: 0x67D8,
                0x92D2: 0x8FBB,
                0x92D3: 0x8526,
                0x92D4: 0x7DB4,
                0x92D5: 0x9354,
                0x92D6: 0x693F,
                0x92D7: 0x6F70,
                0x92D8: 0x576A,
                0x92D9: 0x58F7,
                0x92DA: 0x5B2C,
                0x92DB: 0x7D2C,
                0x92DC: 0x722A,
                0x92DD: 0x540A,
                0x92DE: 0x91E3,
                0x92DF: 0x9DB4,
                0x92E0: 0x4EAD,
                0x92E1: 0x4F4E,
                0x92E2: 0x505C,
                0x92E3: 0x5075,
                0x92E4: 0x5243,
                0x92E5: 0x8C9E,
                0x92E6: 0x5448,
                0x92E7: 0x5824,
                0x92E8: 0x5B9A,
                0x92E9: 0x5E1D,
                0x92EA: 0x5E95,
                0x92EB: 0x5EAD,
                0x92EC: 0x5EF7,
                0x92ED: 0x5F1F,
                0x92EE: 0x608C,
                0x92EF: 0x62B5,
                0x92F0: 0x633A,
                0x92F1: 0x63D0,
                0x92F2: 0x68AF,
                0x92F3: 0x6C40,
                0x92F4: 0x7887,
                0x92F5: 0x798E,
                0x92F6: 0x7A0B,
                0x92F7: 0x7DE0,
                0x92F8: 0x8247,
                0x92F9: 0x8A02,
                0x92FA: 0x8AE6,
                0x92FB: 0x8E44,
                0x92FC: 0x9013,
                0x9340: 0x90B8,
                0x9341: 0x912D,
                0x9342: 0x91D8,
                0x9343: 0x9F0E,
                0x9344: 0x6CE5,
                0x9345: 0x6458,
                0x9346: 0x64E2,
                0x9347: 0x6575,
                0x9348: 0x6EF4,
                0x9349: 0x7684,
                0x934A: 0x7B1B,
                0x934B: 0x9069,
                0x934C: 0x93D1,
                0x934D: 0x6EBA,
                0x934E: 0x54F2,
                0x934F: 0x5FB9,
                0x9350: 0x64A4,
                0x9351: 0x8F4D,
                0x9352: 0x8FED,
                0x9353: 0x9244,
                0x9354: 0x5178,
                0x9355: 0x586B,
                0x9356: 0x5929,
                0x9357: 0x5C55,
                0x9358: 0x5E97,
                0x9359: 0x6DFB,
                0x935A: 0x7E8F,
                0x935B: 0x751C,
                0x935C: 0x8CBC,
                0x935D: 0x8EE2,
                0x935E: 0x985B,
                0x935F: 0x70B9,
                0x9360: 0x4F1D,
                0x9361: 0x6BBF,
                0x9362: 0x6FB1,
                0x9363: 0x7530,
                0x9364: 0x96FB,
                0x9365: 0x514E,
                0x9366: 0x5410,
                0x9367: 0x5835,
                0x9368: 0x5857,
                0x9369: 0x59AC,
                0x936A: 0x5C60,
                0x936B: 0x5F92,
                0x936C: 0x6597,
                0x936D: 0x675C,
                0x936E: 0x6E21,
                0x936F: 0x767B,
                0x9370: 0x83DF,
                0x9371: 0x8CED,
                0x9372: 0x9014,
                0x9373: 0x90FD,
                0x9374: 0x934D,
                0x9375: 0x7825,
                0x9376: 0x783A,
                0x9377: 0x52AA,
                0x9378: 0x5EA6,
                0x9379: 0x571F,
                0x937A: 0x5974,
                0x937B: 0x6012,
                0x937C: 0x5012,
                0x937D: 0x515A,
                0x937E: 0x51AC,
                0x9380: 0x51CD,
                0x9381: 0x5200,
                0x9382: 0x5510,
                0x9383: 0x5854,
                0x9384: 0x5858,
                0x9385: 0x5957,
                0x9386: 0x5B95,
                0x9387: 0x5CF6,
                0x9388: 0x5D8B,
                0x9389: 0x60BC,
                0x938A: 0x6295,
                0x938B: 0x642D,
                0x938C: 0x6771,
                0x938D: 0x6843,
                0x938E: 0x68BC,
                0x938F: 0x68DF,
                0x9390: 0x76D7,
                0x9391: 0x6DD8,
                0x9392: 0x6E6F,
                0x9393: 0x6D9B,
                0x9394: 0x706F,
                0x9395: 0x71C8,
                0x9396: 0x5F53,
                0x9397: 0x75D8,
                0x9398: 0x7977,
                0x9399: 0x7B49,
                0x939A: 0x7B54,
                0x939B: 0x7B52,
                0x939C: 0x7CD6,
                0x939D: 0x7D71,
                0x939E: 0x5230,
                0x939F: 0x8463,
                0x93A0: 0x8569,
                0x93A1: 0x85E4,
                0x93A2: 0x8A0E,
                0x93A3: 0x8B04,
                0x93A4: 0x8C46,
                0x93A5: 0x8E0F,
                0x93A6: 0x9003,
                0x93A7: 0x900F,
                0x93A8: 0x9419,
                0x93A9: 0x9676,
                0x93AA: 0x982D,
                0x93AB: 0x9A30,
                0x93AC: 0x95D8,
                0x93AD: 0x50CD,
                0x93AE: 0x52D5,
                0x93AF: 0x540C,
                0x93B0: 0x5802,
                0x93B1: 0x5C0E,
                0x93B2: 0x61A7,
                0x93B3: 0x649E,
                0x93B4: 0x6D1E,
                0x93B5: 0x77B3,
                0x93B6: 0x7AE5,
                0x93B7: 0x80F4,
                0x93B8: 0x8404,
                0x93B9: 0x9053,
                0x93BA: 0x9285,
                0x93BB: 0x5CE0,
                0x93BC: 0x9D07,
                0x93BD: 0x533F,
                0x93BE: 0x5F97,
                0x93BF: 0x5FB3,
                0x93C0: 0x6D9C,
                0x93C1: 0x7279,
                0x93C2: 0x7763,
                0x93C3: 0x79BF,
                0x93C4: 0x7BE4,
                0x93C5: 0x6BD2,
                0x93C6: 0x72EC,
                0x93C7: 0x8AAD,
                0x93C8: 0x6803,
                0x93C9: 0x6A61,
                0x93CA: 0x51F8,
                0x93CB: 0x7A81,
                0x93CC: 0x6934,
                0x93CD: 0x5C4A,
                0x93CE: 0x9CF6,
                0x93CF: 0x82EB,
                0x93D0: 0x5BC5,
                0x93D1: 0x9149,
                0x93D2: 0x701E,
                0x93D3: 0x5678,
                0x93D4: 0x5C6F,
                0x93D5: 0x60C7,
                0x93D6: 0x6566,
                0x93D7: 0x6C8C,
                0x93D8: 0x8C5A,
                0x93D9: 0x9041,
                0x93DA: 0x9813,
                0x93DB: 0x5451,
                0x93DC: 0x66C7,
                0x93DD: 0x920D,
                0x93DE: 0x5948,
                0x93DF: 0x90A3,
                0x93E0: 0x5185,
                0x93E1: 0x4E4D,
                0x93E2: 0x51EA,
                0x93E3: 0x8599,
                0x93E4: 0x8B0E,
                0x93E5: 0x7058,
                0x93E6: 0x637A,
                0x93E7: 0x934B,
                0x93E8: 0x6962,
                0x93E9: 0x99B4,
                0x93EA: 0x7E04,
                0x93EB: 0x7577,
                0x93EC: 0x5357,
                0x93ED: 0x6960,
                0x93EE: 0x8EDF,
                0x93EF: 0x96E3,
                0x93F0: 0x6C5D,
                0x93F1: 0x4E8C,
                0x93F2: 0x5C3C,
                0x93F3: 0x5F10,
                0x93F4: 0x8FE9,
                0x93F5: 0x5302,
                0x93F6: 0x8CD1,
                0x93F7: 0x8089,
                0x93F8: 0x8679,
                0x93F9: 0x5EFF,
                0x93FA: 0x65E5,
                0x93FB: 0x4E73,
                0x93FC: 0x5165,
                0x9440: 0x5982,
                0x9441: 0x5C3F,
                0x9442: 0x97EE,
                0x9443: 0x4EFB,
                0x9444: 0x598A,
                0x9445: 0x5FCD,
                0x9446: 0x8A8D,
                0x9447: 0x6FE1,
                0x9448: 0x79B0,
                0x9449: 0x7962,
                0x944A: 0x5BE7,
                0x944B: 0x8471,
                0x944C: 0x732B,
                0x944D: 0x71B1,
                0x944E: 0x5E74,
                0x944F: 0x5FF5,
                0x9450: 0x637B,
                0x9451: 0x649A,
                0x9452: 0x71C3,
                0x9453: 0x7C98,
                0x9454: 0x4E43,
                0x9455: 0x5EFC,
                0x9456: 0x4E4B,
                0x9457: 0x57DC,
                0x9458: 0x56A2,
                0x9459: 0x60A9,
                0x945A: 0x6FC3,
                0x945B: 0x7D0D,
                0x945C: 0x80FD,
                0x945D: 0x8133,
                0x945E: 0x81BF,
                0x945F: 0x8FB2,
                0x9460: 0x8997,
                0x9461: 0x86A4,
                0x9462: 0x5DF4,
                0x9463: 0x628A,
                0x9464: 0x64AD,
                0x9465: 0x8987,
                0x9466: 0x6777,
                0x9467: 0x6CE2,
                0x9468: 0x6D3E,
                0x9469: 0x7436,
                0x946A: 0x7834,
                0x946B: 0x5A46,
                0x946C: 0x7F75,
                0x946D: 0x82AD,
                0x946E: 0x99AC,
                0x946F: 0x4FF3,
                0x9470: 0x5EC3,
                0x9471: 0x62DD,
                0x9472: 0x6392,
                0x9473: 0x6557,
                0x9474: 0x676F,
                0x9475: 0x76C3,
                0x9476: 0x724C,
                0x9477: 0x80CC,
                0x9478: 0x80BA,
                0x9479: 0x8F29,
                0x947A: 0x914D,
                0x947B: 0x500D,
                0x947C: 0x57F9,
                0x947D: 0x5A92,
                0x947E: 0x6885,
                0x9480: 0x6973,
                0x9481: 0x7164,
                0x9482: 0x72FD,
                0x9483: 0x8CB7,
                0x9484: 0x58F2,
                0x9485: 0x8CE0,
                0x9486: 0x966A,
                0x9487: 0x9019,
                0x9488: 0x877F,
                0x9489: 0x79E4,
                0x948A: 0x77E7,
                0x948B: 0x8429,
                0x948C: 0x4F2F,
                0x948D: 0x5265,
                0x948E: 0x535A,
                0x948F: 0x62CD,
                0x9490: 0x67CF,
                0x9491: 0x6CCA,
                0x9492: 0x767D,
                0x9493: 0x7B94,
                0x9494: 0x7C95,
                0x9495: 0x8236,
                0x9496: 0x8584,
                0x9497: 0x8FEB,
                0x9498: 0x66DD,
                0x9499: 0x6F20,
                0x949A: 0x7206,
                0x949B: 0x7E1B,
                0x949C: 0x83AB,
                0x949D: 0x99C1,
                0x949E: 0x9EA6,
                0x949F: 0x51FD,
                0x94A0: 0x7BB1,
                0x94A1: 0x7872,
                0x94A2: 0x7BB8,
                0x94A3: 0x8087,
                0x94A4: 0x7B48,
                0x94A5: 0x6AE8,
                0x94A6: 0x5E61,
                0x94A7: 0x808C,
                0x94A8: 0x7551,
                0x94A9: 0x7560,
                0x94AA: 0x516B,
                0x94AB: 0x9262,
                0x94AC: 0x6E8C,
                0x94AD: 0x767A,
                0x94AE: 0x9197,
                0x94AF: 0x9AEA,
                0x94B0: 0x4F10,
                0x94B1: 0x7F70,
                0x94B2: 0x629C,
                0x94B3: 0x7B4F,
                0x94B4: 0x95A5,
                0x94B5: 0x9CE9,
                0x94B6: 0x567A,
                0x94B7: 0x5859,
                0x94B8: 0x86E4,
                0x94B9: 0x96BC,
                0x94BA: 0x4F34,
                0x94BB: 0x5224,
                0x94BC: 0x534A,
                0x94BD: 0x53CD,
                0x94BE: 0x53DB,
                0x94BF: 0x5E06,
                0x94C0: 0x642C,
                0x94C1: 0x6591,
                0x94C2: 0x677F,
                0x94C3: 0x6C3E,
                0x94C4: 0x6C4E,
                0x94C5: 0x7248,
                0x94C6: 0x72AF,
                0x94C7: 0x73ED,
                0x94C8: 0x7554,
                0x94C9: 0x7E41,
                0x94CA: 0x822C,
                0x94CB: 0x85E9,
                0x94CC: 0x8CA9,
                0x94CD: 0x7BC4,
                0x94CE: 0x91C6,
                0x94CF: 0x7169,
                0x94D0: 0x9812,
                0x94D1: 0x98EF,
                0x94D2: 0x633D,
                0x94D3: 0x6669,
                0x94D4: 0x756A,
                0x94D5: 0x76E4,
                0x94D6: 0x78D0,
                0x94D7: 0x8543,
                0x94D8: 0x86EE,
                0x94D9: 0x532A,
                0x94DA: 0x5351,
                0x94DB: 0x5426,
                0x94DC: 0x5983,
                0x94DD: 0x5E87,
                0x94DE: 0x5F7C,
                0x94DF: 0x60B2,
                0x94E0: 0x6249,
                0x94E1: 0x6279,
                0x94E2: 0x62AB,
                0x94E3: 0x6590,
                0x94E4: 0x6BD4,
                0x94E5: 0x6CCC,
                0x94E6: 0x75B2,
                0x94E7: 0x76AE,
                0x94E8: 0x7891,
                0x94E9: 0x79D8,
                0x94EA: 0x7DCB,
                0x94EB: 0x7F77,
                0x94EC: 0x80A5,
                0x94ED: 0x88AB,
                0x94EE: 0x8AB9,
                0x94EF: 0x8CBB,
                0x94F0: 0x907F,
                0x94F1: 0x975E,
                0x94F2: 0x98DB,
                0x94F3: 0x6A0B,
                0x94F4: 0x7C38,
                0x94F5: 0x5099,
                0x94F6: 0x5C3E,
                0x94F7: 0x5FAE,
                0x94F8: 0x6787,
                0x94F9: 0x6BD8,
                0x94FA: 0x7435,
                0x94FB: 0x7709,
                0x94FC: 0x7F8E,
                0x9540: 0x9F3B,
                0x9541: 0x67CA,
                0x9542: 0x7A17,
                0x9543: 0x5339,
                0x9544: 0x758B,
                0x9545: 0x9AED,
                0x9546: 0x5F66,
                0x9547: 0x819D,
                0x9548: 0x83F1,
                0x9549: 0x8098,
                0x954A: 0x5F3C,
                0x954B: 0x5FC5,
                0x954C: 0x7562,
                0x954D: 0x7B46,
                0x954E: 0x903C,
                0x954F: 0x6867,
                0x9550: 0x59EB,
                0x9551: 0x5A9B,
                0x9552: 0x7D10,
                0x9553: 0x767E,
                0x9554: 0x8B2C,
                0x9555: 0x4FF5,
                0x9556: 0x5F6A,
                0x9557: 0x6A19,
                0x9558: 0x6C37,
                0x9559: 0x6F02,
                0x955A: 0x74E2,
                0x955B: 0x7968,
                0x955C: 0x8868,
                0x955D: 0x8A55,
                0x955E: 0x8C79,
                0x955F: 0x5EDF,
                0x9560: 0x63CF,
                0x9561: 0x75C5,
                0x9562: 0x79D2,
                0x9563: 0x82D7,
                0x9564: 0x9328,
                0x9565: 0x92F2,
                0x9566: 0x849C,
                0x9567: 0x86ED,
                0x9568: 0x9C2D,
                0x9569: 0x54C1,
                0x956A: 0x5F6C,
                0x956B: 0x658C,
                0x956C: 0x6D5C,
                0x956D: 0x7015,
                0x956E: 0x8CA7,
                0x956F: 0x8CD3,
                0x9570: 0x983B,
                0x9571: 0x654F,
                0x9572: 0x74F6,
                0x9573: 0x4E0D,
                0x9574: 0x4ED8,
                0x9575: 0x57E0,
                0x9576: 0x592B,
                0x9577: 0x5A66,
                0x9578: 0x5BCC,
                0x9579: 0x51A8,
                0x957A: 0x5E03,
                0x957B: 0x5E9C,
                0x957C: 0x6016,
                0x957D: 0x6276,
                0x957E: 0x6577,
                0x9580: 0x65A7,
                0x9581: 0x666E,
                0x9582: 0x6D6E,
                0x9583: 0x7236,
                0x9584: 0x7B26,
                0x9585: 0x8150,
                0x9586: 0x819A,
                0x9587: 0x8299,
                0x9588: 0x8B5C,
                0x9589: 0x8CA0,
                0x958A: 0x8CE6,
                0x958B: 0x8D74,
                0x958C: 0x961C,
                0x958D: 0x9644,
                0x958E: 0x4FAE,
                0x958F: 0x64AB,
                0x9590: 0x6B66,
                0x9591: 0x821E,
                0x9592: 0x8461,
                0x9593: 0x856A,
                0x9594: 0x90E8,
                0x9595: 0x5C01,
                0x9596: 0x6953,
                0x9597: 0x98A8,
                0x9598: 0x847A,
                0x9599: 0x8557,
                0x959A: 0x4F0F,
                0x959B: 0x526F,
                0x959C: 0x5FA9,
                0x959D: 0x5E45,
                0x959E: 0x670D,
                0x959F: 0x798F,
                0x95A0: 0x8179,
                0x95A1: 0x8907,
                0x95A2: 0x8986,
                0x95A3: 0x6DF5,
                0x95A4: 0x5F17,
                0x95A5: 0x6255,
                0x95A6: 0x6CB8,
                0x95A7: 0x4ECF,
                0x95A8: 0x7269,
                0x95A9: 0x9B92,
                0x95AA: 0x5206,
                0x95AB: 0x543B,
                0x95AC: 0x5674,
                0x95AD: 0x58B3,
                0x95AE: 0x61A4,
                0x95AF: 0x626E,
                0x95B0: 0x711A,
                0x95B1: 0x596E,
                0x95B2: 0x7C89,
                0x95B3: 0x7CDE,
                0x95B4: 0x7D1B,
                0x95B5: 0x96F0,
                0x95B6: 0x6587,
                0x95B7: 0x805E,
                0x95B8: 0x4E19,
                0x95B9: 0x4F75,
                0x95BA: 0x5175,
                0x95BB: 0x5840,
                0x95BC: 0x5E63,
                0x95BD: 0x5E73,
                0x95BE: 0x5F0A,
                0x95BF: 0x67C4,
                0x95C0: 0x4E26,
                0x95C1: 0x853D,
                0x95C2: 0x9589,
                0x95C3: 0x965B,
                0x95C4: 0x7C73,
                0x95C5: 0x9801,
                0x95C6: 0x50FB,
                0x95C7: 0x58C1,
                0x95C8: 0x7656,
                0x95C9: 0x78A7,
                0x95CA: 0x5225,
                0x95CB: 0x77A5,
                0x95CC: 0x8511,
                0x95CD: 0x7B86,
                0x95CE: 0x504F,
                0x95CF: 0x5909,
                0x95D0: 0x7247,
                0x95D1: 0x7BC7,
                0x95D2: 0x7DE8,
                0x95D3: 0x8FBA,
                0x95D4: 0x8FD4,
                0x95D5: 0x904D,
                0x95D6: 0x4FBF,
                0x95D7: 0x52C9,
                0x95D8: 0x5A29,
                0x95D9: 0x5F01,
                0x95DA: 0x97AD,
                0x95DB: 0x4FDD,
                0x95DC: 0x8217,
                0x95DD: 0x92EA,
                0x95DE: 0x5703,
                0x95DF: 0x6355,
                0x95E0: 0x6B69,
                0x95E1: 0x752B,
                0x95E2: 0x88DC,
                0x95E3: 0x8F14,
                0x95E4: 0x7A42,
                0x95E5: 0x52DF,
                0x95E6: 0x5893,
                0x95E7: 0x6155,
                0x95E8: 0x620A,
                0x95E9: 0x66AE,
                0x95EA: 0x6BCD,
                0x95EB: 0x7C3F,
                0x95EC: 0x83E9,
                0x95ED: 0x5023,
                0x95EE: 0x4FF8,
                0x95EF: 0x5305,
                0x95F0: 0x5446,
                0x95F1: 0x5831,
                0x95F2: 0x5949,
                0x95F3: 0x5B9D,
                0x95F4: 0x5CF0,
                0x95F5: 0x5CEF,
                0x95F6: 0x5D29,
                0x95F7: 0x5E96,
                0x95F8: 0x62B1,
                0x95F9: 0x6367,
                0x95FA: 0x653E,
                0x95FB: 0x65B9,
                0x95FC: 0x670B,
                0x9640: 0x6CD5,
                0x9641: 0x6CE1,
                0x9642: 0x70F9,
                0x9643: 0x7832,
                0x9644: 0x7E2B,
                0x9645: 0x80DE,
                0x9646: 0x82B3,
                0x9647: 0x840C,
                0x9648: 0x84EC,
                0x9649: 0x8702,
                0x964A: 0x8912,
                0x964B: 0x8A2A,
                0x964C: 0x8C4A,
                0x964D: 0x90A6,
                0x964E: 0x92D2,
                0x964F: 0x98FD,
                0x9650: 0x9CF3,
                0x9651: 0x9D6C,
                0x9652: 0x4E4F,
                0x9653: 0x4EA1,
                0x9654: 0x508D,
                0x9655: 0x5256,
                0x9656: 0x574A,
                0x9657: 0x59A8,
                0x9658: 0x5E3D,
                0x9659: 0x5FD8,
                0x965A: 0x5FD9,
                0x965B: 0x623F,
                0x965C: 0x66B4,
                0x965D: 0x671B,
                0x965E: 0x67D0,
                0x965F: 0x68D2,
                0x9660: 0x5192,
                0x9661: 0x7D21,
                0x9662: 0x80AA,
                0x9663: 0x81A8,
                0x9664: 0x8B00,
                0x9665: 0x8C8C,
                0x9666: 0x8CBF,
                0x9667: 0x927E,
                0x9668: 0x9632,
                0x9669: 0x5420,
                0x966A: 0x982C,
                0x966B: 0x5317,
                0x966C: 0x50D5,
                0x966D: 0x535C,
                0x966E: 0x58A8,
                0x966F: 0x64B2,
                0x9670: 0x6734,
                0x9671: 0x7267,
                0x9672: 0x7766,
                0x9673: 0x7A46,
                0x9674: 0x91E6,
                0x9675: 0x52C3,
                0x9676: 0x6CA1,
                0x9677: 0x6B86,
                0x9678: 0x5800,
                0x9679: 0x5E4C,
                0x967A: 0x5954,
                0x967B: 0x672C,
                0x967C: 0x7FFB,
                0x967D: 0x51E1,
                0x967E: 0x76C6,
                0x9680: 0x6469,
                0x9681: 0x78E8,
                0x9682: 0x9B54,
                0x9683: 0x9EBB,
                0x9684: 0x57CB,
                0x9685: 0x59B9,
                0x9686: 0x6627,
                0x9687: 0x679A,
                0x9688: 0x6BCE,
                0x9689: 0x54E9,
                0x968A: 0x69D9,
                0x968B: 0x5E55,
                0x968C: 0x819C,
                0x968D: 0x6795,
                0x968E: 0x9BAA,
                0x968F: 0x67FE,
                0x9690: 0x9C52,
                0x9691: 0x685D,
                0x9692: 0x4EA6,
                0x9693: 0x4FE3,
                0x9694: 0x53C8,
                0x9695: 0x62B9,
                0x9696: 0x672B,
                0x9697: 0x6CAB,
                0x9698: 0x8FC4,
                0x9699: 0x4FAD,
                0x969A: 0x7E6D,
                0x969B: 0x9EBF,
                0x969C: 0x4E07,
                0x969D: 0x6162,
                0x969E: 0x6E80,
                0x969F: 0x6F2B,
                0x96A0: 0x8513,
                0x96A1: 0x5473,
                0x96A2: 0x672A,
                0x96A3: 0x9B45,
                0x96A4: 0x5DF3,
                0x96A5: 0x7B95,
                0x96A6: 0x5CAC,
                0x96A7: 0x5BC6,
                0x96A8: 0x871C,
                0x96A9: 0x6E4A,
                0x96AA: 0x84D1,
                0x96AB: 0x7A14,
                0x96AC: 0x8108,
                0x96AD: 0x5999,
                0x96AE: 0x7C8D,
                0x96AF: 0x6C11,
                0x96B0: 0x7720,
                0x96B1: 0x52D9,
                0x96B2: 0x5922,
                0x96B3: 0x7121,
                0x96B4: 0x725F,
                0x96B5: 0x77DB,
                0x96B6: 0x9727,
                0x96B7: 0x9D61,
                0x96B8: 0x690B,
                0x96B9: 0x5A7F,
                0x96BA: 0x5A18,
                0x96BB: 0x51A5,
                0x96BC: 0x540D,
                0x96BD: 0x547D,
                0x96BE: 0x660E,
                0x96BF: 0x76DF,
                0x96C0: 0x8FF7,
                0x96C1: 0x9298,
                0x96C2: 0x9CF4,
                0x96C3: 0x59EA,
                0x96C4: 0x725D,
                0x96C5: 0x6EC5,
                0x96C6: 0x514D,
                0x96C7: 0x68C9,
                0x96C8: 0x7DBF,
                0x96C9: 0x7DEC,
                0x96CA: 0x9762,
                0x96CB: 0x9EBA,
                0x96CC: 0x6478,
                0x96CD: 0x6A21,
                0x96CE: 0x8302,
                0x96CF: 0x5984,
                0x96D0: 0x5B5F,
                0x96D1: 0x6BDB,
                0x96D2: 0x731B,
                0x96D3: 0x76F2,
                0x96D4: 0x7DB2,
                0x96D5: 0x8017,
                0x96D6: 0x8499,
                0x96D7: 0x5132,
                0x96D8: 0x6728,
                0x96D9: 0x9ED9,
                0x96DA: 0x76EE,
                0x96DB: 0x6762,
                0x96DC: 0x52FF,
                0x96DD: 0x9905,
                0x96DE: 0x5C24,
                0x96DF: 0x623B,
                0x96E0: 0x7C7E,
                0x96E1: 0x8CB0,
                0x96E2: 0x554F,
                0x96E3: 0x60B6,
                0x96E4: 0x7D0B,
                0x96E5: 0x9580,
                0x96E6: 0x5301,
                0x96E7: 0x4E5F,
                0x96E8: 0x51B6,
                0x96E9: 0x591C,
                0x96EA: 0x723A,
                0x96EB: 0x8036,
                0x96EC: 0x91CE,
                0x96ED: 0x5F25,
                0x96EE: 0x77E2,
                0x96EF: 0x5384,
                0x96F0: 0x5F79,
                0x96F1: 0x7D04,
                0x96F2: 0x85AC,
                0x96F3: 0x8A33,
                0x96F4: 0x8E8D,
                0x96F5: 0x9756,
                0x96F6: 0x67F3,
                0x96F7: 0x85AE,
                0x96F8: 0x9453,
                0x96F9: 0x6109,
                0x96FA: 0x6108,
                0x96FB: 0x6CB9,
                0x96FC: 0x7652,
                0x9740: 0x8AED,
                0x9741: 0x8F38,
                0x9742: 0x552F,
                0x9743: 0x4F51,
                0x9744: 0x512A,
                0x9745: 0x52C7,
                0x9746: 0x53CB,
                0x9747: 0x5BA5,
                0x9748: 0x5E7D,
                0x9749: 0x60A0,
                0x974A: 0x6182,
                0x974B: 0x63D6,
                0x974C: 0x6709,
                0x974D: 0x67DA,
                0x974E: 0x6E67,
                0x974F: 0x6D8C,
                0x9750: 0x7336,
                0x9751: 0x7337,
                0x9752: 0x7531,
                0x9753: 0x7950,
                0x9754: 0x88D5,
                0x9755: 0x8A98,
                0x9756: 0x904A,
                0x9757: 0x9091,
                0x9758: 0x90F5,
                0x9759: 0x96C4,
                0x975A: 0x878D,
                0x975B: 0x5915,
                0x975C: 0x4E88,
                0x975D: 0x4F59,
                0x975E: 0x4E0E,
                0x975F: 0x8A89,
                0x9760: 0x8F3F,
                0x9761: 0x9810,
                0x9762: 0x50AD,
                0x9763: 0x5E7C,
                0x9764: 0x5996,
                0x9765: 0x5BB9,
                0x9766: 0x5EB8,
                0x9767: 0x63DA,
                0x9768: 0x63FA,
                0x9769: 0x64C1,
                0x976A: 0x66DC,
                0x976B: 0x694A,
                0x976C: 0x69D8,
                0x976D: 0x6D0B,
                0x976E: 0x6EB6,
                0x976F: 0x7194,
                0x9770: 0x7528,
                0x9771: 0x7AAF,
                0x9772: 0x7F8A,
                0x9773: 0x8000,
                0x9774: 0x8449,
                0x9775: 0x84C9,
                0x9776: 0x8981,
                0x9777: 0x8B21,
                0x9778: 0x8E0A,
                0x9779: 0x9065,
                0x977A: 0x967D,
                0x977B: 0x990A,
                0x977C: 0x617E,
                0x977D: 0x6291,
                0x977E: 0x6B32,
                0x9780: 0x6C83,
                0x9781: 0x6D74,
                0x9782: 0x7FCC,
                0x9783: 0x7FFC,
                0x9784: 0x6DC0,
                0x9785: 0x7F85,
                0x9786: 0x87BA,
                0x9787: 0x88F8,
                0x9788: 0x6765,
                0x9789: 0x83B1,
                0x978A: 0x983C,
                0x978B: 0x96F7,
                0x978C: 0x6D1B,
                0x978D: 0x7D61,
                0x978E: 0x843D,
                0x978F: 0x916A,
                0x9790: 0x4E71,
                0x9791: 0x5375,
                0x9792: 0x5D50,
                0x9793: 0x6B04,
                0x9794: 0x6FEB,
                0x9795: 0x85CD,
                0x9796: 0x862D,
                0x9797: 0x89A7,
                0x9798: 0x5229,
                0x9799: 0x540F,
                0x979A: 0x5C65,
                0x979B: 0x674E,
                0x979C: 0x68A8,
                0x979D: 0x7406,
                0x979E: 0x7483,
                0x979F: 0x75E2,
                0x97A0: 0x88CF,
                0x97A1: 0x88E1,
                0x97A2: 0x91CC,
                0x97A3: 0x96E2,
                0x97A4: 0x9678,
                0x97A5: 0x5F8B,
                0x97A6: 0x7387,
                0x97A7: 0x7ACB,
                0x97A8: 0x844E,
                0x97A9: 0x63A0,
                0x97AA: 0x7565,
                0x97AB: 0x5289,
                0x97AC: 0x6D41,
                0x97AD: 0x6E9C,
                0x97AE: 0x7409,
                0x97AF: 0x7559,
                0x97B0: 0x786B,
                0x97B1: 0x7C92,
                0x97B2: 0x9686,
                0x97B3: 0x7ADC,
                0x97B4: 0x9F8D,
                0x97B5: 0x4FB6,
                0x97B6: 0x616E,
                0x97B7: 0x65C5,
                0x97B8: 0x865C,
                0x97B9: 0x4E86,
                0x97BA: 0x4EAE,
                0x97BB: 0x50DA,
                0x97BC: 0x4E21,
                0x97BD: 0x51CC,
                0x97BE: 0x5BEE,
                0x97BF: 0x6599,
                0x97C0: 0x6881,
                0x97C1: 0x6DBC,
                0x97C2: 0x731F,
                0x97C3: 0x7642,
                0x97C4: 0x77AD,
                0x97C5: 0x7A1C,
                0x97C6: 0x7CE7,
                0x97C7: 0x826F,
                0x97C8: 0x8AD2,
                0x97C9: 0x907C,
                0x97CA: 0x91CF,
                0x97CB: 0x9675,
                0x97CC: 0x9818,
                0x97CD: 0x529B,
                0x97CE: 0x7DD1,
                0x97CF: 0x502B,
                0x97D0: 0x5398,
                0x97D1: 0x6797,
                0x97D2: 0x6DCB,
                0x97D3: 0x71D0,
                0x97D4: 0x7433,
                0x97D5: 0x81E8,
                0x97D6: 0x8F2A,
                0x97D7: 0x96A3,
                0x97D8: 0x9C57,
                0x97D9: 0x9E9F,
                0x97DA: 0x7460,
                0x97DB: 0x5841,
                0x97DC: 0x6D99,
                0x97DD: 0x7D2F,
                0x97DE: 0x985E,
                0x97DF: 0x4EE4,
                0x97E0: 0x4F36,
                0x97E1: 0x4F8B,
                0x97E2: 0x51B7,
                0x97E3: 0x52B1,
                0x97E4: 0x5DBA,
                0x97E5: 0x601C,
                0x97E6: 0x73B2,
                0x97E7: 0x793C,
                0x97E8: 0x82D3,
                0x97E9: 0x9234,
                0x97EA: 0x96B7,
                0x97EB: 0x96F6,
                0x97EC: 0x970A,
                0x97ED: 0x9E97,
                0x97EE: 0x9F62,
                0x97EF: 0x66A6,
                0x97F0: 0x6B74,
                0x97F1: 0x5217,
                0x97F2: 0x52A3,
                0x97F3: 0x70C8,
                0x97F4: 0x88C2,
                0x97F5: 0x5EC9,
                0x97F6: 0x604B,
                0x97F7: 0x6190,
                0x97F8: 0x6F23,
                0x97F9: 0x7149,
                0x97FA: 0x7C3E,
                0x97FB: 0x7DF4,
                0x97FC: 0x806F,
                0x9840: 0x84EE,
                0x9841: 0x9023,
                0x9842: 0x932C,
                0x9843: 0x5442,
                0x9844: 0x9B6F,
                0x9845: 0x6AD3,
                0x9846: 0x7089,
                0x9847: 0x8CC2,
                0x9848: 0x8DEF,
                0x9849: 0x9732,
                0x984A: 0x52B4,
                0x984B: 0x5A41,
                0x984C: 0x5ECA,
                0x984D: 0x5F04,
                0x984E: 0x6717,
                0x984F: 0x697C,
                0x9850: 0x6994,
                0x9851: 0x6D6A,
                0x9852: 0x6F0F,
                0x9853: 0x7262,
                0x9854: 0x72FC,
                0x9855: 0x7BED,
                0x9856: 0x8001,
                0x9857: 0x807E,
                0x9858: 0x874B,
                0x9859: 0x90CE,
                0x985A: 0x516D,
                0x985B: 0x9E93,
                0x985C: 0x7984,
                0x985D: 0x808B,
                0x985E: 0x9332,
                0x985F: 0x8AD6,
                0x9860: 0x502D,
                0x9861: 0x548C,
                0x9862: 0x8A71,
                0x9863: 0x6B6A,
                0x9864: 0x8CC4,
                0x9865: 0x8107,
                0x9866: 0x60D1,
                0x9867: 0x67A0,
                0x9868: 0x9DF2,
                0x9869: 0x4E99,
                0x986A: 0x4E98,
                0x986B: 0x9C10,
                0x986C: 0x8A6B,
                0x986D: 0x85C1,
                0x986E: 0x8568,
                0x986F: 0x6900,
                0x9870: 0x6E7E,
                0x9871: 0x7897,
                0x9872: 0x8155,
                0x989F: 0x5F0C,
                0x98A0: 0x4E10,
                0x98A1: 0x4E15,
                0x98A2: 0x4E2A,
                0x98A3: 0x4E31,
                0x98A4: 0x4E36,
                0x98A5: 0x4E3C,
                0x98A6: 0x4E3F,
                0x98A7: 0x4E42,
                0x98A8: 0x4E56,
                0x98A9: 0x4E58,
                0x98AA: 0x4E82,
                0x98AB: 0x4E85,
                0x98AC: 0x8C6B,
                0x98AD: 0x4E8A,
                0x98AE: 0x8212,
                0x98AF: 0x5F0D,
                0x98B0: 0x4E8E,
                0x98B1: 0x4E9E,
                0x98B2: 0x4E9F,
                0x98B3: 0x4EA0,
                0x98B4: 0x4EA2,
                0x98B5: 0x4EB0,
                0x98B6: 0x4EB3,
                0x98B7: 0x4EB6,
                0x98B8: 0x4ECE,
                0x98B9: 0x4ECD,
                0x98BA: 0x4EC4,
                0x98BB: 0x4EC6,
                0x98BC: 0x4EC2,
                0x98BD: 0x4ED7,
                0x98BE: 0x4EDE,
                0x98BF: 0x4EED,
                0x98C0: 0x4EDF,
                0x98C1: 0x4EF7,
                0x98C2: 0x4F09,
                0x98C3: 0x4F5A,
                0x98C4: 0x4F30,
                0x98C5: 0x4F5B,
                0x98C6: 0x4F5D,
                0x98C7: 0x4F57,
                0x98C8: 0x4F47,
                0x98C9: 0x4F76,
                0x98CA: 0x4F88,
                0x98CB: 0x4F8F,
                0x98CC: 0x4F98,
                0x98CD: 0x4F7B,
                0x98CE: 0x4F69,
                0x98CF: 0x4F70,
                0x98D0: 0x4F91,
                0x98D1: 0x4F6F,
                0x98D2: 0x4F86,
                0x98D3: 0x4F96,
                0x98D4: 0x5118,
                0x98D5: 0x4FD4,
                0x98D6: 0x4FDF,
                0x98D7: 0x4FCE,
                0x98D8: 0x4FD8,
                0x98D9: 0x4FDB,
                0x98DA: 0x4FD1,
                0x98DB: 0x4FDA,
                0x98DC: 0x4FD0,
                0x98DD: 0x4FE4,
                0x98DE: 0x4FE5,
                0x98DF: 0x501A,
                0x98E0: 0x5028,
                0x98E1: 0x5014,
                0x98E2: 0x502A,
                0x98E3: 0x5025,
                0x98E4: 0x5005,
                0x98E5: 0x4F1C,
                0x98E6: 0x4FF6,
                0x98E7: 0x5021,
                0x98E8: 0x5029,
                0x98E9: 0x502C,
                0x98EA: 0x4FFE,
                0x98EB: 0x4FEF,
                0x98EC: 0x5011,
                0x98ED: 0x5006,
                0x98EE: 0x5043,
                0x98EF: 0x5047,
                0x98F0: 0x6703,
                0x98F1: 0x5055,
                0x98F2: 0x5050,
                0x98F3: 0x5048,
                0x98F4: 0x505A,
                0x98F5: 0x5056,
                0x98F6: 0x506C,
                0x98F7: 0x5078,
                0x98F8: 0x5080,
                0x98F9: 0x509A,
                0x98FA: 0x5085,
                0x98FB: 0x50B4,
                0x98FC: 0x50B2,
                0x9940: 0x50C9,
                0x9941: 0x50CA,
                0x9942: 0x50B3,
                0x9943: 0x50C2,
                0x9944: 0x50D6,
                0x9945: 0x50DE,
                0x9946: 0x50E5,
                0x9947: 0x50ED,
                0x9948: 0x50E3,
                0x9949: 0x50EE,
                0x994A: 0x50F9,
                0x994B: 0x50F5,
                0x994C: 0x5109,
                0x994D: 0x5101,
                0x994E: 0x5102,
                0x994F: 0x5116,
                0x9950: 0x5115,
                0x9951: 0x5114,
                0x9952: 0x511A,
                0x9953: 0x5121,
                0x9954: 0x513A,
                0x9955: 0x5137,
                0x9956: 0x513C,
                0x9957: 0x513B,
                0x9958: 0x513F,
                0x9959: 0x5140,
                0x995A: 0x5152,
                0x995B: 0x514C,
                0x995C: 0x5154,
                0x995D: 0x5162,
                0x995E: 0x7AF8,
                0x995F: 0x5169,
                0x9960: 0x516A,
                0x9961: 0x516E,
                0x9962: 0x5180,
                0x9963: 0x5182,
                0x9964: 0x56D8,
                0x9965: 0x518C,
                0x9966: 0x5189,
                0x9967: 0x518F,
                0x9968: 0x5191,
                0x9969: 0x5193,
                0x996A: 0x5195,
                0x996B: 0x5196,
                0x996C: 0x51A4,
                0x996D: 0x51A6,
                0x996E: 0x51A2,
                0x996F: 0x51A9,
                0x9970: 0x51AA,
                0x9971: 0x51AB,
                0x9972: 0x51B3,
                0x9973: 0x51B1,
                0x9974: 0x51B2,
                0x9975: 0x51B0,
                0x9976: 0x51B5,
                0x9977: 0x51BD,
                0x9978: 0x51C5,
                0x9979: 0x51C9,
                0x997A: 0x51DB,
                0x997B: 0x51E0,
                0x997C: 0x8655,
                0x997D: 0x51E9,
                0x997E: 0x51ED,
                0x9980: 0x51F0,
                0x9981: 0x51F5,
                0x9982: 0x51FE,
                0x9983: 0x5204,
                0x9984: 0x520B,
                0x9985: 0x5214,
                0x9986: 0x520E,
                0x9987: 0x5227,
                0x9988: 0x522A,
                0x9989: 0x522E,
                0x998A: 0x5233,
                0x998B: 0x5239,
                0x998C: 0x524F,
                0x998D: 0x5244,
                0x998E: 0x524B,
                0x998F: 0x524C,
                0x9990: 0x525E,
                0x9991: 0x5254,
                0x9992: 0x526A,
                0x9993: 0x5274,
                0x9994: 0x5269,
                0x9995: 0x5273,
                0x9996: 0x527F,
                0x9997: 0x527D,
                0x9998: 0x528D,
                0x9999: 0x5294,
                0x999A: 0x5292,
                0x999B: 0x5271,
                0x999C: 0x5288,
                0x999D: 0x5291,
                0x999E: 0x8FA8,
                0x999F: 0x8FA7,
                0x99A0: 0x52AC,
                0x99A1: 0x52AD,
                0x99A2: 0x52BC,
                0x99A3: 0x52B5,
                0x99A4: 0x52C1,
                0x99A5: 0x52CD,
                0x99A6: 0x52D7,
                0x99A7: 0x52DE,
                0x99A8: 0x52E3,
                0x99A9: 0x52E6,
                0x99AA: 0x98ED,
                0x99AB: 0x52E0,
                0x99AC: 0x52F3,
                0x99AD: 0x52F5,
                0x99AE: 0x52F8,
                0x99AF: 0x52F9,
                0x99B0: 0x5306,
                0x99B1: 0x5308,
                0x99B2: 0x7538,
                0x99B3: 0x530D,
                0x99B4: 0x5310,
                0x99B5: 0x530F,
                0x99B6: 0x5315,
                0x99B7: 0x531A,
                0x99B8: 0x5323,
                0x99B9: 0x532F,
                0x99BA: 0x5331,
                0x99BB: 0x5333,
                0x99BC: 0x5338,
                0x99BD: 0x5340,
                0x99BE: 0x5346,
                0x99BF: 0x5345,
                0x99C0: 0x4E17,
                0x99C1: 0x5349,
                0x99C2: 0x534D,
                0x99C3: 0x51D6,
                0x99C4: 0x535E,
                0x99C5: 0x5369,
                0x99C6: 0x536E,
                0x99C7: 0x5918,
                0x99C8: 0x537B,
                0x99C9: 0x5377,
                0x99CA: 0x5382,
                0x99CB: 0x5396,
                0x99CC: 0x53A0,
                0x99CD: 0x53A6,
                0x99CE: 0x53A5,
                0x99CF: 0x53AE,
                0x99D0: 0x53B0,
                0x99D1: 0x53B6,
                0x99D2: 0x53C3,
                0x99D3: 0x7C12,
                0x99D4: 0x96D9,
                0x99D5: 0x53DF,
                0x99D6: 0x66FC,
                0x99D7: 0x71EE,
                0x99D8: 0x53EE,
                0x99D9: 0x53E8,
                0x99DA: 0x53ED,
                0x99DB: 0x53FA,
                0x99DC: 0x5401,
                0x99DD: 0x543D,
                0x99DE: 0x5440,
                0x99DF: 0x542C,
                0x99E0: 0x542D,
                0x99E1: 0x543C,
                0x99E2: 0x542E,
                0x99E3: 0x5436,
                0x99E4: 0x5429,
                0x99E5: 0x541D,
                0x99E6: 0x544E,
                0x99E7: 0x548F,
                0x99E8: 0x5475,
                0x99E9: 0x548E,
                0x99EA: 0x545F,
                0x99EB: 0x5471,
                0x99EC: 0x5477,
                0x99ED: 0x5470,
                0x99EE: 0x5492,
                0x99EF: 0x547B,
                0x99F0: 0x5480,
                0x99F1: 0x5476,
                0x99F2: 0x5484,
                0x99F3: 0x5490,
                0x99F4: 0x5486,
                0x99F5: 0x54C7,
                0x99F6: 0x54A2,
                0x99F7: 0x54B8,
                0x99F8: 0x54A5,
                0x99F9: 0x54AC,
                0x99FA: 0x54C4,
                0x99FB: 0x54C8,
                0x99FC: 0x54A8,
                0x9A40: 0x54AB,
                0x9A41: 0x54C2,
                0x9A42: 0x54A4,
                0x9A43: 0x54BE,
                0x9A44: 0x54BC,
                0x9A45: 0x54D8,
                0x9A46: 0x54E5,
                0x9A47: 0x54E6,
                0x9A48: 0x550F,
                0x9A49: 0x5514,
                0x9A4A: 0x54FD,
                0x9A4B: 0x54EE,
                0x9A4C: 0x54ED,
                0x9A4D: 0x54FA,
                0x9A4E: 0x54E2,
                0x9A4F: 0x5539,
                0x9A50: 0x5540,
                0x9A51: 0x5563,
                0x9A52: 0x554C,
                0x9A53: 0x552E,
                0x9A54: 0x555C,
                0x9A55: 0x5545,
                0x9A56: 0x5556,
                0x9A57: 0x5557,
                0x9A58: 0x5538,
                0x9A59: 0x5533,
                0x9A5A: 0x555D,
                0x9A5B: 0x5599,
                0x9A5C: 0x5580,
                0x9A5D: 0x54AF,
                0x9A5E: 0x558A,
                0x9A5F: 0x559F,
                0x9A60: 0x557B,
                0x9A61: 0x557E,
                0x9A62: 0x5598,
                0x9A63: 0x559E,
                0x9A64: 0x55AE,
                0x9A65: 0x557C,
                0x9A66: 0x5583,
                0x9A67: 0x55A9,
                0x9A68: 0x5587,
                0x9A69: 0x55A8,
                0x9A6A: 0x55DA,
                0x9A6B: 0x55C5,
                0x9A6C: 0x55DF,
                0x9A6D: 0x55C4,
                0x9A6E: 0x55DC,
                0x9A6F: 0x55E4,
                0x9A70: 0x55D4,
                0x9A71: 0x5614,
                0x9A72: 0x55F7,
                0x9A73: 0x5616,
                0x9A74: 0x55FE,
                0x9A75: 0x55FD,
                0x9A76: 0x561B,
                0x9A77: 0x55F9,
                0x9A78: 0x564E,
                0x9A79: 0x5650,
                0x9A7A: 0x71DF,
                0x9A7B: 0x5634,
                0x9A7C: 0x5636,
                0x9A7D: 0x5632,
                0x9A7E: 0x5638,
                0x9A80: 0x566B,
                0x9A81: 0x5664,
                0x9A82: 0x562F,
                0x9A83: 0x566C,
                0x9A84: 0x566A,
                0x9A85: 0x5686,
                0x9A86: 0x5680,
                0x9A87: 0x568A,
                0x9A88: 0x56A0,
                0x9A89: 0x5694,
                0x9A8A: 0x568F,
                0x9A8B: 0x56A5,
                0x9A8C: 0x56AE,
                0x9A8D: 0x56B6,
                0x9A8E: 0x56B4,
                0x9A8F: 0x56C2,
                0x9A90: 0x56BC,
                0x9A91: 0x56C1,
                0x9A92: 0x56C3,
                0x9A93: 0x56C0,
                0x9A94: 0x56C8,
                0x9A95: 0x56CE,
                0x9A96: 0x56D1,
                0x9A97: 0x56D3,
                0x9A98: 0x56D7,
                0x9A99: 0x56EE,
                0x9A9A: 0x56F9,
                0x9A9B: 0x5700,
                0x9A9C: 0x56FF,
                0x9A9D: 0x5704,
                0x9A9E: 0x5709,
                0x9A9F: 0x5708,
                0x9AA0: 0x570B,
                0x9AA1: 0x570D,
                0x9AA2: 0x5713,
                0x9AA3: 0x5718,
                0x9AA4: 0x5716,
                0x9AA5: 0x55C7,
                0x9AA6: 0x571C,
                0x9AA7: 0x5726,
                0x9AA8: 0x5737,
                0x9AA9: 0x5738,
                0x9AAA: 0x574E,
                0x9AAB: 0x573B,
                0x9AAC: 0x5740,
                0x9AAD: 0x574F,
                0x9AAE: 0x5769,
                0x9AAF: 0x57C0,
                0x9AB0: 0x5788,
                0x9AB1: 0x5761,
                0x9AB2: 0x577F,
                0x9AB3: 0x5789,
                0x9AB4: 0x5793,
                0x9AB5: 0x57A0,
                0x9AB6: 0x57B3,
                0x9AB7: 0x57A4,
                0x9AB8: 0x57AA,
                0x9AB9: 0x57B0,
                0x9ABA: 0x57C3,
                0x9ABB: 0x57C6,
                0x9ABC: 0x57D4,
                0x9ABD: 0x57D2,
                0x9ABE: 0x57D3,
                0x9ABF: 0x580A,
                0x9AC0: 0x57D6,
                0x9AC1: 0x57E3,
                0x9AC2: 0x580B,
                0x9AC3: 0x5819,
                0x9AC4: 0x581D,
                0x9AC5: 0x5872,
                0x9AC6: 0x5821,
                0x9AC7: 0x5862,
                0x9AC8: 0x584B,
                0x9AC9: 0x5870,
                0x9ACA: 0x6BC0,
                0x9ACB: 0x5852,
                0x9ACC: 0x583D,
                0x9ACD: 0x5879,
                0x9ACE: 0x5885,
                0x9ACF: 0x58B9,
                0x9AD0: 0x589F,
                0x9AD1: 0x58AB,
                0x9AD2: 0x58BA,
                0x9AD3: 0x58DE,
                0x9AD4: 0x58BB,
                0x9AD5: 0x58B8,
                0x9AD6: 0x58AE,
                0x9AD7: 0x58C5,
                0x9AD8: 0x58D3,
                0x9AD9: 0x58D1,
                0x9ADA: 0x58D7,
                0x9ADB: 0x58D9,
                0x9ADC: 0x58D8,
                0x9ADD: 0x58E5,
                0x9ADE: 0x58DC,
                0x9ADF: 0x58E4,
                0x9AE0: 0x58DF,
                0x9AE1: 0x58EF,
                0x9AE2: 0x58FA,
                0x9AE3: 0x58F9,
                0x9AE4: 0x58FB,
                0x9AE5: 0x58FC,
                0x9AE6: 0x58FD,
                0x9AE7: 0x5902,
                0x9AE8: 0x590A,
                0x9AE9: 0x5910,
                0x9AEA: 0x591B,
                0x9AEB: 0x68A6,
                0x9AEC: 0x5925,
                0x9AED: 0x592C,
                0x9AEE: 0x592D,
                0x9AEF: 0x5932,
                0x9AF0: 0x5938,
                0x9AF1: 0x593E,
                0x9AF2: 0x7AD2,
                0x9AF3: 0x5955,
                0x9AF4: 0x5950,
                0x9AF5: 0x594E,
                0x9AF6: 0x595A,
                0x9AF7: 0x5958,
                0x9AF8: 0x5962,
                0x9AF9: 0x5960,
                0x9AFA: 0x5967,
                0x9AFB: 0x596C,
                0x9AFC: 0x5969,
                0x9B40: 0x5978,
                0x9B41: 0x5981,
                0x9B42: 0x599D,
                0x9B43: 0x4F5E,
                0x9B44: 0x4FAB,
                0x9B45: 0x59A3,
                0x9B46: 0x59B2,
                0x9B47: 0x59C6,
                0x9B48: 0x59E8,
                0x9B49: 0x59DC,
                0x9B4A: 0x598D,
                0x9B4B: 0x59D9,
                0x9B4C: 0x59DA,
                0x9B4D: 0x5A25,
                0x9B4E: 0x5A1F,
                0x9B4F: 0x5A11,
                0x9B50: 0x5A1C,
                0x9B51: 0x5A09,
                0x9B52: 0x5A1A,
                0x9B53: 0x5A40,
                0x9B54: 0x5A6C,
                0x9B55: 0x5A49,
                0x9B56: 0x5A35,
                0x9B57: 0x5A36,
                0x9B58: 0x5A62,
                0x9B59: 0x5A6A,
                0x9B5A: 0x5A9A,
                0x9B5B: 0x5ABC,
                0x9B5C: 0x5ABE,
                0x9B5D: 0x5ACB,
                0x9B5E: 0x5AC2,
                0x9B5F: 0x5ABD,
                0x9B60: 0x5AE3,
                0x9B61: 0x5AD7,
                0x9B62: 0x5AE6,
                0x9B63: 0x5AE9,
                0x9B64: 0x5AD6,
                0x9B65: 0x5AFA,
                0x9B66: 0x5AFB,
                0x9B67: 0x5B0C,
                0x9B68: 0x5B0B,
                0x9B69: 0x5B16,
                0x9B6A: 0x5B32,
                0x9B6B: 0x5AD0,
                0x9B6C: 0x5B2A,
                0x9B6D: 0x5B36,
                0x9B6E: 0x5B3E,
                0x9B6F: 0x5B43,
                0x9B70: 0x5B45,
                0x9B71: 0x5B40,
                0x9B72: 0x5B51,
                0x9B73: 0x5B55,
                0x9B74: 0x5B5A,
                0x9B75: 0x5B5B,
                0x9B76: 0x5B65,
                0x9B77: 0x5B69,
                0x9B78: 0x5B70,
                0x9B79: 0x5B73,
                0x9B7A: 0x5B75,
                0x9B7B: 0x5B78,
                0x9B7C: 0x6588,
                0x9B7D: 0x5B7A,
                0x9B7E: 0x5B80,
                0x9B80: 0x5B83,
                0x9B81: 0x5BA6,
                0x9B82: 0x5BB8,
                0x9B83: 0x5BC3,
                0x9B84: 0x5BC7,
                0x9B85: 0x5BC9,
                0x9B86: 0x5BD4,
                0x9B87: 0x5BD0,
                0x9B88: 0x5BE4,
                0x9B89: 0x5BE6,
                0x9B8A: 0x5BE2,
                0x9B8B: 0x5BDE,
                0x9B8C: 0x5BE5,
                0x9B8D: 0x5BEB,
                0x9B8E: 0x5BF0,
                0x9B8F: 0x5BF6,
                0x9B90: 0x5BF3,
                0x9B91: 0x5C05,
                0x9B92: 0x5C07,
                0x9B93: 0x5C08,
                0x9B94: 0x5C0D,
                0x9B95: 0x5C13,
                0x9B96: 0x5C20,
                0x9B97: 0x5C22,
                0x9B98: 0x5C28,
                0x9B99: 0x5C38,
                0x9B9A: 0x5C39,
                0x9B9B: 0x5C41,
                0x9B9C: 0x5C46,
                0x9B9D: 0x5C4E,
                0x9B9E: 0x5C53,
                0x9B9F: 0x5C50,
                0x9BA0: 0x5C4F,
                0x9BA1: 0x5B71,
                0x9BA2: 0x5C6C,
                0x9BA3: 0x5C6E,
                0x9BA4: 0x4E62,
                0x9BA5: 0x5C76,
                0x9BA6: 0x5C79,
                0x9BA7: 0x5C8C,
                0x9BA8: 0x5C91,
                0x9BA9: 0x5C94,
                0x9BAA: 0x599B,
                0x9BAB: 0x5CAB,
                0x9BAC: 0x5CBB,
                0x9BAD: 0x5CB6,
                0x9BAE: 0x5CBC,
                0x9BAF: 0x5CB7,
                0x9BB0: 0x5CC5,
                0x9BB1: 0x5CBE,
                0x9BB2: 0x5CC7,
                0x9BB3: 0x5CD9,
                0x9BB4: 0x5CE9,
                0x9BB5: 0x5CFD,
                0x9BB6: 0x5CFA,
                0x9BB7: 0x5CED,
                0x9BB8: 0x5D8C,
                0x9BB9: 0x5CEA,
                0x9BBA: 0x5D0B,
                0x9BBB: 0x5D15,
                0x9BBC: 0x5D17,
                0x9BBD: 0x5D5C,
                0x9BBE: 0x5D1F,
                0x9BBF: 0x5D1B,
                0x9BC0: 0x5D11,
                0x9BC1: 0x5D14,
                0x9BC2: 0x5D22,
                0x9BC3: 0x5D1A,
                0x9BC4: 0x5D19,
                0x9BC5: 0x5D18,
                0x9BC6: 0x5D4C,
                0x9BC7: 0x5D52,
                0x9BC8: 0x5D4E,
                0x9BC9: 0x5D4B,
                0x9BCA: 0x5D6C,
                0x9BCB: 0x5D73,
                0x9BCC: 0x5D76,
                0x9BCD: 0x5D87,
                0x9BCE: 0x5D84,
                0x9BCF: 0x5D82,
                0x9BD0: 0x5DA2,
                0x9BD1: 0x5D9D,
                0x9BD2: 0x5DAC,
                0x9BD3: 0x5DAE,
                0x9BD4: 0x5DBD,
                0x9BD5: 0x5D90,
                0x9BD6: 0x5DB7,
                0x9BD7: 0x5DBC,
                0x9BD8: 0x5DC9,
                0x9BD9: 0x5DCD,
                0x9BDA: 0x5DD3,
                0x9BDB: 0x5DD2,
                0x9BDC: 0x5DD6,
                0x9BDD: 0x5DDB,
                0x9BDE: 0x5DEB,
                0x9BDF: 0x5DF2,
                0x9BE0: 0x5DF5,
                0x9BE1: 0x5E0B,
                0x9BE2: 0x5E1A,
                0x9BE3: 0x5E19,
                0x9BE4: 0x5E11,
                0x9BE5: 0x5E1B,
                0x9BE6: 0x5E36,
                0x9BE7: 0x5E37,
                0x9BE8: 0x5E44,
                0x9BE9: 0x5E43,
                0x9BEA: 0x5E40,
                0x9BEB: 0x5E4E,
                0x9BEC: 0x5E57,
                0x9BED: 0x5E54,
                0x9BEE: 0x5E5F,
                0x9BEF: 0x5E62,
                0x9BF0: 0x5E64,
                0x9BF1: 0x5E47,
                0x9BF2: 0x5E75,
                0x9BF3: 0x5E76,
                0x9BF4: 0x5E7A,
                0x9BF5: 0x9EBC,
                0x9BF6: 0x5E7F,
                0x9BF7: 0x5EA0,
                0x9BF8: 0x5EC1,
                0x9BF9: 0x5EC2,
                0x9BFA: 0x5EC8,
                0x9BFB: 0x5ED0,
                0x9BFC: 0x5ECF,
                0x9C40: 0x5ED6,
                0x9C41: 0x5EE3,
                0x9C42: 0x5EDD,
                0x9C43: 0x5EDA,
                0x9C44: 0x5EDB,
                0x9C45: 0x5EE2,
                0x9C46: 0x5EE1,
                0x9C47: 0x5EE8,
                0x9C48: 0x5EE9,
                0x9C49: 0x5EEC,
                0x9C4A: 0x5EF1,
                0x9C4B: 0x5EF3,
                0x9C4C: 0x5EF0,
                0x9C4D: 0x5EF4,
                0x9C4E: 0x5EF8,
                0x9C4F: 0x5EFE,
                0x9C50: 0x5F03,
                0x9C51: 0x5F09,
                0x9C52: 0x5F5D,
                0x9C53: 0x5F5C,
                0x9C54: 0x5F0B,
                0x9C55: 0x5F11,
                0x9C56: 0x5F16,
                0x9C57: 0x5F29,
                0x9C58: 0x5F2D,
                0x9C59: 0x5F38,
                0x9C5A: 0x5F41,
                0x9C5B: 0x5F48,
                0x9C5C: 0x5F4C,
                0x9C5D: 0x5F4E,
                0x9C5E: 0x5F2F,
                0x9C5F: 0x5F51,
                0x9C60: 0x5F56,
                0x9C61: 0x5F57,
                0x9C62: 0x5F59,
                0x9C63: 0x5F61,
                0x9C64: 0x5F6D,
                0x9C65: 0x5F73,
                0x9C66: 0x5F77,
                0x9C67: 0x5F83,
                0x9C68: 0x5F82,
                0x9C69: 0x5F7F,
                0x9C6A: 0x5F8A,
                0x9C6B: 0x5F88,
                0x9C6C: 0x5F91,
                0x9C6D: 0x5F87,
                0x9C6E: 0x5F9E,
                0x9C6F: 0x5F99,
                0x9C70: 0x5F98,
                0x9C71: 0x5FA0,
                0x9C72: 0x5FA8,
                0x9C73: 0x5FAD,
                0x9C74: 0x5FBC,
                0x9C75: 0x5FD6,
                0x9C76: 0x5FFB,
                0x9C77: 0x5FE4,
                0x9C78: 0x5FF8,
                0x9C79: 0x5FF1,
                0x9C7A: 0x5FDD,
                0x9C7B: 0x60B3,
                0x9C7C: 0x5FFF,
                0x9C7D: 0x6021,
                0x9C7E: 0x6060,
                0x9C80: 0x6019,
                0x9C81: 0x6010,
                0x9C82: 0x6029,
                0x9C83: 0x600E,
                0x9C84: 0x6031,
                0x9C85: 0x601B,
                0x9C86: 0x6015,
                0x9C87: 0x602B,
                0x9C88: 0x6026,
                0x9C89: 0x600F,
                0x9C8A: 0x603A,
                0x9C8B: 0x605A,
                0x9C8C: 0x6041,
                0x9C8D: 0x606A,
                0x9C8E: 0x6077,
                0x9C8F: 0x605F,
                0x9C90: 0x604A,
                0x9C91: 0x6046,
                0x9C92: 0x604D,
                0x9C93: 0x6063,
                0x9C94: 0x6043,
                0x9C95: 0x6064,
                0x9C96: 0x6042,
                0x9C97: 0x606C,
                0x9C98: 0x606B,
                0x9C99: 0x6059,
                0x9C9A: 0x6081,
                0x9C9B: 0x608D,
                0x9C9C: 0x60E7,
                0x9C9D: 0x6083,
                0x9C9E: 0x609A,
                0x9C9F: 0x6084,
                0x9CA0: 0x609B,
                0x9CA1: 0x6096,
                0x9CA2: 0x6097,
                0x9CA3: 0x6092,
                0x9CA4: 0x60A7,
                0x9CA5: 0x608B,
                0x9CA6: 0x60E1,
                0x9CA7: 0x60B8,
                0x9CA8: 0x60E0,
                0x9CA9: 0x60D3,
                0x9CAA: 0x60B4,
                0x9CAB: 0x5FF0,
                0x9CAC: 0x60BD,
                0x9CAD: 0x60C6,
                0x9CAE: 0x60B5,
                0x9CAF: 0x60D8,
                0x9CB0: 0x614D,
                0x9CB1: 0x6115,
                0x9CB2: 0x6106,
                0x9CB3: 0x60F6,
                0x9CB4: 0x60F7,
                0x9CB5: 0x6100,
                0x9CB6: 0x60F4,
                0x9CB7: 0x60FA,
                0x9CB8: 0x6103,
                0x9CB9: 0x6121,
                0x9CBA: 0x60FB,
                0x9CBB: 0x60F1,
                0x9CBC: 0x610D,
                0x9CBD: 0x610E,
                0x9CBE: 0x6147,
                0x9CBF: 0x613E,
                0x9CC0: 0x6128,
                0x9CC1: 0x6127,
                0x9CC2: 0x614A,
                0x9CC3: 0x613F,
                0x9CC4: 0x613C,
                0x9CC5: 0x612C,
                0x9CC6: 0x6134,
                0x9CC7: 0x613D,
                0x9CC8: 0x6142,
                0x9CC9: 0x6144,
                0x9CCA: 0x6173,
                0x9CCB: 0x6177,
                0x9CCC: 0x6158,
                0x9CCD: 0x6159,
                0x9CCE: 0x615A,
                0x9CCF: 0x616B,
                0x9CD0: 0x6174,
                0x9CD1: 0x616F,
                0x9CD2: 0x6165,
                0x9CD3: 0x6171,
                0x9CD4: 0x615F,
                0x9CD5: 0x615D,
                0x9CD6: 0x6153,
                0x9CD7: 0x6175,
                0x9CD8: 0x6199,
                0x9CD9: 0x6196,
                0x9CDA: 0x6187,
                0x9CDB: 0x61AC,
                0x9CDC: 0x6194,
                0x9CDD: 0x619A,
                0x9CDE: 0x618A,
                0x9CDF: 0x6191,
                0x9CE0: 0x61AB,
                0x9CE1: 0x61AE,
                0x9CE2: 0x61CC,
                0x9CE3: 0x61CA,
                0x9CE4: 0x61C9,
                0x9CE5: 0x61F7,
                0x9CE6: 0x61C8,
                0x9CE7: 0x61C3,
                0x9CE8: 0x61C6,
                0x9CE9: 0x61BA,
                0x9CEA: 0x61CB,
                0x9CEB: 0x7F79,
                0x9CEC: 0x61CD,
                0x9CED: 0x61E6,
                0x9CEE: 0x61E3,
                0x9CEF: 0x61F6,
                0x9CF0: 0x61FA,
                0x9CF1: 0x61F4,
                0x9CF2: 0x61FF,
                0x9CF3: 0x61FD,
                0x9CF4: 0x61FC,
                0x9CF5: 0x61FE,
                0x9CF6: 0x6200,
                0x9CF7: 0x6208,
                0x9CF8: 0x6209,
                0x9CF9: 0x620D,
                0x9CFA: 0x620C,
                0x9CFB: 0x6214,
                0x9CFC: 0x621B,
                0x9D40: 0x621E,
                0x9D41: 0x6221,
                0x9D42: 0x622A,
                0x9D43: 0x622E,
                0x9D44: 0x6230,
                0x9D45: 0x6232,
                0x9D46: 0x6233,
                0x9D47: 0x6241,
                0x9D48: 0x624E,
                0x9D49: 0x625E,
                0x9D4A: 0x6263,
                0x9D4B: 0x625B,
                0x9D4C: 0x6260,
                0x9D4D: 0x6268,
                0x9D4E: 0x627C,
                0x9D4F: 0x6282,
                0x9D50: 0x6289,
                0x9D51: 0x627E,
                0x9D52: 0x6292,
                0x9D53: 0x6293,
                0x9D54: 0x6296,
                0x9D55: 0x62D4,
                0x9D56: 0x6283,
                0x9D57: 0x6294,
                0x9D58: 0x62D7,
                0x9D59: 0x62D1,
                0x9D5A: 0x62BB,
                0x9D5B: 0x62CF,
                0x9D5C: 0x62FF,
                0x9D5D: 0x62C6,
                0x9D5E: 0x64D4,
                0x9D5F: 0x62C8,
                0x9D60: 0x62DC,
                0x9D61: 0x62CC,
                0x9D62: 0x62CA,
                0x9D63: 0x62C2,
                0x9D64: 0x62C7,
                0x9D65: 0x629B,
                0x9D66: 0x62C9,
                0x9D67: 0x630C,
                0x9D68: 0x62EE,
                0x9D69: 0x62F1,
                0x9D6A: 0x6327,
                0x9D6B: 0x6302,
                0x9D6C: 0x6308,
                0x9D6D: 0x62EF,
                0x9D6E: 0x62F5,
                0x9D6F: 0x6350,
                0x9D70: 0x633E,
                0x9D71: 0x634D,
                0x9D72: 0x641C,
                0x9D73: 0x634F,
                0x9D74: 0x6396,
                0x9D75: 0x638E,
                0x9D76: 0x6380,
                0x9D77: 0x63AB,
                0x9D78: 0x6376,
                0x9D79: 0x63A3,
                0x9D7A: 0x638F,
                0x9D7B: 0x6389,
                0x9D7C: 0x639F,
                0x9D7D: 0x63B5,
                0x9D7E: 0x636B,
                0x9D80: 0x6369,
                0x9D81: 0x63BE,
                0x9D82: 0x63E9,
                0x9D83: 0x63C0,
                0x9D84: 0x63C6,
                0x9D85: 0x63E3,
                0x9D86: 0x63C9,
                0x9D87: 0x63D2,
                0x9D88: 0x63F6,
                0x9D89: 0x63C4,
                0x9D8A: 0x6416,
                0x9D8B: 0x6434,
                0x9D8C: 0x6406,
                0x9D8D: 0x6413,
                0x9D8E: 0x6426,
                0x9D8F: 0x6436,
                0x9D90: 0x651D,
                0x9D91: 0x6417,
                0x9D92: 0x6428,
                0x9D93: 0x640F,
                0x9D94: 0x6467,
                0x9D95: 0x646F,
                0x9D96: 0x6476,
                0x9D97: 0x644E,
                0x9D98: 0x652A,
                0x9D99: 0x6495,
                0x9D9A: 0x6493,
                0x9D9B: 0x64A5,
                0x9D9C: 0x64A9,
                0x9D9D: 0x6488,
                0x9D9E: 0x64BC,
                0x9D9F: 0x64DA,
                0x9DA0: 0x64D2,
                0x9DA1: 0x64C5,
                0x9DA2: 0x64C7,
                0x9DA3: 0x64BB,
                0x9DA4: 0x64D8,
                0x9DA5: 0x64C2,
                0x9DA6: 0x64F1,
                0x9DA7: 0x64E7,
                0x9DA8: 0x8209,
                0x9DA9: 0x64E0,
                0x9DAA: 0x64E1,
                0x9DAB: 0x62AC,
                0x9DAC: 0x64E3,
                0x9DAD: 0x64EF,
                0x9DAE: 0x652C,
                0x9DAF: 0x64F6,
                0x9DB0: 0x64F4,
                0x9DB1: 0x64F2,
                0x9DB2: 0x64FA,
                0x9DB3: 0x6500,
                0x9DB4: 0x64FD,
                0x9DB5: 0x6518,
                0x9DB6: 0x651C,
                0x9DB7: 0x6505,
                0x9DB8: 0x6524,
                0x9DB9: 0x6523,
                0x9DBA: 0x652B,
                0x9DBB: 0x6534,
                0x9DBC: 0x6535,
                0x9DBD: 0x6537,
                0x9DBE: 0x6536,
                0x9DBF: 0x6538,
                0x9DC0: 0x754B,
                0x9DC1: 0x6548,
                0x9DC2: 0x6556,
                0x9DC3: 0x6555,
                0x9DC4: 0x654D,
                0x9DC5: 0x6558,
                0x9DC6: 0x655E,
                0x9DC7: 0x655D,
                0x9DC8: 0x6572,
                0x9DC9: 0x6578,
                0x9DCA: 0x6582,
                0x9DCB: 0x6583,
                0x9DCC: 0x8B8A,
                0x9DCD: 0x659B,
                0x9DCE: 0x659F,
                0x9DCF: 0x65AB,
                0x9DD0: 0x65B7,
                0x9DD1: 0x65C3,
                0x9DD2: 0x65C6,
                0x9DD3: 0x65C1,
                0x9DD4: 0x65C4,
                0x9DD5: 0x65CC,
                0x9DD6: 0x65D2,
                0x9DD7: 0x65DB,
                0x9DD8: 0x65D9,
                0x9DD9: 0x65E0,
                0x9DDA: 0x65E1,
                0x9DDB: 0x65F1,
                0x9DDC: 0x6772,
                0x9DDD: 0x660A,
                0x9DDE: 0x6603,
                0x9DDF: 0x65FB,
                0x9DE0: 0x6773,
                0x9DE1: 0x6635,
                0x9DE2: 0x6636,
                0x9DE3: 0x6634,
                0x9DE4: 0x661C,
                0x9DE5: 0x664F,
                0x9DE6: 0x6644,
                0x9DE7: 0x6649,
                0x9DE8: 0x6641,
                0x9DE9: 0x665E,
                0x9DEA: 0x665D,
                0x9DEB: 0x6664,
                0x9DEC: 0x6667,
                0x9DED: 0x6668,
                0x9DEE: 0x665F,
                0x9DEF: 0x6662,
                0x9DF0: 0x6670,
                0x9DF1: 0x6683,
                0x9DF2: 0x6688,
                0x9DF3: 0x668E,
                0x9DF4: 0x6689,
                0x9DF5: 0x6684,
                0x9DF6: 0x6698,
                0x9DF7: 0x669D,
                0x9DF8: 0x66C1,
                0x9DF9: 0x66B9,
                0x9DFA: 0x66C9,
                0x9DFB: 0x66BE,
                0x9DFC: 0x66BC,
                0x9E40: 0x66C4,
                0x9E41: 0x66B8,
                0x9E42: 0x66D6,
                0x9E43: 0x66DA,
                0x9E44: 0x66E0,
                0x9E45: 0x663F,
                0x9E46: 0x66E6,
                0x9E47: 0x66E9,
                0x9E48: 0x66F0,
                0x9E49: 0x66F5,
                0x9E4A: 0x66F7,
                0x9E4B: 0x670F,
                0x9E4C: 0x6716,
                0x9E4D: 0x671E,
                0x9E4E: 0x6726,
                0x9E4F: 0x6727,
                0x9E50: 0x9738,
                0x9E51: 0x672E,
                0x9E52: 0x673F,
                0x9E53: 0x6736,
                0x9E54: 0x6741,
                0x9E55: 0x6738,
                0x9E56: 0x6737,
                0x9E57: 0x6746,
                0x9E58: 0x675E,
                0x9E59: 0x6760,
                0x9E5A: 0x6759,
                0x9E5B: 0x6763,
                0x9E5C: 0x6764,
                0x9E5D: 0x6789,
                0x9E5E: 0x6770,
                0x9E5F: 0x67A9,
                0x9E60: 0x677C,
                0x9E61: 0x676A,
                0x9E62: 0x678C,
                0x9E63: 0x678B,
                0x9E64: 0x67A6,
                0x9E65: 0x67A1,
                0x9E66: 0x6785,
                0x9E67: 0x67B7,
                0x9E68: 0x67EF,
                0x9E69: 0x67B4,
                0x9E6A: 0x67EC,
                0x9E6B: 0x67B3,
                0x9E6C: 0x67E9,
                0x9E6D: 0x67B8,
                0x9E6E: 0x67E4,
                0x9E6F: 0x67DE,
                0x9E70: 0x67DD,
                0x9E71: 0x67E2,
                0x9E72: 0x67EE,
                0x9E73: 0x67B9,
                0x9E74: 0x67CE,
                0x9E75: 0x67C6,
                0x9E76: 0x67E7,
                0x9E77: 0x6A9C,
                0x9E78: 0x681E,
                0x9E79: 0x6846,
                0x9E7A: 0x6829,
                0x9E7B: 0x6840,
                0x9E7C: 0x684D,
                0x9E7D: 0x6832,
                0x9E7E: 0x684E,
                0x9E80: 0x68B3,
                0x9E81: 0x682B,
                0x9E82: 0x6859,
                0x9E83: 0x6863,
                0x9E84: 0x6877,
                0x9E85: 0x687F,
                0x9E86: 0x689F,
                0x9E87: 0x688F,
                0x9E88: 0x68AD,
                0x9E89: 0x6894,
                0x9E8A: 0x689D,
                0x9E8B: 0x689B,
                0x9E8C: 0x6883,
                0x9E8D: 0x6AAE,
                0x9E8E: 0x68B9,
                0x9E8F: 0x6874,
                0x9E90: 0x68B5,
                0x9E91: 0x68A0,
                0x9E92: 0x68BA,
                0x9E93: 0x690F,
                0x9E94: 0x688D,
                0x9E95: 0x687E,
                0x9E96: 0x6901,
                0x9E97: 0x68CA,
                0x9E98: 0x6908,
                0x9E99: 0x68D8,
                0x9E9A: 0x6922,
                0x9E9B: 0x6926,
                0x9E9C: 0x68E1,
                0x9E9D: 0x690C,
                0x9E9E: 0x68CD,
                0x9E9F: 0x68D4,
                0x9EA0: 0x68E7,
                0x9EA1: 0x68D5,
                0x9EA2: 0x6936,
                0x9EA3: 0x6912,
                0x9EA4: 0x6904,
                0x9EA5: 0x68D7,
                0x9EA6: 0x68E3,
                0x9EA7: 0x6925,
                0x9EA8: 0x68F9,
                0x9EA9: 0x68E0,
                0x9EAA: 0x68EF,
                0x9EAB: 0x6928,
                0x9EAC: 0x692A,
                0x9EAD: 0x691A,
                0x9EAE: 0x6923,
                0x9EAF: 0x6921,
                0x9EB0: 0x68C6,
                0x9EB1: 0x6979,
                0x9EB2: 0x6977,
                0x9EB3: 0x695C,
                0x9EB4: 0x6978,
                0x9EB5: 0x696B,
                0x9EB6: 0x6954,
                0x9EB7: 0x697E,
                0x9EB8: 0x696E,
                0x9EB9: 0x6939,
                0x9EBA: 0x6974,
                0x9EBB: 0x693D,
                0x9EBC: 0x6959,
                0x9EBD: 0x6930,
                0x9EBE: 0x6961,
                0x9EBF: 0x695E,
                0x9EC0: 0x695D,
                0x9EC1: 0x6981,
                0x9EC2: 0x696A,
                0x9EC3: 0x69B2,
                0x9EC4: 0x69AE,
                0x9EC5: 0x69D0,
                0x9EC6: 0x69BF,
                0x9EC7: 0x69C1,
                0x9EC8: 0x69D3,
                0x9EC9: 0x69BE,
                0x9ECA: 0x69CE,
                0x9ECB: 0x5BE8,
                0x9ECC: 0x69CA,
                0x9ECD: 0x69DD,
                0x9ECE: 0x69BB,
                0x9ECF: 0x69C3,
                0x9ED0: 0x69A7,
                0x9ED1: 0x6A2E,
                0x9ED2: 0x6991,
                0x9ED3: 0x69A0,
                0x9ED4: 0x699C,
                0x9ED5: 0x6995,
                0x9ED6: 0x69B4,
                0x9ED7: 0x69DE,
                0x9ED8: 0x69E8,
                0x9ED9: 0x6A02,
                0x9EDA: 0x6A1B,
                0x9EDB: 0x69FF,
                0x9EDC: 0x6B0A,
                0x9EDD: 0x69F9,
                0x9EDE: 0x69F2,
                0x9EDF: 0x69E7,
                0x9EE0: 0x6A05,
                0x9EE1: 0x69B1,
                0x9EE2: 0x6A1E,
                0x9EE3: 0x69ED,
                0x9EE4: 0x6A14,
                0x9EE5: 0x69EB,
                0x9EE6: 0x6A0A,
                0x9EE7: 0x6A12,
                0x9EE8: 0x6AC1,
                0x9EE9: 0x6A23,
                0x9EEA: 0x6A13,
                0x9EEB: 0x6A44,
                0x9EEC: 0x6A0C,
                0x9EED: 0x6A72,
                0x9EEE: 0x6A36,
                0x9EEF: 0x6A78,
                0x9EF0: 0x6A47,
                0x9EF1: 0x6A62,
                0x9EF2: 0x6A59,
                0x9EF3: 0x6A66,
                0x9EF4: 0x6A48,
                0x9EF5: 0x6A38,
                0x9EF6: 0x6A22,
                0x9EF7: 0x6A90,
                0x9EF8: 0x6A8D,
                0x9EF9: 0x6AA0,
                0x9EFA: 0x6A84,
                0x9EFB: 0x6AA2,
                0x9EFC: 0x6AA3,
                0x9F40: 0x6A97,
                0x9F41: 0x8617,
                0x9F42: 0x6ABB,
                0x9F43: 0x6AC3,
                0x9F44: 0x6AC2,
                0x9F45: 0x6AB8,
                0x9F46: 0x6AB3,
                0x9F47: 0x6AAC,
                0x9F48: 0x6ADE,
                0x9F49: 0x6AD1,
                0x9F4A: 0x6ADF,
                0x9F4B: 0x6AAA,
                0x9F4C: 0x6ADA,
                0x9F4D: 0x6AEA,
                0x9F4E: 0x6AFB,
                0x9F4F: 0x6B05,
                0x9F50: 0x8616,
                0x9F51: 0x6AFA,
                0x9F52: 0x6B12,
                0x9F53: 0x6B16,
                0x9F54: 0x9B31,
                0x9F55: 0x6B1F,
                0x9F56: 0x6B38,
                0x9F57: 0x6B37,
                0x9F58: 0x76DC,
                0x9F59: 0x6B39,
                0x9F5A: 0x98EE,
                0x9F5B: 0x6B47,
                0x9F5C: 0x6B43,
                0x9F5D: 0x6B49,
                0x9F5E: 0x6B50,
                0x9F5F: 0x6B59,
                0x9F60: 0x6B54,
                0x9F61: 0x6B5B,
                0x9F62: 0x6B5F,
                0x9F63: 0x6B61,
                0x9F64: 0x6B78,
                0x9F65: 0x6B79,
                0x9F66: 0x6B7F,
                0x9F67: 0x6B80,
                0x9F68: 0x6B84,
                0x9F69: 0x6B83,
                0x9F6A: 0x6B8D,
                0x9F6B: 0x6B98,
                0x9F6C: 0x6B95,
                0x9F6D: 0x6B9E,
                0x9F6E: 0x6BA4,
                0x9F6F: 0x6BAA,
                0x9F70: 0x6BAB,
                0x9F71: 0x6BAF,
                0x9F72: 0x6BB2,
                0x9F73: 0x6BB1,
                0x9F74: 0x6BB3,
                0x9F75: 0x6BB7,
                0x9F76: 0x6BBC,
                0x9F77: 0x6BC6,
                0x9F78: 0x6BCB,
                0x9F79: 0x6BD3,
                0x9F7A: 0x6BDF,
                0x9F7B: 0x6BEC,
                0x9F7C: 0x6BEB,
                0x9F7D: 0x6BF3,
                0x9F7E: 0x6BEF,
                0x9F80: 0x9EBE,
                0x9F81: 0x6C08,
                0x9F82: 0x6C13,
                0x9F83: 0x6C14,
                0x9F84: 0x6C1B,
                0x9F85: 0x6C24,
                0x9F86: 0x6C23,
                0x9F87: 0x6C5E,
                0x9F88: 0x6C55,
                0x9F89: 0x6C62,
                0x9F8A: 0x6C6A,
                0x9F8B: 0x6C82,
                0x9F8C: 0x6C8D,
                0x9F8D: 0x6C9A,
                0x9F8E: 0x6C81,
                0x9F8F: 0x6C9B,
                0x9F90: 0x6C7E,
                0x9F91: 0x6C68,
                0x9F92: 0x6C73,
                0x9F93: 0x6C92,
                0x9F94: 0x6C90,
                0x9F95: 0x6CC4,
                0x9F96: 0x6CF1,
                0x9F97: 0x6CD3,
                0x9F98: 0x6CBD,
                0x9F99: 0x6CD7,
                0x9F9A: 0x6CC5,
                0x9F9B: 0x6CDD,
                0x9F9C: 0x6CAE,
                0x9F9D: 0x6CB1,
                0x9F9E: 0x6CBE,
                0x9F9F: 0x6CBA,
                0x9FA0: 0x6CDB,
                0x9FA1: 0x6CEF,
                0x9FA2: 0x6CD9,
                0x9FA3: 0x6CEA,
                0x9FA4: 0x6D1F,
                0x9FA5: 0x884D,
                0x9FA6: 0x6D36,
                0x9FA7: 0x6D2B,
                0x9FA8: 0x6D3D,
                0x9FA9: 0x6D38,
                0x9FAA: 0x6D19,
                0x9FAB: 0x6D35,
                0x9FAC: 0x6D33,
                0x9FAD: 0x6D12,
                0x9FAE: 0x6D0C,
                0x9FAF: 0x6D63,
                0x9FB0: 0x6D93,
                0x9FB1: 0x6D64,
                0x9FB2: 0x6D5A,
                0x9FB3: 0x6D79,
                0x9FB4: 0x6D59,
                0x9FB5: 0x6D8E,
                0x9FB6: 0x6D95,
                0x9FB7: 0x6FE4,
                0x9FB8: 0x6D85,
                0x9FB9: 0x6DF9,
                0x9FBA: 0x6E15,
                0x9FBB: 0x6E0A,
                0x9FBC: 0x6DB5,
                0x9FBD: 0x6DC7,
                0x9FBE: 0x6DE6,
                0x9FBF: 0x6DB8,
                0x9FC0: 0x6DC6,
                0x9FC1: 0x6DEC,
                0x9FC2: 0x6DDE,
                0x9FC3: 0x6DCC,
                0x9FC4: 0x6DE8,
                0x9FC5: 0x6DD2,
                0x9FC6: 0x6DC5,
                0x9FC7: 0x6DFA,
                0x9FC8: 0x6DD9,
                0x9FC9: 0x6DE4,
                0x9FCA: 0x6DD5,
                0x9FCB: 0x6DEA,
                0x9FCC: 0x6DEE,
                0x9FCD: 0x6E2D,
                0x9FCE: 0x6E6E,
                0x9FCF: 0x6E2E,
                0x9FD0: 0x6E19,
                0x9FD1: 0x6E72,
                0x9FD2: 0x6E5F,
                0x9FD3: 0x6E3E,
                0x9FD4: 0x6E23,
                0x9FD5: 0x6E6B,
                0x9FD6: 0x6E2B,
                0x9FD7: 0x6E76,
                0x9FD8: 0x6E4D,
                0x9FD9: 0x6E1F,
                0x9FDA: 0x6E43,
                0x9FDB: 0x6E3A,
                0x9FDC: 0x6E4E,
                0x9FDD: 0x6E24,
                0x9FDE: 0x6EFF,
                0x9FDF: 0x6E1D,
                0x9FE0: 0x6E38,
                0x9FE1: 0x6E82,
                0x9FE2: 0x6EAA,
                0x9FE3: 0x6E98,
                0x9FE4: 0x6EC9,
                0x9FE5: 0x6EB7,
                0x9FE6: 0x6ED3,
                0x9FE7: 0x6EBD,
                0x9FE8: 0x6EAF,
                0x9FE9: 0x6EC4,
                0x9FEA: 0x6EB2,
                0x9FEB: 0x6ED4,
                0x9FEC: 0x6ED5,
                0x9FED: 0x6E8F,
                0x9FEE: 0x6EA5,
                0x9FEF: 0x6EC2,
                0x9FF0: 0x6E9F,
                0x9FF1: 0x6F41,
                0x9FF2: 0x6F11,
                0x9FF3: 0x704C,
                0x9FF4: 0x6EEC,
                0x9FF5: 0x6EF8,
                0x9FF6: 0x6EFE,
                0x9FF7: 0x6F3F,
                0x9FF8: 0x6EF2,
                0x9FF9: 0x6F31,
                0x9FFA: 0x6EEF,
                0x9FFB: 0x6F32,
                0x9FFC: 0x6ECC,
                0xA1: 0xFF61,
                0xA2: 0xFF62,
                0xA3: 0xFF63,
                0xA4: 0xFF64,
                0xA5: 0xFF65,
                0xA6: 0xFF66,
                0xA7: 0xFF67,
                0xA8: 0xFF68,
                0xA9: 0xFF69,
                0xAA: 0xFF6A,
                0xAB: 0xFF6B,
                0xAC: 0xFF6C,
                0xAD: 0xFF6D,
                0xAE: 0xFF6E,
                0xAF: 0xFF6F,
                0xB0: 0xFF70,
                0xB1: 0xFF71,
                0xB2: 0xFF72,
                0xB3: 0xFF73,
                0xB4: 0xFF74,
                0xB5: 0xFF75,
                0xB6: 0xFF76,
                0xB7: 0xFF77,
                0xB8: 0xFF78,
                0xB9: 0xFF79,
                0xBA: 0xFF7A,
                0xBB: 0xFF7B,
                0xBC: 0xFF7C,
                0xBD: 0xFF7D,
                0xBE: 0xFF7E,
                0xBF: 0xFF7F,
                0xC0: 0xFF80,
                0xC1: 0xFF81,
                0xC2: 0xFF82,
                0xC3: 0xFF83,
                0xC4: 0xFF84,
                0xC5: 0xFF85,
                0xC6: 0xFF86,
                0xC7: 0xFF87,
                0xC8: 0xFF88,
                0xC9: 0xFF89,
                0xCA: 0xFF8A,
                0xCB: 0xFF8B,
                0xCC: 0xFF8C,
                0xCD: 0xFF8D,
                0xCE: 0xFF8E,
                0xCF: 0xFF8F,
                0xD0: 0xFF90,
                0xD1: 0xFF91,
                0xD2: 0xFF92,
                0xD3: 0xFF93,
                0xD4: 0xFF94,
                0xD5: 0xFF95,
                0xD6: 0xFF96,
                0xD7: 0xFF97,
                0xD8: 0xFF98,
                0xD9: 0xFF99,
                0xDA: 0xFF9A,
                0xDB: 0xFF9B,
                0xDC: 0xFF9C,
                0xDD: 0xFF9D,
                0xDE: 0xFF9E,
                0xDF: 0xFF9F,
                0xE040: 0x6F3E,
                0xE041: 0x6F13,
                0xE042: 0x6EF7,
                0xE043: 0x6F86,
                0xE044: 0x6F7A,
                0xE045: 0x6F78,
                0xE046: 0x6F81,
                0xE047: 0x6F80,
                0xE048: 0x6F6F,
                0xE049: 0x6F5B,
                0xE04A: 0x6FF3,
                0xE04B: 0x6F6D,
                0xE04C: 0x6F82,
                0xE04D: 0x6F7C,
                0xE04E: 0x6F58,
                0xE04F: 0x6F8E,
                0xE050: 0x6F91,
                0xE051: 0x6FC2,
                0xE052: 0x6F66,
                0xE053: 0x6FB3,
                0xE054: 0x6FA3,
                0xE055: 0x6FA1,
                0xE056: 0x6FA4,
                0xE057: 0x6FB9,
                0xE058: 0x6FC6,
                0xE059: 0x6FAA,
                0xE05A: 0x6FDF,
                0xE05B: 0x6FD5,
                0xE05C: 0x6FEC,
                0xE05D: 0x6FD4,
                0xE05E: 0x6FD8,
                0xE05F: 0x6FF1,
                0xE060: 0x6FEE,
                0xE061: 0x6FDB,
                0xE062: 0x7009,
                0xE063: 0x700B,
                0xE064: 0x6FFA,
                0xE065: 0x7011,
                0xE066: 0x7001,
                0xE067: 0x700F,
                0xE068: 0x6FFE,
                0xE069: 0x701B,
                0xE06A: 0x701A,
                0xE06B: 0x6F74,
                0xE06C: 0x701D,
                0xE06D: 0x7018,
                0xE06E: 0x701F,
                0xE06F: 0x7030,
                0xE070: 0x703E,
                0xE071: 0x7032,
                0xE072: 0x7051,
                0xE073: 0x7063,
                0xE074: 0x7099,
                0xE075: 0x7092,
                0xE076: 0x70AF,
                0xE077: 0x70F1,
                0xE078: 0x70AC,
                0xE079: 0x70B8,
                0xE07A: 0x70B3,
                0xE07B: 0x70AE,
                0xE07C: 0x70DF,
                0xE07D: 0x70CB,
                0xE07E: 0x70DD,
                0xE080: 0x70D9,
                0xE081: 0x7109,
                0xE082: 0x70FD,
                0xE083: 0x711C,
                0xE084: 0x7119,
                0xE085: 0x7165,
                0xE086: 0x7155,
                0xE087: 0x7188,
                0xE088: 0x7166,
                0xE089: 0x7162,
                0xE08A: 0x714C,
                0xE08B: 0x7156,
                0xE08C: 0x716C,
                0xE08D: 0x718F,
                0xE08E: 0x71FB,
                0xE08F: 0x7184,
                0xE090: 0x7195,
                0xE091: 0x71A8,
                0xE092: 0x71AC,
                0xE093: 0x71D7,
                0xE094: 0x71B9,
                0xE095: 0x71BE,
                0xE096: 0x71D2,
                0xE097: 0x71C9,
                0xE098: 0x71D4,
                0xE099: 0x71CE,
                0xE09A: 0x71E0,
                0xE09B: 0x71EC,
                0xE09C: 0x71E7,
                0xE09D: 0x71F5,
                0xE09E: 0x71FC,
                0xE09F: 0x71F9,
                0xE0A0: 0x71FF,
                0xE0A1: 0x720D,
                0xE0A2: 0x7210,
                0xE0A3: 0x721B,
                0xE0A4: 0x7228,
                0xE0A5: 0x722D,
                0xE0A6: 0x722C,
                0xE0A7: 0x7230,
                0xE0A8: 0x7232,
                0xE0A9: 0x723B,
                0xE0AA: 0x723C,
                0xE0AB: 0x723F,
                0xE0AC: 0x7240,
                0xE0AD: 0x7246,
                0xE0AE: 0x724B,
                0xE0AF: 0x7258,
                0xE0B0: 0x7274,
                0xE0B1: 0x727E,
                0xE0B2: 0x7282,
                0xE0B3: 0x7281,
                0xE0B4: 0x7287,
                0xE0B5: 0x7292,
                0xE0B6: 0x7296,
                0xE0B7: 0x72A2,
                0xE0B8: 0x72A7,
                0xE0B9: 0x72B9,
                0xE0BA: 0x72B2,
                0xE0BB: 0x72C3,
                0xE0BC: 0x72C6,
                0xE0BD: 0x72C4,
                0xE0BE: 0x72CE,
                0xE0BF: 0x72D2,
                0xE0C0: 0x72E2,
                0xE0C1: 0x72E0,
                0xE0C2: 0x72E1,
                0xE0C3: 0x72F9,
                0xE0C4: 0x72F7,
                0xE0C5: 0x500F,
                0xE0C6: 0x7317,
                0xE0C7: 0x730A,
                0xE0C8: 0x731C,
                0xE0C9: 0x7316,
                0xE0CA: 0x731D,
                0xE0CB: 0x7334,
                0xE0CC: 0x732F,
                0xE0CD: 0x7329,
                0xE0CE: 0x7325,
                0xE0CF: 0x733E,
                0xE0D0: 0x734E,
                0xE0D1: 0x734F,
                0xE0D2: 0x9ED8,
                0xE0D3: 0x7357,
                0xE0D4: 0x736A,
                0xE0D5: 0x7368,
                0xE0D6: 0x7370,
                0xE0D7: 0x7378,
                0xE0D8: 0x7375,
                0xE0D9: 0x737B,
                0xE0DA: 0x737A,
                0xE0DB: 0x73C8,
                0xE0DC: 0x73B3,
                0xE0DD: 0x73CE,
                0xE0DE: 0x73BB,
                0xE0DF: 0x73C0,
                0xE0E0: 0x73E5,
                0xE0E1: 0x73EE,
                0xE0E2: 0x73DE,
                0xE0E3: 0x74A2,
                0xE0E4: 0x7405,
                0xE0E5: 0x746F,
                0xE0E6: 0x7425,
                0xE0E7: 0x73F8,
                0xE0E8: 0x7432,
                0xE0E9: 0x743A,
                0xE0EA: 0x7455,
                0xE0EB: 0x743F,
                0xE0EC: 0x745F,
                0xE0ED: 0x7459,
                0xE0EE: 0x7441,
                0xE0EF: 0x745C,
                0xE0F0: 0x7469,
                0xE0F1: 0x7470,
                0xE0F2: 0x7463,
                0xE0F3: 0x746A,
                0xE0F4: 0x7476,
                0xE0F5: 0x747E,
                0xE0F6: 0x748B,
                0xE0F7: 0x749E,
                0xE0F8: 0x74A7,
                0xE0F9: 0x74CA,
                0xE0FA: 0x74CF,
                0xE0FB: 0x74D4,
                0xE0FC: 0x73F1,
                0xE140: 0x74E0,
                0xE141: 0x74E3,
                0xE142: 0x74E7,
                0xE143: 0x74E9,
                0xE144: 0x74EE,
                0xE145: 0x74F2,
                0xE146: 0x74F0,
                0xE147: 0x74F1,
                0xE148: 0x74F8,
                0xE149: 0x74F7,
                0xE14A: 0x7504,
                0xE14B: 0x7503,
                0xE14C: 0x7505,
                0xE14D: 0x750C,
                0xE14E: 0x750E,
                0xE14F: 0x750D,
                0xE150: 0x7515,
                0xE151: 0x7513,
                0xE152: 0x751E,
                0xE153: 0x7526,
                0xE154: 0x752C,
                0xE155: 0x753C,
                0xE156: 0x7544,
                0xE157: 0x754D,
                0xE158: 0x754A,
                0xE159: 0x7549,
                0xE15A: 0x755B,
                0xE15B: 0x7546,
                0xE15C: 0x755A,
                0xE15D: 0x7569,
                0xE15E: 0x7564,
                0xE15F: 0x7567,
                0xE160: 0x756B,
                0xE161: 0x756D,
                0xE162: 0x7578,
                0xE163: 0x7576,
                0xE164: 0x7586,
                0xE165: 0x7587,
                0xE166: 0x7574,
                0xE167: 0x758A,
                0xE168: 0x7589,
                0xE169: 0x7582,
                0xE16A: 0x7594,
                0xE16B: 0x759A,
                0xE16C: 0x759D,
                0xE16D: 0x75A5,
                0xE16E: 0x75A3,
                0xE16F: 0x75C2,
                0xE170: 0x75B3,
                0xE171: 0x75C3,
                0xE172: 0x75B5,
                0xE173: 0x75BD,
                0xE174: 0x75B8,
                0xE175: 0x75BC,
                0xE176: 0x75B1,
                0xE177: 0x75CD,
                0xE178: 0x75CA,
                0xE179: 0x75D2,
                0xE17A: 0x75D9,
                0xE17B: 0x75E3,
                0xE17C: 0x75DE,
                0xE17D: 0x75FE,
                0xE17E: 0x75FF,
                0xE180: 0x75FC,
                0xE181: 0x7601,
                0xE182: 0x75F0,
                0xE183: 0x75FA,
                0xE184: 0x75F2,
                0xE185: 0x75F3,
                0xE186: 0x760B,
                0xE187: 0x760D,
                0xE188: 0x7609,
                0xE189: 0x761F,
                0xE18A: 0x7627,
                0xE18B: 0x7620,
                0xE18C: 0x7621,
                0xE18D: 0x7622,
                0xE18E: 0x7624,
                0xE18F: 0x7634,
                0xE190: 0x7630,
                0xE191: 0x763B,
                0xE192: 0x7647,
                0xE193: 0x7648,
                0xE194: 0x7646,
                0xE195: 0x765C,
                0xE196: 0x7658,
                0xE197: 0x7661,
                0xE198: 0x7662,
                0xE199: 0x7668,
                0xE19A: 0x7669,
                0xE19B: 0x766A,
                0xE19C: 0x7667,
                0xE19D: 0x766C,
                0xE19E: 0x7670,
                0xE19F: 0x7672,
                0xE1A0: 0x7676,
                0xE1A1: 0x7678,
                0xE1A2: 0x767C,
                0xE1A3: 0x7680,
                0xE1A4: 0x7683,
                0xE1A5: 0x7688,
                0xE1A6: 0x768B,
                0xE1A7: 0x768E,
                0xE1A8: 0x7696,
                0xE1A9: 0x7693,
                0xE1AA: 0x7699,
                0xE1AB: 0x769A,
                0xE1AC: 0x76B0,
                0xE1AD: 0x76B4,
                0xE1AE: 0x76B8,
                0xE1AF: 0x76B9,
                0xE1B0: 0x76BA,
                0xE1B1: 0x76C2,
                0xE1B2: 0x76CD,
                0xE1B3: 0x76D6,
                0xE1B4: 0x76D2,
                0xE1B5: 0x76DE,
                0xE1B6: 0x76E1,
                0xE1B7: 0x76E5,
                0xE1B8: 0x76E7,
                0xE1B9: 0x76EA,
                0xE1BA: 0x862F,
                0xE1BB: 0x76FB,
                0xE1BC: 0x7708,
                0xE1BD: 0x7707,
                0xE1BE: 0x7704,
                0xE1BF: 0x7729,
                0xE1C0: 0x7724,
                0xE1C1: 0x771E,
                0xE1C2: 0x7725,
                0xE1C3: 0x7726,
                0xE1C4: 0x771B,
                0xE1C5: 0x7737,
                0xE1C6: 0x7738,
                0xE1C7: 0x7747,
                0xE1C8: 0x775A,
                0xE1C9: 0x7768,
                0xE1CA: 0x776B,
                0xE1CB: 0x775B,
                0xE1CC: 0x7765,
                0xE1CD: 0x777F,
                0xE1CE: 0x777E,
                0xE1CF: 0x7779,
                0xE1D0: 0x778E,
                0xE1D1: 0x778B,
                0xE1D2: 0x7791,
                0xE1D3: 0x77A0,
                0xE1D4: 0x779E,
                0xE1D5: 0x77B0,
                0xE1D6: 0x77B6,
                0xE1D7: 0x77B9,
                0xE1D8: 0x77BF,
                0xE1D9: 0x77BC,
                0xE1DA: 0x77BD,
                0xE1DB: 0x77BB,
                0xE1DC: 0x77C7,
                0xE1DD: 0x77CD,
                0xE1DE: 0x77D7,
                0xE1DF: 0x77DA,
                0xE1E0: 0x77DC,
                0xE1E1: 0x77E3,
                0xE1E2: 0x77EE,
                0xE1E3: 0x77FC,
                0xE1E4: 0x780C,
                0xE1E5: 0x7812,
                0xE1E6: 0x7926,
                0xE1E7: 0x7820,
                0xE1E8: 0x792A,
                0xE1E9: 0x7845,
                0xE1EA: 0x788E,
                0xE1EB: 0x7874,
                0xE1EC: 0x7886,
                0xE1ED: 0x787C,
                0xE1EE: 0x789A,
                0xE1EF: 0x788C,
                0xE1F0: 0x78A3,
                0xE1F1: 0x78B5,
                0xE1F2: 0x78AA,
                0xE1F3: 0x78AF,
                0xE1F4: 0x78D1,
                0xE1F5: 0x78C6,
                0xE1F6: 0x78CB,
                0xE1F7: 0x78D4,
                0xE1F8: 0x78BE,
                0xE1F9: 0x78BC,
                0xE1FA: 0x78C5,
                0xE1FB: 0x78CA,
                0xE1FC: 0x78EC,
                0xE240: 0x78E7,
                0xE241: 0x78DA,
                0xE242: 0x78FD,
                0xE243: 0x78F4,
                0xE244: 0x7907,
                0xE245: 0x7912,
                0xE246: 0x7911,
                0xE247: 0x7919,
                0xE248: 0x792C,
                0xE249: 0x792B,
                0xE24A: 0x7940,
                0xE24B: 0x7960,
                0xE24C: 0x7957,
                0xE24D: 0x795F,
                0xE24E: 0x795A,
                0xE24F: 0x7955,
                0xE250: 0x7953,
                0xE251: 0x797A,
                0xE252: 0x797F,
                0xE253: 0x798A,
                0xE254: 0x799D,
                0xE255: 0x79A7,
                0xE256: 0x9F4B,
                0xE257: 0x79AA,
                0xE258: 0x79AE,
                0xE259: 0x79B3,
                0xE25A: 0x79B9,
                0xE25B: 0x79BA,
                0xE25C: 0x79C9,
                0xE25D: 0x79D5,
                0xE25E: 0x79E7,
                0xE25F: 0x79EC,
                0xE260: 0x79E1,
                0xE261: 0x79E3,
                0xE262: 0x7A08,
                0xE263: 0x7A0D,
                0xE264: 0x7A18,
                0xE265: 0x7A19,
                0xE266: 0x7A20,
                0xE267: 0x7A1F,
                0xE268: 0x7980,
                0xE269: 0x7A31,
                0xE26A: 0x7A3B,
                0xE26B: 0x7A3E,
                0xE26C: 0x7A37,
                0xE26D: 0x7A43,
                0xE26E: 0x7A57,
                0xE26F: 0x7A49,
                0xE270: 0x7A61,
                0xE271: 0x7A62,
                0xE272: 0x7A69,
                0xE273: 0x9F9D,
                0xE274: 0x7A70,
                0xE275: 0x7A79,
                0xE276: 0x7A7D,
                0xE277: 0x7A88,
                0xE278: 0x7A97,
                0xE279: 0x7A95,
                0xE27A: 0x7A98,
                0xE27B: 0x7A96,
                0xE27C: 0x7AA9,
                0xE27D: 0x7AC8,
                0xE27E: 0x7AB0,
                0xE280: 0x7AB6,
                0xE281: 0x7AC5,
                0xE282: 0x7AC4,
                0xE283: 0x7ABF,
                0xE284: 0x9083,
                0xE285: 0x7AC7,
                0xE286: 0x7ACA,
                0xE287: 0x7ACD,
                0xE288: 0x7ACF,
                0xE289: 0x7AD5,
                0xE28A: 0x7AD3,
                0xE28B: 0x7AD9,
                0xE28C: 0x7ADA,
                0xE28D: 0x7ADD,
                0xE28E: 0x7AE1,
                0xE28F: 0x7AE2,
                0xE290: 0x7AE6,
                0xE291: 0x7AED,
                0xE292: 0x7AF0,
                0xE293: 0x7B02,
                0xE294: 0x7B0F,
                0xE295: 0x7B0A,
                0xE296: 0x7B06,
                0xE297: 0x7B33,
                0xE298: 0x7B18,
                0xE299: 0x7B19,
                0xE29A: 0x7B1E,
                0xE29B: 0x7B35,
                0xE29C: 0x7B28,
                0xE29D: 0x7B36,
                0xE29E: 0x7B50,
                0xE29F: 0x7B7A,
                0xE2A0: 0x7B04,
                0xE2A1: 0x7B4D,
                0xE2A2: 0x7B0B,
                0xE2A3: 0x7B4C,
                0xE2A4: 0x7B45,
                0xE2A5: 0x7B75,
                0xE2A6: 0x7B65,
                0xE2A7: 0x7B74,
                0xE2A8: 0x7B67,
                0xE2A9: 0x7B70,
                0xE2AA: 0x7B71,
                0xE2AB: 0x7B6C,
                0xE2AC: 0x7B6E,
                0xE2AD: 0x7B9D,
                0xE2AE: 0x7B98,
                0xE2AF: 0x7B9F,
                0xE2B0: 0x7B8D,
                0xE2B1: 0x7B9C,
                0xE2B2: 0x7B9A,
                0xE2B3: 0x7B8B,
                0xE2B4: 0x7B92,
                0xE2B5: 0x7B8F,
                0xE2B6: 0x7B5D,
                0xE2B7: 0x7B99,
                0xE2B8: 0x7BCB,
                0xE2B9: 0x7BC1,
                0xE2BA: 0x7BCC,
                0xE2BB: 0x7BCF,
                0xE2BC: 0x7BB4,
                0xE2BD: 0x7BC6,
                0xE2BE: 0x7BDD,
                0xE2BF: 0x7BE9,
                0xE2C0: 0x7C11,
                0xE2C1: 0x7C14,
                0xE2C2: 0x7BE6,
                0xE2C3: 0x7BE5,
                0xE2C4: 0x7C60,
                0xE2C5: 0x7C00,
                0xE2C6: 0x7C07,
                0xE2C7: 0x7C13,
                0xE2C8: 0x7BF3,
                0xE2C9: 0x7BF7,
                0xE2CA: 0x7C17,
                0xE2CB: 0x7C0D,
                0xE2CC: 0x7BF6,
                0xE2CD: 0x7C23,
                0xE2CE: 0x7C27,
                0xE2CF: 0x7C2A,
                0xE2D0: 0x7C1F,
                0xE2D1: 0x7C37,
                0xE2D2: 0x7C2B,
                0xE2D3: 0x7C3D,
                0xE2D4: 0x7C4C,
                0xE2D5: 0x7C43,
                0xE2D6: 0x7C54,
                0xE2D7: 0x7C4F,
                0xE2D8: 0x7C40,
                0xE2D9: 0x7C50,
                0xE2DA: 0x7C58,
                0xE2DB: 0x7C5F,
                0xE2DC: 0x7C64,
                0xE2DD: 0x7C56,
                0xE2DE: 0x7C65,
                0xE2DF: 0x7C6C,
                0xE2E0: 0x7C75,
                0xE2E1: 0x7C83,
                0xE2E2: 0x7C90,
                0xE2E3: 0x7CA4,
                0xE2E4: 0x7CAD,
                0xE2E5: 0x7CA2,
                0xE2E6: 0x7CAB,
                0xE2E7: 0x7CA1,
                0xE2E8: 0x7CA8,
                0xE2E9: 0x7CB3,
                0xE2EA: 0x7CB2,
                0xE2EB: 0x7CB1,
                0xE2EC: 0x7CAE,
                0xE2ED: 0x7CB9,
                0xE2EE: 0x7CBD,
                0xE2EF: 0x7CC0,
                0xE2F0: 0x7CC5,
                0xE2F1: 0x7CC2,
                0xE2F2: 0x7CD8,
                0xE2F3: 0x7CD2,
                0xE2F4: 0x7CDC,
                0xE2F5: 0x7CE2,
                0xE2F6: 0x9B3B,
                0xE2F7: 0x7CEF,
                0xE2F8: 0x7CF2,
                0xE2F9: 0x7CF4,
                0xE2FA: 0x7CF6,
                0xE2FB: 0x7CFA,
                0xE2FC: 0x7D06,
                0xE340: 0x7D02,
                0xE341: 0x7D1C,
                0xE342: 0x7D15,
                0xE343: 0x7D0A,
                0xE344: 0x7D45,
                0xE345: 0x7D4B,
                0xE346: 0x7D2E,
                0xE347: 0x7D32,
                0xE348: 0x7D3F,
                0xE349: 0x7D35,
                0xE34A: 0x7D46,
                0xE34B: 0x7D73,
                0xE34C: 0x7D56,
                0xE34D: 0x7D4E,
                0xE34E: 0x7D72,
                0xE34F: 0x7D68,
                0xE350: 0x7D6E,
                0xE351: 0x7D4F,
                0xE352: 0x7D63,
                0xE353: 0x7D93,
                0xE354: 0x7D89,
                0xE355: 0x7D5B,
                0xE356: 0x7D8F,
                0xE357: 0x7D7D,
                0xE358: 0x7D9B,
                0xE359: 0x7DBA,
                0xE35A: 0x7DAE,
                0xE35B: 0x7DA3,
                0xE35C: 0x7DB5,
                0xE35D: 0x7DC7,
                0xE35E: 0x7DBD,
                0xE35F: 0x7DAB,
                0xE360: 0x7E3D,
                0xE361: 0x7DA2,
                0xE362: 0x7DAF,
                0xE363: 0x7DDC,
                0xE364: 0x7DB8,
                0xE365: 0x7D9F,
                0xE366: 0x7DB0,
                0xE367: 0x7DD8,
                0xE368: 0x7DDD,
                0xE369: 0x7DE4,
                0xE36A: 0x7DDE,
                0xE36B: 0x7DFB,
                0xE36C: 0x7DF2,
                0xE36D: 0x7DE1,
                0xE36E: 0x7E05,
                0xE36F: 0x7E0A,
                0xE370: 0x7E23,
                0xE371: 0x7E21,
                0xE372: 0x7E12,
                0xE373: 0x7E31,
                0xE374: 0x7E1F,
                0xE375: 0x7E09,
                0xE376: 0x7E0B,
                0xE377: 0x7E22,
                0xE378: 0x7E46,
                0xE379: 0x7E66,
                0xE37A: 0x7E3B,
                0xE37B: 0x7E35,
                0xE37C: 0x7E39,
                0xE37D: 0x7E43,
                0xE37E: 0x7E37,
                0xE380: 0x7E32,
                0xE381: 0x7E3A,
                0xE382: 0x7E67,
                0xE383: 0x7E5D,
                0xE384: 0x7E56,
                0xE385: 0x7E5E,
                0xE386: 0x7E59,
                0xE387: 0x7E5A,
                0xE388: 0x7E79,
                0xE389: 0x7E6A,
                0xE38A: 0x7E69,
                0xE38B: 0x7E7C,
                0xE38C: 0x7E7B,
                0xE38D: 0x7E83,
                0xE38E: 0x7DD5,
                0xE38F: 0x7E7D,
                0xE390: 0x8FAE,
                0xE391: 0x7E7F,
                0xE392: 0x7E88,
                0xE393: 0x7E89,
                0xE394: 0x7E8C,
                0xE395: 0x7E92,
                0xE396: 0x7E90,
                0xE397: 0x7E93,
                0xE398: 0x7E94,
                0xE399: 0x7E96,
                0xE39A: 0x7E8E,
                0xE39B: 0x7E9B,
                0xE39C: 0x7E9C,
                0xE39D: 0x7F38,
                0xE39E: 0x7F3A,
                0xE39F: 0x7F45,
                0xE3A0: 0x7F4C,
                0xE3A1: 0x7F4D,
                0xE3A2: 0x7F4E,
                0xE3A3: 0x7F50,
                0xE3A4: 0x7F51,
                0xE3A5: 0x7F55,
                0xE3A6: 0x7F54,
                0xE3A7: 0x7F58,
                0xE3A8: 0x7F5F,
                0xE3A9: 0x7F60,
                0xE3AA: 0x7F68,
                0xE3AB: 0x7F69,
                0xE3AC: 0x7F67,
                0xE3AD: 0x7F78,
                0xE3AE: 0x7F82,
                0xE3AF: 0x7F86,
                0xE3B0: 0x7F83,
                0xE3B1: 0x7F88,
                0xE3B2: 0x7F87,
                0xE3B3: 0x7F8C,
                0xE3B4: 0x7F94,
                0xE3B5: 0x7F9E,
                0xE3B6: 0x7F9D,
                0xE3B7: 0x7F9A,
                0xE3B8: 0x7FA3,
                0xE3B9: 0x7FAF,
                0xE3BA: 0x7FB2,
                0xE3BB: 0x7FB9,
                0xE3BC: 0x7FAE,
                0xE3BD: 0x7FB6,
                0xE3BE: 0x7FB8,
                0xE3BF: 0x8B71,
                0xE3C0: 0x7FC5,
                0xE3C1: 0x7FC6,
                0xE3C2: 0x7FCA,
                0xE3C3: 0x7FD5,
                0xE3C4: 0x7FD4,
                0xE3C5: 0x7FE1,
                0xE3C6: 0x7FE6,
                0xE3C7: 0x7FE9,
                0xE3C8: 0x7FF3,
                0xE3C9: 0x7FF9,
                0xE3CA: 0x98DC,
                0xE3CB: 0x8006,
                0xE3CC: 0x8004,
                0xE3CD: 0x800B,
                0xE3CE: 0x8012,
                0xE3CF: 0x8018,
                0xE3D0: 0x8019,
                0xE3D1: 0x801C,
                0xE3D2: 0x8021,
                0xE3D3: 0x8028,
                0xE3D4: 0x803F,
                0xE3D5: 0x803B,
                0xE3D6: 0x804A,
                0xE3D7: 0x8046,
                0xE3D8: 0x8052,
                0xE3D9: 0x8058,
                0xE3DA: 0x805A,
                0xE3DB: 0x805F,
                0xE3DC: 0x8062,
                0xE3DD: 0x8068,
                0xE3DE: 0x8073,
                0xE3DF: 0x8072,
                0xE3E0: 0x8070,
                0xE3E1: 0x8076,
                0xE3E2: 0x8079,
                0xE3E3: 0x807D,
                0xE3E4: 0x807F,
                0xE3E5: 0x8084,
                0xE3E6: 0x8086,
                0xE3E7: 0x8085,
                0xE3E8: 0x809B,
                0xE3E9: 0x8093,
                0xE3EA: 0x809A,
                0xE3EB: 0x80AD,
                0xE3EC: 0x5190,
                0xE3ED: 0x80AC,
                0xE3EE: 0x80DB,
                0xE3EF: 0x80E5,
                0xE3F0: 0x80D9,
                0xE3F1: 0x80DD,
                0xE3F2: 0x80C4,
                0xE3F3: 0x80DA,
                0xE3F4: 0x80D6,
                0xE3F5: 0x8109,
                0xE3F6: 0x80EF,
                0xE3F7: 0x80F1,
                0xE3F8: 0x811B,
                0xE3F9: 0x8129,
                0xE3FA: 0x8123,
                0xE3FB: 0x812F,
                0xE3FC: 0x814B,
                0xE440: 0x968B,
                0xE441: 0x8146,
                0xE442: 0x813E,
                0xE443: 0x8153,
                0xE444: 0x8151,
                0xE445: 0x80FC,
                0xE446: 0x8171,
                0xE447: 0x816E,
                0xE448: 0x8165,
                0xE449: 0x8166,
                0xE44A: 0x8174,
                0xE44B: 0x8183,
                0xE44C: 0x8188,
                0xE44D: 0x818A,
                0xE44E: 0x8180,
                0xE44F: 0x8182,
                0xE450: 0x81A0,
                0xE451: 0x8195,
                0xE452: 0x81A4,
                0xE453: 0x81A3,
                0xE454: 0x815F,
                0xE455: 0x8193,
                0xE456: 0x81A9,
                0xE457: 0x81B0,
                0xE458: 0x81B5,
                0xE459: 0x81BE,
                0xE45A: 0x81B8,
                0xE45B: 0x81BD,
                0xE45C: 0x81C0,
                0xE45D: 0x81C2,
                0xE45E: 0x81BA,
                0xE45F: 0x81C9,
                0xE460: 0x81CD,
                0xE461: 0x81D1,
                0xE462: 0x81D9,
                0xE463: 0x81D8,
                0xE464: 0x81C8,
                0xE465: 0x81DA,
                0xE466: 0x81DF,
                0xE467: 0x81E0,
                0xE468: 0x81E7,
                0xE469: 0x81FA,
                0xE46A: 0x81FB,
                0xE46B: 0x81FE,
                0xE46C: 0x8201,
                0xE46D: 0x8202,
                0xE46E: 0x8205,
                0xE46F: 0x8207,
                0xE470: 0x820A,
                0xE471: 0x820D,
                0xE472: 0x8210,
                0xE473: 0x8216,
                0xE474: 0x8229,
                0xE475: 0x822B,
                0xE476: 0x8238,
                0xE477: 0x8233,
                0xE478: 0x8240,
                0xE479: 0x8259,
                0xE47A: 0x8258,
                0xE47B: 0x825D,
                0xE47C: 0x825A,
                0xE47D: 0x825F,
                0xE47E: 0x8264,
                0xE480: 0x8262,
                0xE481: 0x8268,
                0xE482: 0x826A,
                0xE483: 0x826B,
                0xE484: 0x822E,
                0xE485: 0x8271,
                0xE486: 0x8277,
                0xE487: 0x8278,
                0xE488: 0x827E,
                0xE489: 0x828D,
                0xE48A: 0x8292,
                0xE48B: 0x82AB,
                0xE48C: 0x829F,
                0xE48D: 0x82BB,
                0xE48E: 0x82AC,
                0xE48F: 0x82E1,
                0xE490: 0x82E3,
                0xE491: 0x82DF,
                0xE492: 0x82D2,
                0xE493: 0x82F4,
                0xE494: 0x82F3,
                0xE495: 0x82FA,
                0xE496: 0x8393,
                0xE497: 0x8303,
                0xE498: 0x82FB,
                0xE499: 0x82F9,
                0xE49A: 0x82DE,
                0xE49B: 0x8306,
                0xE49C: 0x82DC,
                0xE49D: 0x8309,
                0xE49E: 0x82D9,
                0xE49F: 0x8335,
                0xE4A0: 0x8334,
                0xE4A1: 0x8316,
                0xE4A2: 0x8332,
                0xE4A3: 0x8331,
                0xE4A4: 0x8340,
                0xE4A5: 0x8339,
                0xE4A6: 0x8350,
                0xE4A7: 0x8345,
                0xE4A8: 0x832F,
                0xE4A9: 0x832B,
                0xE4AA: 0x8317,
                0xE4AB: 0x8318,
                0xE4AC: 0x8385,
                0xE4AD: 0x839A,
                0xE4AE: 0x83AA,
                0xE4AF: 0x839F,
                0xE4B0: 0x83A2,
                0xE4B1: 0x8396,
                0xE4B2: 0x8323,
                0xE4B3: 0x838E,
                0xE4B4: 0x8387,
                0xE4B5: 0x838A,
                0xE4B6: 0x837C,
                0xE4B7: 0x83B5,
                0xE4B8: 0x8373,
                0xE4B9: 0x8375,
                0xE4BA: 0x83A0,
                0xE4BB: 0x8389,
                0xE4BC: 0x83A8,
                0xE4BD: 0x83F4,
                0xE4BE: 0x8413,
                0xE4BF: 0x83EB,
                0xE4C0: 0x83CE,
                0xE4C1: 0x83FD,
                0xE4C2: 0x8403,
                0xE4C3: 0x83D8,
                0xE4C4: 0x840B,
                0xE4C5: 0x83C1,
                0xE4C6: 0x83F7,
                0xE4C7: 0x8407,
                0xE4C8: 0x83E0,
                0xE4C9: 0x83F2,
                0xE4CA: 0x840D,
                0xE4CB: 0x8422,
                0xE4CC: 0x8420,
                0xE4CD: 0x83BD,
                0xE4CE: 0x8438,
                0xE4CF: 0x8506,
                0xE4D0: 0x83FB,
                0xE4D1: 0x846D,
                0xE4D2: 0x842A,
                0xE4D3: 0x843C,
                0xE4D4: 0x855A,
                0xE4D5: 0x8484,
                0xE4D6: 0x8477,
                0xE4D7: 0x846B,
                0xE4D8: 0x84AD,
                0xE4D9: 0x846E,
                0xE4DA: 0x8482,
                0xE4DB: 0x8469,
                0xE4DC: 0x8446,
                0xE4DD: 0x842C,
                0xE4DE: 0x846F,
                0xE4DF: 0x8479,
                0xE4E0: 0x8435,
                0xE4E1: 0x84CA,
                0xE4E2: 0x8462,
                0xE4E3: 0x84B9,
                0xE4E4: 0x84BF,
                0xE4E5: 0x849F,
                0xE4E6: 0x84D9,
                0xE4E7: 0x84CD,
                0xE4E8: 0x84BB,
                0xE4E9: 0x84DA,
                0xE4EA: 0x84D0,
                0xE4EB: 0x84C1,
                0xE4EC: 0x84C6,
                0xE4ED: 0x84D6,
                0xE4EE: 0x84A1,
                0xE4EF: 0x8521,
                0xE4F0: 0x84FF,
                0xE4F1: 0x84F4,
                0xE4F2: 0x8517,
                0xE4F3: 0x8518,
                0xE4F4: 0x852C,
                0xE4F5: 0x851F,
                0xE4F6: 0x8515,
                0xE4F7: 0x8514,
                0xE4F8: 0x84FC,
                0xE4F9: 0x8540,
                0xE4FA: 0x8563,
                0xE4FB: 0x8558,
                0xE4FC: 0x8548,
                0xE540: 0x8541,
                0xE541: 0x8602,
                0xE542: 0x854B,
                0xE543: 0x8555,
                0xE544: 0x8580,
                0xE545: 0x85A4,
                0xE546: 0x8588,
                0xE547: 0x8591,
                0xE548: 0x858A,
                0xE549: 0x85A8,
                0xE54A: 0x856D,
                0xE54B: 0x8594,
                0xE54C: 0x859B,
                0xE54D: 0x85EA,
                0xE54E: 0x8587,
                0xE54F: 0x859C,
                0xE550: 0x8577,
                0xE551: 0x857E,
                0xE552: 0x8590,
                0xE553: 0x85C9,
                0xE554: 0x85BA,
                0xE555: 0x85CF,
                0xE556: 0x85B9,
                0xE557: 0x85D0,
                0xE558: 0x85D5,
                0xE559: 0x85DD,
                0xE55A: 0x85E5,
                0xE55B: 0x85DC,
                0xE55C: 0x85F9,
                0xE55D: 0x860A,
                0xE55E: 0x8613,
                0xE55F: 0x860B,
                0xE560: 0x85FE,
                0xE561: 0x85FA,
                0xE562: 0x8606,
                0xE563: 0x8622,
                0xE564: 0x861A,
                0xE565: 0x8630,
                0xE566: 0x863F,
                0xE567: 0x864D,
                0xE568: 0x4E55,
                0xE569: 0x8654,
                0xE56A: 0x865F,
                0xE56B: 0x8667,
                0xE56C: 0x8671,
                0xE56D: 0x8693,
                0xE56E: 0x86A3,
                0xE56F: 0x86A9,
                0xE570: 0x86AA,
                0xE571: 0x868B,
                0xE572: 0x868C,
                0xE573: 0x86B6,
                0xE574: 0x86AF,
                0xE575: 0x86C4,
                0xE576: 0x86C6,
                0xE577: 0x86B0,
                0xE578: 0x86C9,
                0xE579: 0x8823,
                0xE57A: 0x86AB,
                0xE57B: 0x86D4,
                0xE57C: 0x86DE,
                0xE57D: 0x86E9,
                0xE57E: 0x86EC,
                0xE580: 0x86DF,
                0xE581: 0x86DB,
                0xE582: 0x86EF,
                0xE583: 0x8712,
                0xE584: 0x8706,
                0xE585: 0x8708,
                0xE586: 0x8700,
                0xE587: 0x8703,
                0xE588: 0x86FB,
                0xE589: 0x8711,
                0xE58A: 0x8709,
                0xE58B: 0x870D,
                0xE58C: 0x86F9,
                0xE58D: 0x870A,
                0xE58E: 0x8734,
                0xE58F: 0x873F,
                0xE590: 0x8737,
                0xE591: 0x873B,
                0xE592: 0x8725,
                0xE593: 0x8729,
                0xE594: 0x871A,
                0xE595: 0x8760,
                0xE596: 0x875F,
                0xE597: 0x8778,
                0xE598: 0x874C,
                0xE599: 0x874E,
                0xE59A: 0x8774,
                0xE59B: 0x8757,
                0xE59C: 0x8768,
                0xE59D: 0x876E,
                0xE59E: 0x8759,
                0xE59F: 0x8753,
                0xE5A0: 0x8763,
                0xE5A1: 0x876A,
                0xE5A2: 0x8805,
                0xE5A3: 0x87A2,
                0xE5A4: 0x879F,
                0xE5A5: 0x8782,
                0xE5A6: 0x87AF,
                0xE5A7: 0x87CB,
                0xE5A8: 0x87BD,
                0xE5A9: 0x87C0,
                0xE5AA: 0x87D0,
                0xE5AB: 0x96D6,
                0xE5AC: 0x87AB,
                0xE5AD: 0x87C4,
                0xE5AE: 0x87B3,
                0xE5AF: 0x87C7,
                0xE5B0: 0x87C6,
                0xE5B1: 0x87BB,
                0xE5B2: 0x87EF,
                0xE5B3: 0x87F2,
                0xE5B4: 0x87E0,
                0xE5B5: 0x880F,
                0xE5B6: 0x880D,
                0xE5B7: 0x87FE,
                0xE5B8: 0x87F6,
                0xE5B9: 0x87F7,
                0xE5BA: 0x880E,
                0xE5BB: 0x87D2,
                0xE5BC: 0x8811,
                0xE5BD: 0x8816,
                0xE5BE: 0x8815,
                0xE5BF: 0x8822,
                0xE5C0: 0x8821,
                0xE5C1: 0x8831,
                0xE5C2: 0x8836,
                0xE5C3: 0x8839,
                0xE5C4: 0x8827,
                0xE5C5: 0x883B,
                0xE5C6: 0x8844,
                0xE5C7: 0x8842,
                0xE5C8: 0x8852,
                0xE5C9: 0x8859,
                0xE5CA: 0x885E,
                0xE5CB: 0x8862,
                0xE5CC: 0x886B,
                0xE5CD: 0x8881,
                0xE5CE: 0x887E,
                0xE5CF: 0x889E,
                0xE5D0: 0x8875,
                0xE5D1: 0x887D,
                0xE5D2: 0x88B5,
                0xE5D3: 0x8872,
                0xE5D4: 0x8882,
                0xE5D5: 0x8897,
                0xE5D6: 0x8892,
                0xE5D7: 0x88AE,
                0xE5D8: 0x8899,
                0xE5D9: 0x88A2,
                0xE5DA: 0x888D,
                0xE5DB: 0x88A4,
                0xE5DC: 0x88B0,
                0xE5DD: 0x88BF,
                0xE5DE: 0x88B1,
                0xE5DF: 0x88C3,
                0xE5E0: 0x88C4,
                0xE5E1: 0x88D4,
                0xE5E2: 0x88D8,
                0xE5E3: 0x88D9,
                0xE5E4: 0x88DD,
                0xE5E5: 0x88F9,
                0xE5E6: 0x8902,
                0xE5E7: 0x88FC,
                0xE5E8: 0x88F4,
                0xE5E9: 0x88E8,
                0xE5EA: 0x88F2,
                0xE5EB: 0x8904,
                0xE5EC: 0x890C,
                0xE5ED: 0x890A,
                0xE5EE: 0x8913,
                0xE5EF: 0x8943,
                0xE5F0: 0x891E,
                0xE5F1: 0x8925,
                0xE5F2: 0x892A,
                0xE5F3: 0x892B,
                0xE5F4: 0x8941,
                0xE5F5: 0x8944,
                0xE5F6: 0x893B,
                0xE5F7: 0x8936,
                0xE5F8: 0x8938,
                0xE5F9: 0x894C,
                0xE5FA: 0x891D,
                0xE5FB: 0x8960,
                0xE5FC: 0x895E,
                0xE640: 0x8966,
                0xE641: 0x8964,
                0xE642: 0x896D,
                0xE643: 0x896A,
                0xE644: 0x896F,
                0xE645: 0x8974,
                0xE646: 0x8977,
                0xE647: 0x897E,
                0xE648: 0x8983,
                0xE649: 0x8988,
                0xE64A: 0x898A,
                0xE64B: 0x8993,
                0xE64C: 0x8998,
                0xE64D: 0x89A1,
                0xE64E: 0x89A9,
                0xE64F: 0x89A6,
                0xE650: 0x89AC,
                0xE651: 0x89AF,
                0xE652: 0x89B2,
                0xE653: 0x89BA,
                0xE654: 0x89BD,
                0xE655: 0x89BF,
                0xE656: 0x89C0,
                0xE657: 0x89DA,
                0xE658: 0x89DC,
                0xE659: 0x89DD,
                0xE65A: 0x89E7,
                0xE65B: 0x89F4,
                0xE65C: 0x89F8,
                0xE65D: 0x8A03,
                0xE65E: 0x8A16,
                0xE65F: 0x8A10,
                0xE660: 0x8A0C,
                0xE661: 0x8A1B,
                0xE662: 0x8A1D,
                0xE663: 0x8A25,
                0xE664: 0x8A36,
                0xE665: 0x8A41,
                0xE666: 0x8A5B,
                0xE667: 0x8A52,
                0xE668: 0x8A46,
                0xE669: 0x8A48,
                0xE66A: 0x8A7C,
                0xE66B: 0x8A6D,
                0xE66C: 0x8A6C,
                0xE66D: 0x8A62,
                0xE66E: 0x8A85,
                0xE66F: 0x8A82,
                0xE670: 0x8A84,
                0xE671: 0x8AA8,
                0xE672: 0x8AA1,
                0xE673: 0x8A91,
                0xE674: 0x8AA5,
                0xE675: 0x8AA6,
                0xE676: 0x8A9A,
                0xE677: 0x8AA3,
                0xE678: 0x8AC4,
                0xE679: 0x8ACD,
                0xE67A: 0x8AC2,
                0xE67B: 0x8ADA,
                0xE67C: 0x8AEB,
                0xE67D: 0x8AF3,
                0xE67E: 0x8AE7,
                0xE680: 0x8AE4,
                0xE681: 0x8AF1,
                0xE682: 0x8B14,
                0xE683: 0x8AE0,
                0xE684: 0x8AE2,
                0xE685: 0x8AF7,
                0xE686: 0x8ADE,
                0xE687: 0x8ADB,
                0xE688: 0x8B0C,
                0xE689: 0x8B07,
                0xE68A: 0x8B1A,
                0xE68B: 0x8AE1,
                0xE68C: 0x8B16,
                0xE68D: 0x8B10,
                0xE68E: 0x8B17,
                0xE68F: 0x8B20,
                0xE690: 0x8B33,
                0xE691: 0x97AB,
                0xE692: 0x8B26,
                0xE693: 0x8B2B,
                0xE694: 0x8B3E,
                0xE695: 0x8B28,
                0xE696: 0x8B41,
                0xE697: 0x8B4C,
                0xE698: 0x8B4F,
                0xE699: 0x8B4E,
                0xE69A: 0x8B49,
                0xE69B: 0x8B56,
                0xE69C: 0x8B5B,
                0xE69D: 0x8B5A,
                0xE69E: 0x8B6B,
                0xE69F: 0x8B5F,
                0xE6A0: 0x8B6C,
                0xE6A1: 0x8B6F,
                0xE6A2: 0x8B74,
                0xE6A3: 0x8B7D,
                0xE6A4: 0x8B80,
                0xE6A5: 0x8B8C,
                0xE6A6: 0x8B8E,
                0xE6A7: 0x8B92,
                0xE6A8: 0x8B93,
                0xE6A9: 0x8B96,
                0xE6AA: 0x8B99,
                0xE6AB: 0x8B9A,
                0xE6AC: 0x8C3A,
                0xE6AD: 0x8C41,
                0xE6AE: 0x8C3F,
                0xE6AF: 0x8C48,
                0xE6B0: 0x8C4C,
                0xE6B1: 0x8C4E,
                0xE6B2: 0x8C50,
                0xE6B3: 0x8C55,
                0xE6B4: 0x8C62,
                0xE6B5: 0x8C6C,
                0xE6B6: 0x8C78,
                0xE6B7: 0x8C7A,
                0xE6B8: 0x8C82,
                0xE6B9: 0x8C89,
                0xE6BA: 0x8C85,
                0xE6BB: 0x8C8A,
                0xE6BC: 0x8C8D,
                0xE6BD: 0x8C8E,
                0xE6BE: 0x8C94,
                0xE6BF: 0x8C7C,
                0xE6C0: 0x8C98,
                0xE6C1: 0x621D,
                0xE6C2: 0x8CAD,
                0xE6C3: 0x8CAA,
                0xE6C4: 0x8CBD,
                0xE6C5: 0x8CB2,
                0xE6C6: 0x8CB3,
                0xE6C7: 0x8CAE,
                0xE6C8: 0x8CB6,
                0xE6C9: 0x8CC8,
                0xE6CA: 0x8CC1,
                0xE6CB: 0x8CE4,
                0xE6CC: 0x8CE3,
                0xE6CD: 0x8CDA,
                0xE6CE: 0x8CFD,
                0xE6CF: 0x8CFA,
                0xE6D0: 0x8CFB,
                0xE6D1: 0x8D04,
                0xE6D2: 0x8D05,
                0xE6D3: 0x8D0A,
                0xE6D4: 0x8D07,
                0xE6D5: 0x8D0F,
                0xE6D6: 0x8D0D,
                0xE6D7: 0x8D10,
                0xE6D8: 0x9F4E,
                0xE6D9: 0x8D13,
                0xE6DA: 0x8CCD,
                0xE6DB: 0x8D14,
                0xE6DC: 0x8D16,
                0xE6DD: 0x8D67,
                0xE6DE: 0x8D6D,
                0xE6DF: 0x8D71,
                0xE6E0: 0x8D73,
                0xE6E1: 0x8D81,
                0xE6E2: 0x8D99,
                0xE6E3: 0x8DC2,
                0xE6E4: 0x8DBE,
                0xE6E5: 0x8DBA,
                0xE6E6: 0x8DCF,
                0xE6E7: 0x8DDA,
                0xE6E8: 0x8DD6,
                0xE6E9: 0x8DCC,
                0xE6EA: 0x8DDB,
                0xE6EB: 0x8DCB,
                0xE6EC: 0x8DEA,
                0xE6ED: 0x8DEB,
                0xE6EE: 0x8DDF,
                0xE6EF: 0x8DE3,
                0xE6F0: 0x8DFC,
                0xE6F1: 0x8E08,
                0xE6F2: 0x8E09,
                0xE6F3: 0x8DFF,
                0xE6F4: 0x8E1D,
                0xE6F5: 0x8E1E,
                0xE6F6: 0x8E10,
                0xE6F7: 0x8E1F,
                0xE6F8: 0x8E42,
                0xE6F9: 0x8E35,
                0xE6FA: 0x8E30,
                0xE6FB: 0x8E34,
                0xE6FC: 0x8E4A,
                0xE740: 0x8E47,
                0xE741: 0x8E49,
                0xE742: 0x8E4C,
                0xE743: 0x8E50,
                0xE744: 0x8E48,
                0xE745: 0x8E59,
                0xE746: 0x8E64,
                0xE747: 0x8E60,
                0xE748: 0x8E2A,
                0xE749: 0x8E63,
                0xE74A: 0x8E55,
                0xE74B: 0x8E76,
                0xE74C: 0x8E72,
                0xE74D: 0x8E7C,
                0xE74E: 0x8E81,
                0xE74F: 0x8E87,
                0xE750: 0x8E85,
                0xE751: 0x8E84,
                0xE752: 0x8E8B,
                0xE753: 0x8E8A,
                0xE754: 0x8E93,
                0xE755: 0x8E91,
                0xE756: 0x8E94,
                0xE757: 0x8E99,
                0xE758: 0x8EAA,
                0xE759: 0x8EA1,
                0xE75A: 0x8EAC,
                0xE75B: 0x8EB0,
                0xE75C: 0x8EC6,
                0xE75D: 0x8EB1,
                0xE75E: 0x8EBE,
                0xE75F: 0x8EC5,
                0xE760: 0x8EC8,
                0xE761: 0x8ECB,
                0xE762: 0x8EDB,
                0xE763: 0x8EE3,
                0xE764: 0x8EFC,
                0xE765: 0x8EFB,
                0xE766: 0x8EEB,
                0xE767: 0x8EFE,
                0xE768: 0x8F0A,
                0xE769: 0x8F05,
                0xE76A: 0x8F15,
                0xE76B: 0x8F12,
                0xE76C: 0x8F19,
                0xE76D: 0x8F13,
                0xE76E: 0x8F1C,
                0xE76F: 0x8F1F,
                0xE770: 0x8F1B,
                0xE771: 0x8F0C,
                0xE772: 0x8F26,
                0xE773: 0x8F33,
                0xE774: 0x8F3B,
                0xE775: 0x8F39,
                0xE776: 0x8F45,
                0xE777: 0x8F42,
                0xE778: 0x8F3E,
                0xE779: 0x8F4C,
                0xE77A: 0x8F49,
                0xE77B: 0x8F46,
                0xE77C: 0x8F4E,
                0xE77D: 0x8F57,
                0xE77E: 0x8F5C,
                0xE780: 0x8F62,
                0xE781: 0x8F63,
                0xE782: 0x8F64,
                0xE783: 0x8F9C,
                0xE784: 0x8F9F,
                0xE785: 0x8FA3,
                0xE786: 0x8FAD,
                0xE787: 0x8FAF,
                0xE788: 0x8FB7,
                0xE789: 0x8FDA,
                0xE78A: 0x8FE5,
                0xE78B: 0x8FE2,
                0xE78C: 0x8FEA,
                0xE78D: 0x8FEF,
                0xE78E: 0x9087,
                0xE78F: 0x8FF4,
                0xE790: 0x9005,
                0xE791: 0x8FF9,
                0xE792: 0x8FFA,
                0xE793: 0x9011,
                0xE794: 0x9015,
                0xE795: 0x9021,
                0xE796: 0x900D,
                0xE797: 0x901E,
                0xE798: 0x9016,
                0xE799: 0x900B,
                0xE79A: 0x9027,
                0xE79B: 0x9036,
                0xE79C: 0x9035,
                0xE79D: 0x9039,
                0xE79E: 0x8FF8,
                0xE79F: 0x904F,
                0xE7A0: 0x9050,
                0xE7A1: 0x9051,
                0xE7A2: 0x9052,
                0xE7A3: 0x900E,
                0xE7A4: 0x9049,
                0xE7A5: 0x903E,
                0xE7A6: 0x9056,
                0xE7A7: 0x9058,
                0xE7A8: 0x905E,
                0xE7A9: 0x9068,
                0xE7AA: 0x906F,
                0xE7AB: 0x9076,
                0xE7AC: 0x96A8,
                0xE7AD: 0x9072,
                0xE7AE: 0x9082,
                0xE7AF: 0x907D,
                0xE7B0: 0x9081,
                0xE7B1: 0x9080,
                0xE7B2: 0x908A,
                0xE7B3: 0x9089,
                0xE7B4: 0x908F,
                0xE7B5: 0x90A8,
                0xE7B6: 0x90AF,
                0xE7B7: 0x90B1,
                0xE7B8: 0x90B5,
                0xE7B9: 0x90E2,
                0xE7BA: 0x90E4,
                0xE7BB: 0x6248,
                0xE7BC: 0x90DB,
                0xE7BD: 0x9102,
                0xE7BE: 0x9112,
                0xE7BF: 0x9119,
                0xE7C0: 0x9132,
                0xE7C1: 0x9130,
                0xE7C2: 0x914A,
                0xE7C3: 0x9156,
                0xE7C4: 0x9158,
                0xE7C5: 0x9163,
                0xE7C6: 0x9165,
                0xE7C7: 0x9169,
                0xE7C8: 0x9173,
                0xE7C9: 0x9172,
                0xE7CA: 0x918B,
                0xE7CB: 0x9189,
                0xE7CC: 0x9182,
                0xE7CD: 0x91A2,
                0xE7CE: 0x91AB,
                0xE7CF: 0x91AF,
                0xE7D0: 0x91AA,
                0xE7D1: 0x91B5,
                0xE7D2: 0x91B4,
                0xE7D3: 0x91BA,
                0xE7D4: 0x91C0,
                0xE7D5: 0x91C1,
                0xE7D6: 0x91C9,
                0xE7D7: 0x91CB,
                0xE7D8: 0x91D0,
                0xE7D9: 0x91D6,
                0xE7DA: 0x91DF,
                0xE7DB: 0x91E1,
                0xE7DC: 0x91DB,
                0xE7DD: 0x91FC,
                0xE7DE: 0x91F5,
                0xE7DF: 0x91F6,
                0xE7E0: 0x921E,
                0xE7E1: 0x91FF,
                0xE7E2: 0x9214,
                0xE7E3: 0x922C,
                0xE7E4: 0x9215,
                0xE7E5: 0x9211,
                0xE7E6: 0x925E,
                0xE7E7: 0x9257,
                0xE7E8: 0x9245,
                0xE7E9: 0x9249,
                0xE7EA: 0x9264,
                0xE7EB: 0x9248,
                0xE7EC: 0x9295,
                0xE7ED: 0x923F,
                0xE7EE: 0x924B,
                0xE7EF: 0x9250,
                0xE7F0: 0x929C,
                0xE7F1: 0x9296,
                0xE7F2: 0x9293,
                0xE7F3: 0x929B,
                0xE7F4: 0x925A,
                0xE7F5: 0x92CF,
                0xE7F6: 0x92B9,
                0xE7F7: 0x92B7,
                0xE7F8: 0x92E9,
                0xE7F9: 0x930F,
                0xE7FA: 0x92FA,
                0xE7FB: 0x9344,
                0xE7FC: 0x932E,
                0xE840: 0x9319,
                0xE841: 0x9322,
                0xE842: 0x931A,
                0xE843: 0x9323,
                0xE844: 0x933A,
                0xE845: 0x9335,
                0xE846: 0x933B,
                0xE847: 0x935C,
                0xE848: 0x9360,
                0xE849: 0x937C,
                0xE84A: 0x936E,
                0xE84B: 0x9356,
                0xE84C: 0x93B0,
                0xE84D: 0x93AC,
                0xE84E: 0x93AD,
                0xE84F: 0x9394,
                0xE850: 0x93B9,
                0xE851: 0x93D6,
                0xE852: 0x93D7,
                0xE853: 0x93E8,
                0xE854: 0x93E5,
                0xE855: 0x93D8,
                0xE856: 0x93C3,
                0xE857: 0x93DD,
                0xE858: 0x93D0,
                0xE859: 0x93C8,
                0xE85A: 0x93E4,
                0xE85B: 0x941A,
                0xE85C: 0x9414,
                0xE85D: 0x9413,
                0xE85E: 0x9403,
                0xE85F: 0x9407,
                0xE860: 0x9410,
                0xE861: 0x9436,
                0xE862: 0x942B,
                0xE863: 0x9435,
                0xE864: 0x9421,
                0xE865: 0x943A,
                0xE866: 0x9441,
                0xE867: 0x9452,
                0xE868: 0x9444,
                0xE869: 0x945B,
                0xE86A: 0x9460,
                0xE86B: 0x9462,
                0xE86C: 0x945E,
                0xE86D: 0x946A,
                0xE86E: 0x9229,
                0xE86F: 0x9470,
                0xE870: 0x9475,
                0xE871: 0x9477,
                0xE872: 0x947D,
                0xE873: 0x945A,
                0xE874: 0x947C,
                0xE875: 0x947E,
                0xE876: 0x9481,
                0xE877: 0x947F,
                0xE878: 0x9582,
                0xE879: 0x9587,
                0xE87A: 0x958A,
                0xE87B: 0x9594,
                0xE87C: 0x9596,
                0xE87D: 0x9598,
                0xE87E: 0x9599,
                0xE880: 0x95A0,
                0xE881: 0x95A8,
                0xE882: 0x95A7,
                0xE883: 0x95AD,
                0xE884: 0x95BC,
                0xE885: 0x95BB,
                0xE886: 0x95B9,
                0xE887: 0x95BE,
                0xE888: 0x95CA,
                0xE889: 0x6FF6,
                0xE88A: 0x95C3,
                0xE88B: 0x95CD,
                0xE88C: 0x95CC,
                0xE88D: 0x95D5,
                0xE88E: 0x95D4,
                0xE88F: 0x95D6,
                0xE890: 0x95DC,
                0xE891: 0x95E1,
                0xE892: 0x95E5,
                0xE893: 0x95E2,
                0xE894: 0x9621,
                0xE895: 0x9628,
                0xE896: 0x962E,
                0xE897: 0x962F,
                0xE898: 0x9642,
                0xE899: 0x964C,
                0xE89A: 0x964F,
                0xE89B: 0x964B,
                0xE89C: 0x9677,
                0xE89D: 0x965C,
                0xE89E: 0x965E,
                0xE89F: 0x965D,
                0xE8A0: 0x965F,
                0xE8A1: 0x9666,
                0xE8A2: 0x9672,
                0xE8A3: 0x966C,
                0xE8A4: 0x968D,
                0xE8A5: 0x9698,
                0xE8A6: 0x9695,
                0xE8A7: 0x9697,
                0xE8A8: 0x96AA,
                0xE8A9: 0x96A7,
                0xE8AA: 0x96B1,
                0xE8AB: 0x96B2,
                0xE8AC: 0x96B0,
                0xE8AD: 0x96B4,
                0xE8AE: 0x96B6,
                0xE8AF: 0x96B8,
                0xE8B0: 0x96B9,
                0xE8B1: 0x96CE,
                0xE8B2: 0x96CB,
                0xE8B3: 0x96C9,
                0xE8B4: 0x96CD,
                0xE8B5: 0x894D,
                0xE8B6: 0x96DC,
                0xE8B7: 0x970D,
                0xE8B8: 0x96D5,
                0xE8B9: 0x96F9,
                0xE8BA: 0x9704,
                0xE8BB: 0x9706,
                0xE8BC: 0x9708,
                0xE8BD: 0x9713,
                0xE8BE: 0x970E,
                0xE8BF: 0x9711,
                0xE8C0: 0x970F,
                0xE8C1: 0x9716,
                0xE8C2: 0x9719,
                0xE8C3: 0x9724,
                0xE8C4: 0x972A,
                0xE8C5: 0x9730,
                0xE8C6: 0x9739,
                0xE8C7: 0x973D,
                0xE8C8: 0x973E,
                0xE8C9: 0x9744,
                0xE8CA: 0x9746,
                0xE8CB: 0x9748,
                0xE8CC: 0x9742,
                0xE8CD: 0x9749,
                0xE8CE: 0x975C,
                0xE8CF: 0x9760,
                0xE8D0: 0x9764,
                0xE8D1: 0x9766,
                0xE8D2: 0x9768,
                0xE8D3: 0x52D2,
                0xE8D4: 0x976B,
                0xE8D5: 0x9771,
                0xE8D6: 0x9779,
                0xE8D7: 0x9785,
                0xE8D8: 0x977C,
                0xE8D9: 0x9781,
                0xE8DA: 0x977A,
                0xE8DB: 0x9786,
                0xE8DC: 0x978B,
                0xE8DD: 0x978F,
                0xE8DE: 0x9790,
                0xE8DF: 0x979C,
                0xE8E0: 0x97A8,
                0xE8E1: 0x97A6,
                0xE8E2: 0x97A3,
                0xE8E3: 0x97B3,
                0xE8E4: 0x97B4,
                0xE8E5: 0x97C3,
                0xE8E6: 0x97C6,
                0xE8E7: 0x97C8,
                0xE8E8: 0x97CB,
                0xE8E9: 0x97DC,
                0xE8EA: 0x97ED,
                0xE8EB: 0x9F4F,
                0xE8EC: 0x97F2,
                0xE8ED: 0x7ADF,
                0xE8EE: 0x97F6,
                0xE8EF: 0x97F5,
                0xE8F0: 0x980F,
                0xE8F1: 0x980C,
                0xE8F2: 0x9838,
                0xE8F3: 0x9824,
                0xE8F4: 0x9821,
                0xE8F5: 0x9837,
                0xE8F6: 0x983D,
                0xE8F7: 0x9846,
                0xE8F8: 0x984F,
                0xE8F9: 0x984B,
                0xE8FA: 0x986B,
                0xE8FB: 0x986F,
                0xE8FC: 0x9870,
                0xE940: 0x9871,
                0xE941: 0x9874,
                0xE942: 0x9873,
                0xE943: 0x98AA,
                0xE944: 0x98AF,
                0xE945: 0x98B1,
                0xE946: 0x98B6,
                0xE947: 0x98C4,
                0xE948: 0x98C3,
                0xE949: 0x98C6,
                0xE94A: 0x98E9,
                0xE94B: 0x98EB,
                0xE94C: 0x9903,
                0xE94D: 0x9909,
                0xE94E: 0x9912,
                0xE94F: 0x9914,
                0xE950: 0x9918,
                0xE951: 0x9921,
                0xE952: 0x991D,
                0xE953: 0x991E,
                0xE954: 0x9924,
                0xE955: 0x9920,
                0xE956: 0x992C,
                0xE957: 0x992E,
                0xE958: 0x993D,
                0xE959: 0x993E,
                0xE95A: 0x9942,
                0xE95B: 0x9949,
                0xE95C: 0x9945,
                0xE95D: 0x9950,
                0xE95E: 0x994B,
                0xE95F: 0x9951,
                0xE960: 0x9952,
                0xE961: 0x994C,
                0xE962: 0x9955,
                0xE963: 0x9997,
                0xE964: 0x9998,
                0xE965: 0x99A5,
                0xE966: 0x99AD,
                0xE967: 0x99AE,
                0xE968: 0x99BC,
                0xE969: 0x99DF,
                0xE96A: 0x99DB,
                0xE96B: 0x99DD,
                0xE96C: 0x99D8,
                0xE96D: 0x99D1,
                0xE96E: 0x99ED,
                0xE96F: 0x99EE,
                0xE970: 0x99F1,
                0xE971: 0x99F2,
                0xE972: 0x99FB,
                0xE973: 0x99F8,
                0xE974: 0x9A01,
                0xE975: 0x9A0F,
                0xE976: 0x9A05,
                0xE977: 0x99E2,
                0xE978: 0x9A19,
                0xE979: 0x9A2B,
                0xE97A: 0x9A37,
                0xE97B: 0x9A45,
                0xE97C: 0x9A42,
                0xE97D: 0x9A40,
                0xE97E: 0x9A43,
                0xE980: 0x9A3E,
                0xE981: 0x9A55,
                0xE982: 0x9A4D,
                0xE983: 0x9A5B,
                0xE984: 0x9A57,
                0xE985: 0x9A5F,
                0xE986: 0x9A62,
                0xE987: 0x9A65,
                0xE988: 0x9A64,
                0xE989: 0x9A69,
                0xE98A: 0x9A6B,
                0xE98B: 0x9A6A,
                0xE98C: 0x9AAD,
                0xE98D: 0x9AB0,
                0xE98E: 0x9ABC,
                0xE98F: 0x9AC0,
                0xE990: 0x9ACF,
                0xE991: 0x9AD1,
                0xE992: 0x9AD3,
                0xE993: 0x9AD4,
                0xE994: 0x9ADE,
                0xE995: 0x9ADF,
                0xE996: 0x9AE2,
                0xE997: 0x9AE3,
                0xE998: 0x9AE6,
                0xE999: 0x9AEF,
                0xE99A: 0x9AEB,
                0xE99B: 0x9AEE,
                0xE99C: 0x9AF4,
                0xE99D: 0x9AF1,
                0xE99E: 0x9AF7,
                0xE99F: 0x9AFB,
                0xE9A0: 0x9B06,
                0xE9A1: 0x9B18,
                0xE9A2: 0x9B1A,
                0xE9A3: 0x9B1F,
                0xE9A4: 0x9B22,
                0xE9A5: 0x9B23,
                0xE9A6: 0x9B25,
                0xE9A7: 0x9B27,
                0xE9A8: 0x9B28,
                0xE9A9: 0x9B29,
                0xE9AA: 0x9B2A,
                0xE9AB: 0x9B2E,
                0xE9AC: 0x9B2F,
                0xE9AD: 0x9B32,
                0xE9AE: 0x9B44,
                0xE9AF: 0x9B43,
                0xE9B0: 0x9B4F,
                0xE9B1: 0x9B4D,
                0xE9B2: 0x9B4E,
                0xE9B3: 0x9B51,
                0xE9B4: 0x9B58,
                0xE9B5: 0x9B74,
                0xE9B6: 0x9B93,
                0xE9B7: 0x9B83,
                0xE9B8: 0x9B91,
                0xE9B9: 0x9B96,
                0xE9BA: 0x9B97,
                0xE9BB: 0x9B9F,
                0xE9BC: 0x9BA0,
                0xE9BD: 0x9BA8,
                0xE9BE: 0x9BB4,
                0xE9BF: 0x9BC0,
                0xE9C0: 0x9BCA,
                0xE9C1: 0x9BB9,
                0xE9C2: 0x9BC6,
                0xE9C3: 0x9BCF,
                0xE9C4: 0x9BD1,
                0xE9C5: 0x9BD2,
                0xE9C6: 0x9BE3,
                0xE9C7: 0x9BE2,
                0xE9C8: 0x9BE4,
                0xE9C9: 0x9BD4,
                0xE9CA: 0x9BE1,
                0xE9CB: 0x9C3A,
                0xE9CC: 0x9BF2,
                0xE9CD: 0x9BF1,
                0xE9CE: 0x9BF0,
                0xE9CF: 0x9C15,
                0xE9D0: 0x9C14,
                0xE9D1: 0x9C09,
                0xE9D2: 0x9C13,
                0xE9D3: 0x9C0C,
                0xE9D4: 0x9C06,
                0xE9D5: 0x9C08,
                0xE9D6: 0x9C12,
                0xE9D7: 0x9C0A,
                0xE9D8: 0x9C04,
                0xE9D9: 0x9C2E,
                0xE9DA: 0x9C1B,
                0xE9DB: 0x9C25,
                0xE9DC: 0x9C24,
                0xE9DD: 0x9C21,
                0xE9DE: 0x9C30,
                0xE9DF: 0x9C47,
                0xE9E0: 0x9C32,
                0xE9E1: 0x9C46,
                0xE9E2: 0x9C3E,
                0xE9E3: 0x9C5A,
                0xE9E4: 0x9C60,
                0xE9E5: 0x9C67,
                0xE9E6: 0x9C76,
                0xE9E7: 0x9C78,
                0xE9E8: 0x9CE7,
                0xE9E9: 0x9CEC,
                0xE9EA: 0x9CF0,
                0xE9EB: 0x9D09,
                0xE9EC: 0x9D08,
                0xE9ED: 0x9CEB,
                0xE9EE: 0x9D03,
                0xE9EF: 0x9D06,
                0xE9F0: 0x9D2A,
                0xE9F1: 0x9D26,
                0xE9F2: 0x9DAF,
                0xE9F3: 0x9D23,
                0xE9F4: 0x9D1F,
                0xE9F5: 0x9D44,
                0xE9F6: 0x9D15,
                0xE9F7: 0x9D12,
                0xE9F8: 0x9D41,
                0xE9F9: 0x9D3F,
                0xE9FA: 0x9D3E,
                0xE9FB: 0x9D46,
                0xE9FC: 0x9D48,
                0xEA40: 0x9D5D,
                0xEA41: 0x9D5E,
                0xEA42: 0x9D64,
                0xEA43: 0x9D51,
                0xEA44: 0x9D50,
                0xEA45: 0x9D59,
                0xEA46: 0x9D72,
                0xEA47: 0x9D89,
                0xEA48: 0x9D87,
                0xEA49: 0x9DAB,
                0xEA4A: 0x9D6F,
                0xEA4B: 0x9D7A,
                0xEA4C: 0x9D9A,
                0xEA4D: 0x9DA4,
                0xEA4E: 0x9DA9,
                0xEA4F: 0x9DB2,
                0xEA50: 0x9DC4,
                0xEA51: 0x9DC1,
                0xEA52: 0x9DBB,
                0xEA53: 0x9DB8,
                0xEA54: 0x9DBA,
                0xEA55: 0x9DC6,
                0xEA56: 0x9DCF,
                0xEA57: 0x9DC2,
                0xEA58: 0x9DD9,
                0xEA59: 0x9DD3,
                0xEA5A: 0x9DF8,
                0xEA5B: 0x9DE6,
                0xEA5C: 0x9DED,
                0xEA5D: 0x9DEF,
                0xEA5E: 0x9DFD,
                0xEA5F: 0x9E1A,
                0xEA60: 0x9E1B,
                0xEA61: 0x9E1E,
                0xEA62: 0x9E75,
                0xEA63: 0x9E79,
                0xEA64: 0x9E7D,
                0xEA65: 0x9E81,
                0xEA66: 0x9E88,
                0xEA67: 0x9E8B,
                0xEA68: 0x9E8C,
                0xEA69: 0x9E92,
                0xEA6A: 0x9E95,
                0xEA6B: 0x9E91,
                0xEA6C: 0x9E9D,
                0xEA6D: 0x9EA5,
                0xEA6E: 0x9EA9,
                0xEA6F: 0x9EB8,
                0xEA70: 0x9EAA,
                0xEA71: 0x9EAD,
                0xEA72: 0x9761,
                0xEA73: 0x9ECC,
                0xEA74: 0x9ECE,
                0xEA75: 0x9ECF,
                0xEA76: 0x9ED0,
                0xEA77: 0x9ED4,
                0xEA78: 0x9EDC,
                0xEA79: 0x9EDE,
                0xEA7A: 0x9EDD,
                0xEA7B: 0x9EE0,
                0xEA7C: 0x9EE5,
                0xEA7D: 0x9EE8,
                0xEA7E: 0x9EEF,
                0xEA80: 0x9EF4,
                0xEA81: 0x9EF6,
                0xEA82: 0x9EF7,
                0xEA83: 0x9EF9,
                0xEA84: 0x9EFB,
                0xEA85: 0x9EFC,
                0xEA86: 0x9EFD,
                0xEA87: 0x9F07,
                0xEA88: 0x9F08,
                0xEA89: 0x76B7,
                0xEA8A: 0x9F15,
                0xEA8B: 0x9F21,
                0xEA8C: 0x9F2C,
                0xEA8D: 0x9F3E,
                0xEA8E: 0x9F4A,
                0xEA8F: 0x9F52,
                0xEA90: 0x9F54,
                0xEA91: 0x9F63,
                0xEA92: 0x9F5F,
                0xEA93: 0x9F60,
                0xEA94: 0x9F61,
                0xEA95: 0x9F66,
                0xEA96: 0x9F67,
                0xEA97: 0x9F6C,
                0xEA98: 0x9F6A,
                0xEA99: 0x9F77,
                0xEA9A: 0x9F72,
                0xEA9B: 0x9F76,
                0xEA9C: 0x9F95,
                0xEA9D: 0x9F9C,
                0xEA9E: 0x9FA0,
                0xEA9F: 0x582F,
                0xEAA0: 0x69C7,
                0xEAA1: 0x9059,
                0xEAA2: 0x7464,
                0xEAA3: 0x51DC,
                0xEAA4: 0x7199
            };
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var GenericGF_1 = __webpack_require__(1);
            var GenericGFPoly_1 = __webpack_require__(2);
            function runEuclideanAlgorithm(field, a, b, R) {
                var _a;
                // Assume a's degree is >= b's
                if (a.degree() < b.degree()) {
                    _a = [
                        b,
                        a
                    ], a = _a[0], b = _a[1];
                }
                var rLast = a;
                var r = b;
                var tLast = field.zero;
                var t = field.one;
                // Run Euclidean algorithm until r's degree is less than R/2
                while(r.degree() >= R / 2){
                    var rLastLast = rLast;
                    var tLastLast = tLast;
                    rLast = r;
                    tLast = t;
                    // Divide rLastLast by rLast, with quotient in q and remainder in r
                    if (rLast.isZero()) {
                        // Euclidean algorithm already terminated?
                        return null;
                    }
                    r = rLastLast;
                    var q = field.zero;
                    var denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());
                    var dltInverse = field.inverse(denominatorLeadingTerm);
                    while(r.degree() >= rLast.degree() && !r.isZero()){
                        var degreeDiff = r.degree() - rLast.degree();
                        var scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);
                        q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));
                        r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
                    }
                    t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);
                    if (r.degree() >= rLast.degree()) {
                        return null;
                    }
                }
                var sigmaTildeAtZero = t.getCoefficient(0);
                if (sigmaTildeAtZero === 0) {
                    return null;
                }
                var inverse = field.inverse(sigmaTildeAtZero);
                return [
                    t.multiply(inverse),
                    r.multiply(inverse)
                ];
            }
            function findErrorLocations(field, errorLocator) {
                // This is a direct application of Chien's search
                var numErrors = errorLocator.degree();
                if (numErrors === 1) {
                    return [
                        errorLocator.getCoefficient(1)
                    ];
                }
                var result = new Array(numErrors);
                var errorCount = 0;
                for(var i = 1; i < field.size && errorCount < numErrors; i++){
                    if (errorLocator.evaluateAt(i) === 0) {
                        result[errorCount] = field.inverse(i);
                        errorCount++;
                    }
                }
                if (errorCount !== numErrors) {
                    return null;
                }
                return result;
            }
            function findErrorMagnitudes(field, errorEvaluator, errorLocations) {
                // This is directly applying Forney's Formula
                var s = errorLocations.length;
                var result = new Array(s);
                for(var i = 0; i < s; i++){
                    var xiInverse = field.inverse(errorLocations[i]);
                    var denominator = 1;
                    for(var j = 0; j < s; j++){
                        if (i !== j) {
                            denominator = field.multiply(denominator, GenericGF_1.addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));
                        }
                    }
                    result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));
                    if (field.generatorBase !== 0) {
                        result[i] = field.multiply(result[i], xiInverse);
                    }
                }
                return result;
            }
            function decode(bytes, twoS) {
                var outputBytes = new Uint8ClampedArray(bytes.length);
                outputBytes.set(bytes);
                var field = new GenericGF_1.default(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1
                var poly = new GenericGFPoly_1.default(field, outputBytes);
                var syndromeCoefficients = new Uint8ClampedArray(twoS);
                var error = false;
                for(var s = 0; s < twoS; s++){
                    var evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));
                    syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;
                    if (evaluation !== 0) {
                        error = true;
                    }
                }
                if (!error) {
                    return outputBytes;
                }
                var syndrome = new GenericGFPoly_1.default(field, syndromeCoefficients);
                var sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);
                if (sigmaOmega === null) {
                    return null;
                }
                var errorLocations = findErrorLocations(field, sigmaOmega[0]);
                if (errorLocations == null) {
                    return null;
                }
                var errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);
                for(var i = 0; i < errorLocations.length; i++){
                    var position = outputBytes.length - 1 - field.log(errorLocations[i]);
                    if (position < 0) {
                        return null;
                    }
                    outputBytes[position] = GenericGF_1.addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);
                }
                return outputBytes;
            }
            exports.decode = decode;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.VERSIONS = [
                {
                    infoBits: null,
                    versionNumber: 1,
                    alignmentPatternCenters: [],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 7,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 19
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 10,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 13,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 17,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 9
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 2,
                    alignmentPatternCenters: [
                        6,
                        18
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 10,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 34
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 16,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 28
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 22
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 3,
                    alignmentPatternCenters: [
                        6,
                        22
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 15,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 55
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 44
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 4,
                    alignmentPatternCenters: [
                        6,
                        26
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 80
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 32
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 24
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 16,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 9
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 5,
                    alignmentPatternCenters: [
                        6,
                        30
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 108
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 43
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 11
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 12
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 6,
                    alignmentPatternCenters: [
                        6,
                        34
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 68
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 16,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 27
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 19
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x07C94,
                    versionNumber: 7,
                    alignmentPatternCenters: [
                        6,
                        22,
                        38
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 78
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 31
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 13
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 14
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x085BC,
                    versionNumber: 8,
                    alignmentPatternCenters: [
                        6,
                        24,
                        42
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 97
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 38
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 39
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 18
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 19
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x09A99,
                    versionNumber: 9,
                    alignmentPatternCenters: [
                        6,
                        26,
                        46
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 36
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 37
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0A4D3,
                    versionNumber: 10,
                    alignmentPatternCenters: [
                        6,
                        28,
                        50
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 68
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 69
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 43
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 44
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 19
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 20
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0BBF6,
                    versionNumber: 11,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 81
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 50
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 51
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0C762,
                    versionNumber: 12,
                    alignmentPatternCenters: [
                        6,
                        32,
                        58
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 92
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 93
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 36
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 37
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 20
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 21
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0D847,
                    versionNumber: 13,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 107
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 37
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 38
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 20
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 21
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 11
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 12
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0E60D,
                    versionNumber: 14,
                    alignmentPatternCenters: [
                        6,
                        26,
                        46,
                        66
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 40
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 41
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x0F928,
                    versionNumber: 15,
                    alignmentPatternCenters: [
                        6,
                        26,
                        48,
                        70
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 87
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 88
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 41
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 42
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x10B78,
                    versionNumber: 16,
                    alignmentPatternCenters: [
                        6,
                        26,
                        50,
                        74
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 98
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 99
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 19
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 20
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1145D,
                    versionNumber: 17,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        78
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 107
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 108
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x12A17,
                    versionNumber: 18,
                    alignmentPatternCenters: [
                        6,
                        30,
                        56,
                        82
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 120
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 121
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 9,
                                    dataCodewordsPerBlock: 43
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 44
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x13532,
                    versionNumber: 19,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 113
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 114
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 44
                                },
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 45
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 21
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 22
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 9,
                                    dataCodewordsPerBlock: 13
                                },
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 14
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x149A6,
                    versionNumber: 20,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62,
                        90
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 107
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 108
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 41
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 42
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x15683,
                    versionNumber: 21,
                    alignmentPatternCenters: [
                        6,
                        28,
                        50,
                        72,
                        94
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 116
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 117
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 42
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x168C9,
                    versionNumber: 22,
                    alignmentPatternCenters: [
                        6,
                        26,
                        50,
                        74,
                        98
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 111
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 112
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x177EC,
                    versionNumber: 23,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        74,
                        102
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 121
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 122
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x18EC4,
                    versionNumber: 24,
                    alignmentPatternCenters: [
                        6,
                        28,
                        54,
                        80,
                        106
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 117
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 118
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 30,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x191E1,
                    versionNumber: 25,
                    alignmentPatternCenters: [
                        6,
                        32,
                        58,
                        84,
                        110
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 106
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 107
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1AFAB,
                    versionNumber: 26,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86,
                        114
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 114
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 115
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 28,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 23
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 33,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1B08E,
                    versionNumber: 27,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62,
                        90,
                        118
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 122
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 123
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 23
                                },
                                {
                                    numBlocks: 26,
                                    dataCodewordsPerBlock: 24
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 28,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1CC1A,
                    versionNumber: 28,
                    alignmentPatternCenters: [
                        6,
                        26,
                        50,
                        74,
                        98,
                        122
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 117
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 118
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 31,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 31,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1D33F,
                    versionNumber: 29,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        78,
                        102,
                        126
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 116
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 117
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 21,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 23
                                },
                                {
                                    numBlocks: 37,
                                    dataCodewordsPerBlock: 24
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 26,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1ED75,
                    versionNumber: 30,
                    alignmentPatternCenters: [
                        6,
                        26,
                        52,
                        78,
                        104,
                        130
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 25,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 25,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x1F250,
                    versionNumber: 31,
                    alignmentPatternCenters: [
                        6,
                        30,
                        56,
                        82,
                        108,
                        134
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 29,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 42,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 28,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x209D5,
                    versionNumber: 32,
                    alignmentPatternCenters: [
                        6,
                        34,
                        60,
                        86,
                        112,
                        138
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 115
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 35,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 35,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x216F0,
                    versionNumber: 33,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86,
                        114,
                        142
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 21,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 29,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 46,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x228BA,
                    versionNumber: 34,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62,
                        90,
                        118,
                        146
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 44,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 59,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x2379F,
                    versionNumber: 35,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        78,
                        102,
                        126,
                        150
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 121
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 122
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 26,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 39,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 41,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x24B0B,
                    versionNumber: 36,
                    alignmentPatternCenters: [
                        6,
                        24,
                        50,
                        76,
                        102,
                        128,
                        154
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 121
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 122
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 46,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 64,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x2542E,
                    versionNumber: 37,
                    alignmentPatternCenters: [
                        6,
                        28,
                        54,
                        80,
                        106,
                        132,
                        158
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 122
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 123
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 29,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 49,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 24,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 46,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x26A64,
                    versionNumber: 38,
                    alignmentPatternCenters: [
                        6,
                        32,
                        58,
                        84,
                        110,
                        136,
                        162
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 122
                                },
                                {
                                    numBlocks: 18,
                                    dataCodewordsPerBlock: 123
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 32,
                                    dataCodewordsPerBlock: 47
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 48,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 42,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 32,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x27541,
                    versionNumber: 39,
                    alignmentPatternCenters: [
                        6,
                        26,
                        54,
                        82,
                        110,
                        138,
                        166
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 20,
                                    dataCodewordsPerBlock: 117
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 118
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 40,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 43,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 67,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                },
                {
                    infoBits: 0x28C69,
                    versionNumber: 40,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86,
                        114,
                        142,
                        170
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 118
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 119
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 18,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 31,
                                    dataCodewordsPerBlock: 48
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 25
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 20,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 61,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }
                    ]
                }
            ];
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix_1 = __webpack_require__(0);
            function squareToQuadrilateral(p1, p2, p3, p4) {
                var dx3 = p1.x - p2.x + p3.x - p4.x;
                var dy3 = p1.y - p2.y + p3.y - p4.y;
                if (dx3 === 0 && dy3 === 0) {
                    return {
                        a11: p2.x - p1.x,
                        a12: p2.y - p1.y,
                        a13: 0,
                        a21: p3.x - p2.x,
                        a22: p3.y - p2.y,
                        a23: 0,
                        a31: p1.x,
                        a32: p1.y,
                        a33: 1
                    };
                } else {
                    var dx1 = p2.x - p3.x;
                    var dx2 = p4.x - p3.x;
                    var dy1 = p2.y - p3.y;
                    var dy2 = p4.y - p3.y;
                    var denominator = dx1 * dy2 - dx2 * dy1;
                    var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
                    var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
                    return {
                        a11: p2.x - p1.x + a13 * p2.x,
                        a12: p2.y - p1.y + a13 * p2.y,
                        a13: a13,
                        a21: p4.x - p1.x + a23 * p4.x,
                        a22: p4.y - p1.y + a23 * p4.y,
                        a23: a23,
                        a31: p1.x,
                        a32: p1.y,
                        a33: 1
                    };
                }
            }
            function quadrilateralToSquare(p1, p2, p3, p4) {
                // Here, the adjoint serves as the inverse:
                var sToQ = squareToQuadrilateral(p1, p2, p3, p4);
                return {
                    a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,
                    a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,
                    a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,
                    a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,
                    a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,
                    a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,
                    a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,
                    a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,
                    a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21
                };
            }
            function times(a, b) {
                return {
                    a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,
                    a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,
                    a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,
                    a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,
                    a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,
                    a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,
                    a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,
                    a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,
                    a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33
                };
            }
            function extract(image, location) {
                var qToS = quadrilateralToSquare({
                    x: 3.5,
                    y: 3.5
                }, {
                    x: location.dimension - 3.5,
                    y: 3.5
                }, {
                    x: location.dimension - 6.5,
                    y: location.dimension - 6.5
                }, {
                    x: 3.5,
                    y: location.dimension - 3.5
                });
                var sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);
                var transform = times(sToQ, qToS);
                var matrix = BitMatrix_1.BitMatrix.createEmpty(location.dimension, location.dimension);
                var mappingFunction = function(x, y) {
                    var denominator = transform.a13 * x + transform.a23 * y + transform.a33;
                    return {
                        x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,
                        y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator
                    };
                };
                for(var y = 0; y < location.dimension; y++){
                    for(var x = 0; x < location.dimension; x++){
                        var xValue = x + 0.5;
                        var yValue = y + 0.5;
                        var sourcePixel = mappingFunction(xValue, yValue);
                        matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));
                    }
                }
                return {
                    matrix: matrix,
                    mappingFunction: mappingFunction
                };
            }
            exports.extract = extract;
        /***/ },
        function(module1, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var MAX_FINDERPATTERNS_TO_SEARCH = 4;
            var MIN_QUAD_RATIO = 0.5;
            var MAX_QUAD_RATIO = 1.5;
            var distance = function(a, b) {
                return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));
            };
            function sum(values) {
                return values.reduce(function(a, b) {
                    return a + b;
                });
            }
            // Takes three finder patterns and organizes them into topLeft, topRight, etc
            function reorderFinderPatterns(pattern1, pattern2, pattern3) {
                var _a, _b, _c, _d;
                // Find distances between pattern centers
                var oneTwoDistance = distance(pattern1, pattern2);
                var twoThreeDistance = distance(pattern2, pattern3);
                var oneThreeDistance = distance(pattern1, pattern3);
                var bottomLeft;
                var topLeft;
                var topRight;
                // Assume one closest to other two is B; A and C will just be guesses at first
                if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {
                    _a = [
                        pattern2,
                        pattern1,
                        pattern3
                    ], bottomLeft = _a[0], topLeft = _a[1], topRight = _a[2];
                } else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {
                    _b = [
                        pattern1,
                        pattern2,
                        pattern3
                    ], bottomLeft = _b[0], topLeft = _b[1], topRight = _b[2];
                } else {
                    _c = [
                        pattern1,
                        pattern3,
                        pattern2
                    ], bottomLeft = _c[0], topLeft = _c[1], topRight = _c[2];
                }
                // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)
                // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then
                // we've got it flipped around and should swap topRight and bottomLeft.
                if ((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y) - (topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x) < 0) {
                    _d = [
                        topRight,
                        bottomLeft
                    ], bottomLeft = _d[0], topRight = _d[1];
                }
                return {
                    bottomLeft: bottomLeft,
                    topLeft: topLeft,
                    topRight: topRight
                };
            }
            // Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns
            function computeDimension(topLeft, topRight, bottomLeft, matrix) {
                var moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1
                sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 + sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 + sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;
                if (moduleSize < 1) {
                    throw new Error("Invalid module size");
                }
                var topDimension = Math.round(distance(topLeft, topRight) / moduleSize);
                var sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);
                var dimension = Math.floor((topDimension + sideDimension) / 2) + 7;
                switch(dimension % 4){
                    case 0:
                        dimension++;
                        break;
                    case 2:
                        dimension--;
                        break;
                }
                return {
                    dimension: dimension,
                    moduleSize: moduleSize
                };
            }
            // Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.
            // Returns an array of elements, representing the pixel size of the black white run.
            // Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm
            function countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {
                var switchPoints = [
                    {
                        x: Math.floor(origin.x),
                        y: Math.floor(origin.y)
                    }
                ];
                var steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);
                var fromX;
                var fromY;
                var toX;
                var toY;
                if (steep) {
                    fromX = Math.floor(origin.y);
                    fromY = Math.floor(origin.x);
                    toX = Math.floor(end.y);
                    toY = Math.floor(end.x);
                } else {
                    fromX = Math.floor(origin.x);
                    fromY = Math.floor(origin.y);
                    toX = Math.floor(end.x);
                    toY = Math.floor(end.y);
                }
                var dx = Math.abs(toX - fromX);
                var dy = Math.abs(toY - fromY);
                var error = Math.floor(-dx / 2);
                var xStep = fromX < toX ? 1 : -1;
                var yStep = fromY < toY ? 1 : -1;
                var currentPixel = true;
                // Loop up until x == toX, but not beyond
                for(var x = fromX, y = fromY; x !== toX + xStep; x += xStep){
                    // Does current pixel mean we have moved white to black or vice versa?
                    // Scanning black in state 0,2 and white in state 1, so if we find the wrong
                    // color, advance to next state or end if we are in state 2 already
                    var realX = steep ? y : x;
                    var realY = steep ? x : y;
                    if (matrix.get(realX, realY) !== currentPixel) {
                        currentPixel = !currentPixel;
                        switchPoints.push({
                            x: realX,
                            y: realY
                        });
                        if (switchPoints.length === length + 1) {
                            break;
                        }
                    }
                    error += dy;
                    if (error > 0) {
                        if (y === toY) {
                            break;
                        }
                        y += yStep;
                        error -= dx;
                    }
                }
                var distances = [];
                for(var i = 0; i < length; i++){
                    if (switchPoints[i] && switchPoints[i + 1]) {
                        distances.push(distance(switchPoints[i], switchPoints[i + 1]));
                    } else {
                        distances.push(0);
                    }
                }
                return distances;
            }
            // Takes an origin point and an end point and counts the sizes of the black white run in the origin point
            // along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes
            // of the black white run. Takes a length which represents the number of switches from black to white to look for.
            function countBlackWhiteRun(origin, end, matrix, length) {
                var _a;
                var rise = end.y - origin.y;
                var run = end.x - origin.x;
                var towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));
                var awayFromEnd = countBlackWhiteRunTowardsPoint(origin, {
                    x: origin.x - run,
                    y: origin.y - rise
                }, matrix, Math.ceil(length / 2));
                var middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel
                return (_a = awayFromEnd.concat(middleValue)).concat.apply(_a, towardsEnd);
            }
            // Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the "error" -
            // that is the amount the run diverges from the expected ratio
            function scoreBlackWhiteRun(sequence, ratios) {
                var averageSize = sum(sequence) / sum(ratios);
                var error = 0;
                ratios.forEach(function(ratio, i) {
                    error += Math.pow(sequence[i] - ratio * averageSize, 2);
                });
                return {
                    averageSize: averageSize,
                    error: error
                };
            }
            // Takes an X,Y point and an array of sizes and scores the point against those ratios.
            // For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios
            // against that.
            function scorePattern(point, ratios, matrix) {
                try {
                    var horizontalRun = countBlackWhiteRun(point, {
                        x: -1,
                        y: point.y
                    }, matrix, ratios.length);
                    var verticalRun = countBlackWhiteRun(point, {
                        x: point.x,
                        y: -1
                    }, matrix, ratios.length);
                    var topLeftPoint = {
                        x: Math.max(0, point.x - point.y) - 1,
                        y: Math.max(0, point.y - point.x) - 1
                    };
                    var topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);
                    var bottomLeftPoint = {
                        x: Math.min(matrix.width, point.x + point.y) + 1,
                        y: Math.min(matrix.height, point.y + point.x) + 1
                    };
                    var bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);
                    var horzError = scoreBlackWhiteRun(horizontalRun, ratios);
                    var vertError = scoreBlackWhiteRun(verticalRun, ratios);
                    var diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);
                    var diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);
                    var ratioError = Math.sqrt(horzError.error * horzError.error + vertError.error * vertError.error + diagDownError.error * diagDownError.error + diagUpError.error * diagUpError.error);
                    var avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;
                    var sizeError = (Math.pow(horzError.averageSize - avgSize, 2) + Math.pow(vertError.averageSize - avgSize, 2) + Math.pow(diagDownError.averageSize - avgSize, 2) + Math.pow(diagUpError.averageSize - avgSize, 2)) / avgSize;
                    return ratioError + sizeError;
                } catch (_a) {
                    return Infinity;
                }
            }
            function recenterLocation(matrix, p) {
                var leftX = Math.round(p.x);
                while(matrix.get(leftX, Math.round(p.y))){
                    leftX--;
                }
                var rightX = Math.round(p.x);
                while(matrix.get(rightX, Math.round(p.y))){
                    rightX++;
                }
                var x = (leftX + rightX) / 2;
                var topY = Math.round(p.y);
                while(matrix.get(Math.round(x), topY)){
                    topY--;
                }
                var bottomY = Math.round(p.y);
                while(matrix.get(Math.round(x), bottomY)){
                    bottomY++;
                }
                var y = (topY + bottomY) / 2;
                return {
                    x: x,
                    y: y
                };
            }
            function locate(matrix) {
                var finderPatternQuads = [];
                var activeFinderPatternQuads = [];
                var alignmentPatternQuads = [];
                var activeAlignmentPatternQuads = [];
                var _loop_1 = function(y) {
                    var length_1 = 0;
                    var lastBit = false;
                    var scans = [
                        0,
                        0,
                        0,
                        0,
                        0
                    ];
                    var _loop_2 = function(x) {
                        var v = matrix.get(x, y);
                        if (v === lastBit) {
                            length_1++;
                        } else {
                            scans = [
                                scans[1],
                                scans[2],
                                scans[3],
                                scans[4],
                                length_1
                            ];
                            length_1 = 1;
                            lastBit = v;
                            // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b
                            var averageFinderPatternBlocksize = sum(scans) / 7;
                            var validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize && Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && !v; // And make sure the current pixel is white since finder patterns are bordered in white
                            // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w
                            var averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;
                            var validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && v; // Is the current pixel black since alignment patterns are bordered in black
                            if (validFinderPattern) {
                                // Compute the start and end x values of the large center black square
                                var endX_1 = x - scans[3] - scans[4];
                                var startX_1 = endX_1 - scans[2];
                                var line = {
                                    startX: startX_1,
                                    endX: endX_1,
                                    y: y
                                };
                                // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                                // that line as the starting point.
                                var matchingQuads = activeFinderPatternQuads.filter(function(q) {
                                    return startX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX || endX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX || startX_1 <= q.bottom.startX && endX_1 >= q.bottom.endX && scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO;
                                });
                                if (matchingQuads.length > 0) {
                                    matchingQuads[0].bottom = line;
                                } else {
                                    activeFinderPatternQuads.push({
                                        top: line,
                                        bottom: line
                                    });
                                }
                            }
                            if (validAlignmentPattern) {
                                // Compute the start and end x values of the center black square
                                var endX_2 = x - scans[4];
                                var startX_2 = endX_2 - scans[3];
                                var line = {
                                    startX: startX_2,
                                    y: y,
                                    endX: endX_2
                                };
                                // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                                // that line as the starting point.
                                var matchingQuads = activeAlignmentPatternQuads.filter(function(q) {
                                    return startX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX || endX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX || startX_2 <= q.bottom.startX && endX_2 >= q.bottom.endX && scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO;
                                });
                                if (matchingQuads.length > 0) {
                                    matchingQuads[0].bottom = line;
                                } else {
                                    activeAlignmentPatternQuads.push({
                                        top: line,
                                        bottom: line
                                    });
                                }
                            }
                        }
                    };
                    for(var x = -1; x <= matrix.width; x++){
                        _loop_2(x);
                    }
                    finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function(q) {
                        return q.bottom.y !== y && q.bottom.y - q.top.y >= 2;
                    }));
                    activeFinderPatternQuads = activeFinderPatternQuads.filter(function(q) {
                        return q.bottom.y === y;
                    });
                    alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads.filter(function(q) {
                        return q.bottom.y !== y;
                    }));
                    activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(function(q) {
                        return q.bottom.y === y;
                    });
                };
                for(var y = 0; y <= matrix.height; y++){
                    _loop_1(y);
                }
                finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function(q) {
                    return q.bottom.y - q.top.y >= 2;
                }));
                alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads);
                var finderPatternGroups = finderPatternQuads.filter(function(q) {
                    return q.bottom.y - q.top.y >= 2;
                }) // All quads must be at least 2px tall since the center square is larger than a block
                .map(function(q) {
                    var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                    var y = (q.top.y + q.bottom.y + 1) / 2;
                    if (!matrix.get(Math.round(x), Math.round(y))) {
                        return;
                    }
                    var lengths = [
                        q.top.endX - q.top.startX,
                        q.bottom.endX - q.bottom.startX,
                        q.bottom.y - q.top.y + 1
                    ];
                    var size = sum(lengths) / lengths.length;
                    var score = scorePattern({
                        x: Math.round(x),
                        y: Math.round(y)
                    }, [
                        1,
                        1,
                        3,
                        1,
                        1
                    ], matrix);
                    return {
                        score: score,
                        x: x,
                        y: y,
                        size: size
                    };
                }).filter(function(q) {
                    return !!q;
                }) // Filter out any rejected quads from above
                .sort(function(a, b) {
                    return a.score - b.score;
                })// Now take the top finder pattern options and try to find 2 other options with a similar size.
                .map(function(point, i, finderPatterns) {
                    if (i > MAX_FINDERPATTERNS_TO_SEARCH) {
                        return null;
                    }
                    var otherPoints = finderPatterns.filter(function(p, ii) {
                        return i !== ii;
                    }).map(function(p) {
                        return {
                            x: p.x,
                            y: p.y,
                            score: p.score + Math.pow(p.size - point.size, 2) / point.size,
                            size: p.size
                        };
                    }).sort(function(a, b) {
                        return a.score - b.score;
                    });
                    if (otherPoints.length < 2) {
                        return null;
                    }
                    var score = point.score + otherPoints[0].score + otherPoints[1].score;
                    return {
                        points: [
                            point
                        ].concat(otherPoints.slice(0, 2)),
                        score: score
                    };
                }).filter(function(q) {
                    return !!q;
                }) // Filter out any rejected finder patterns from above
                .sort(function(a, b) {
                    return a.score - b.score;
                });
                if (finderPatternGroups.length === 0) {
                    return null;
                }
                var _a = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]), topRight = _a.topRight, topLeft = _a.topLeft, bottomLeft = _a.bottomLeft;
                var alignment = findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft);
                var result = [];
                if (alignment) {
                    result.push({
                        alignmentPattern: {
                            x: alignment.alignmentPattern.x,
                            y: alignment.alignmentPattern.y
                        },
                        bottomLeft: {
                            x: bottomLeft.x,
                            y: bottomLeft.y
                        },
                        dimension: alignment.dimension,
                        topLeft: {
                            x: topLeft.x,
                            y: topLeft.y
                        },
                        topRight: {
                            x: topRight.x,
                            y: topRight.y
                        }
                    });
                }
                // We normally use the center of the quads as the location of the tracking points, which is optimal for most cases and will account
                // for a skew in the image. However, In some cases, a slight skew might not be real and instead be caused by image compression
                // errors and/or low resolution. For those cases, we'd be better off centering the point exactly in the middle of the black area. We
                // compute and return the location data for the naively centered points as it is little additional work and allows for multiple
                // attempts at decoding harder images.
                var midTopRight = recenterLocation(matrix, topRight);
                var midTopLeft = recenterLocation(matrix, topLeft);
                var midBottomLeft = recenterLocation(matrix, bottomLeft);
                var centeredAlignment = findAlignmentPattern(matrix, alignmentPatternQuads, midTopRight, midTopLeft, midBottomLeft);
                if (centeredAlignment) {
                    result.push({
                        alignmentPattern: {
                            x: centeredAlignment.alignmentPattern.x,
                            y: centeredAlignment.alignmentPattern.y
                        },
                        bottomLeft: {
                            x: midBottomLeft.x,
                            y: midBottomLeft.y
                        },
                        topLeft: {
                            x: midTopLeft.x,
                            y: midTopLeft.y
                        },
                        topRight: {
                            x: midTopRight.x,
                            y: midTopRight.y
                        },
                        dimension: centeredAlignment.dimension
                    });
                }
                if (result.length === 0) {
                    return null;
                }
                return result;
            }
            exports.locate = locate;
            function findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft) {
                var _a;
                // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.
                // We'll use these to help find the alignment pattern but also later when we do the extraction.
                var dimension;
                var moduleSize;
                try {
                    _a = computeDimension(topLeft, topRight, bottomLeft, matrix), dimension = _a.dimension, moduleSize = _a.moduleSize;
                } catch (e) {
                    return null;
                }
                // Now find the alignment pattern
                var bottomRightFinderPattern = {
                    x: topRight.x - topLeft.x + bottomLeft.x,
                    y: topRight.y - topLeft.y + bottomLeft.y
                };
                var modulesBetweenFinderPatterns = (distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize;
                var correctionToTopLeft = 1 - 3 / modulesBetweenFinderPatterns;
                var expectedAlignmentPattern = {
                    x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),
                    y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y)
                };
                var alignmentPatterns = alignmentPatternQuads.map(function(q) {
                    var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                    var y = (q.top.y + q.bottom.y + 1) / 2;
                    if (!matrix.get(Math.floor(x), Math.floor(y))) {
                        return;
                    }
                    var lengths = [
                        q.top.endX - q.top.startX,
                        q.bottom.endX - q.bottom.startX,
                        q.bottom.y - q.top.y + 1
                    ];
                    var size = sum(lengths) / lengths.length;
                    var sizeScore = scorePattern({
                        x: Math.floor(x),
                        y: Math.floor(y)
                    }, [
                        1,
                        1,
                        1
                    ], matrix);
                    var score = sizeScore + distance({
                        x: x,
                        y: y
                    }, expectedAlignmentPattern);
                    return {
                        x: x,
                        y: y,
                        score: score
                    };
                }).filter(function(v) {
                    return !!v;
                }).sort(function(a, b) {
                    return a.score - b.score;
                });
                // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern
                // so we can only use our best guess.
                var alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;
                return {
                    alignmentPattern: alignmentPattern,
                    dimension: dimension
                };
            }
        /***/ }
    ])["default"];
});
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/cloud-upload.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_context__.s({
    "__iconNode": (()=>__iconNode),
    "default": (()=>CloudUpload)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-ssr] (ecmascript)");
;
const __iconNode = [
    [
        "path",
        {
            d: "M12 13v8",
            key: "1l5pq0"
        }
    ],
    [
        "path",
        {
            d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242",
            key: "1pljnt"
        }
    ],
    [
        "path",
        {
            d: "m8 17 4-4 4 4",
            key: "1quai1"
        }
    ]
];
const CloudUpload = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])("CloudUpload", __iconNode);
;
 //# sourceMappingURL=cloud-upload.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/cloud-upload.js [app-ssr] (ecmascript) <export default as UploadCloud>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "UploadCloud": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$cloud$2d$upload$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$cloud$2d$upload$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/cloud-upload.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/circle-alert.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_context__.s({
    "__iconNode": (()=>__iconNode),
    "default": (()=>CircleAlert)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-ssr] (ecmascript)");
;
const __iconNode = [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12",
            y1: "8",
            y2: "12",
            key: "1pkeuh"
        }
    ],
    [
        "line",
        {
            x1: "12",
            x2: "12.01",
            y1: "16",
            y2: "16",
            key: "4dfq90"
        }
    ]
];
const CircleAlert = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])("CircleAlert", __iconNode);
;
 //# sourceMappingURL=circle-alert.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/circle-alert.js [app-ssr] (ecmascript) <export default as AlertCircle>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AlertCircle": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$circle$2d$alert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$circle$2d$alert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/circle-alert.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/circle-check.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_context__.s({
    "__iconNode": (()=>__iconNode),
    "default": (()=>CircleCheck)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-ssr] (ecmascript)");
;
const __iconNode = [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m9 12 2 2 4-4",
            key: "dzmm74"
        }
    ]
];
const CircleCheck = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])("CircleCheck", __iconNode);
;
 //# sourceMappingURL=circle-check.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/circle-check.js [app-ssr] (ecmascript) <export default as CheckCircle2>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CheckCircle2": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$circle$2d$check$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$circle$2d$check$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/circle-check.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/circle-x.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_context__.s({
    "__iconNode": (()=>__iconNode),
    "default": (()=>CircleX)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-ssr] (ecmascript)");
;
const __iconNode = [
    [
        "circle",
        {
            cx: "12",
            cy: "12",
            r: "10",
            key: "1mglay"
        }
    ],
    [
        "path",
        {
            d: "m15 9-6 6",
            key: "1uzhvr"
        }
    ],
    [
        "path",
        {
            d: "m9 9 6 6",
            key: "z0biqf"
        }
    ]
];
const CircleX = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])("CircleX", __iconNode);
;
 //# sourceMappingURL=circle-x.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/circle-x.js [app-ssr] (ecmascript) <export default as XCircle>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "XCircle": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$circle$2d$x$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$circle$2d$x$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/circle-x.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/triangle-alert.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_context__.s({
    "__iconNode": (()=>__iconNode),
    "default": (()=>TriangleAlert)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-ssr] (ecmascript)");
;
const __iconNode = [
    [
        "path",
        {
            d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",
            key: "wmoenq"
        }
    ],
    [
        "path",
        {
            d: "M12 9v4",
            key: "juzpu7"
        }
    ],
    [
        "path",
        {
            d: "M12 17h.01",
            key: "p32p05"
        }
    ]
];
const TriangleAlert = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])("TriangleAlert", __iconNode);
;
 //# sourceMappingURL=triangle-alert.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/triangle-alert.js [app-ssr] (ecmascript) <export default as AlertTriangle>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AlertTriangle": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$triangle$2d$alert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$triangle$2d$alert$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/triangle-alert.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/shield-question.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_context__.s({
    "__iconNode": (()=>__iconNode),
    "default": (()=>ShieldQuestion)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-ssr] (ecmascript)");
;
const __iconNode = [
    [
        "path",
        {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
        }
    ],
    [
        "path",
        {
            d: "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3",
            key: "mhlwft"
        }
    ],
    [
        "path",
        {
            d: "M12 17h.01",
            key: "p32p05"
        }
    ]
];
const ShieldQuestion = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])("ShieldQuestion", __iconNode);
;
 //# sourceMappingURL=shield-question.js.map
}}),
"[project]/node_modules/lucide-react/dist/esm/icons/shield-question.js [app-ssr] (ecmascript) <export default as ShieldQuestion>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ShieldQuestion": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$shield$2d$question$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$shield$2d$question$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lucide-react/dist/esm/icons/shield-question.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@radix-ui/react-id/dist/index.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// packages/react/id/src/id.tsx
__turbopack_context__.s({
    "useId": (()=>useId)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$layout$2d$effect$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs [app-ssr] (ecmascript)");
;
;
var useReactId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useId".toString()] || (()=>void 0);
var count = 0;
function useId(deterministicId) {
    const [id, setId] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(useReactId());
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$layout$2d$effect$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useLayoutEffect"])(()=>{
        if (!deterministicId) setId((reactId)=>reactId ?? String(count++));
    }, [
        deterministicId
    ]);
    return deterministicId || (id ? `radix-${id}` : "");
}
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-direction/dist/index.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// packages/react/direction/src/Direction.tsx
__turbopack_context__.s({
    "DirectionProvider": (()=>DirectionProvider),
    "Provider": (()=>Provider),
    "useDirection": (()=>useDirection)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
;
;
var DirectionContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createContext"])(void 0);
var DirectionProvider = (props)=>{
    const { dir, children } = props;
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DirectionContext.Provider, {
        value: dir,
        children
    });
};
function useDirection(localDir) {
    const globalDir = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useContext"])(DirectionContext);
    return localDir || globalDir || "ltr";
}
var Provider = DirectionProvider;
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-roving-focus/dist/index.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Item": (()=>Item),
    "Root": (()=>Root),
    "RovingFocusGroup": (()=>RovingFocusGroup),
    "RovingFocusGroupItem": (()=>RovingFocusGroupItem),
    "createRovingFocusGroupScope": (()=>createRovingFocusGroupScope)
});
// packages/react/roving-focus/src/roving-focus-group.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/primitive/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-collection/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$compose$2d$refs$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-compose-refs/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$context$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-context/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$id$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-id/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-primitive/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$callback$2d$ref$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$controllable$2d$state$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$direction$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-direction/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
"use client";
;
;
;
;
;
;
;
;
;
;
;
var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
var EVENT_OPTIONS = {
    bubbles: false,
    cancelable: true
};
var GROUP_NAME = "RovingFocusGroup";
var [Collection, useCollection, createCollectionScope] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$collection$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createCollection"])(GROUP_NAME);
var [createRovingFocusGroupContext, createRovingFocusGroupScope] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$context$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createContextScope"])(GROUP_NAME, [
    createCollectionScope
]);
var [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME);
var RovingFocusGroup = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Collection.Provider, {
        scope: props.__scopeRovingFocusGroup,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Collection.Slot, {
            scope: props.__scopeRovingFocusGroup,
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(RovingFocusGroupImpl, {
                ...props,
                ref: forwardedRef
            })
        })
    });
});
RovingFocusGroup.displayName = GROUP_NAME;
var RovingFocusGroupImpl = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeRovingFocusGroup, orientation, loop = false, dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId, onCurrentTabStopIdChange, onEntryFocus, preventScrollOnEntryFocus = false, ...groupProps } = props;
    const ref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(null);
    const composedRefs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$compose$2d$refs$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useComposedRefs"])(forwardedRef, ref);
    const direction = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$direction$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useDirection"])(dir);
    const [currentTabStopId = null, setCurrentTabStopId] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$controllable$2d$state$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useControllableState"])({
        prop: currentTabStopIdProp,
        defaultProp: defaultCurrentTabStopId,
        onChange: onCurrentTabStopIdChange
    });
    const [isTabbingBackOut, setIsTabbingBackOut] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(false);
    const handleEntryFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$callback$2d$ref$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallbackRef"])(onEntryFocus);
    const getItems = useCollection(__scopeRovingFocusGroup);
    const isClickFocusRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(false);
    const [focusableItemsCount, setFocusableItemsCount] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(0);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const node = ref.current;
        if (node) {
            node.addEventListener(ENTRY_FOCUS, handleEntryFocus);
            return ()=>node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
        }
    }, [
        handleEntryFocus
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(RovingFocusProvider, {
        scope: __scopeRovingFocusGroup,
        orientation,
        dir: direction,
        loop,
        currentTabStopId,
        onItemFocus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((tabStopId)=>setCurrentTabStopId(tabStopId), [
            setCurrentTabStopId
        ]),
        onItemShiftTab: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])(()=>setIsTabbingBackOut(true), []),
        onFocusableItemAdd: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])(()=>setFocusableItemsCount((prevCount)=>prevCount + 1), []),
        onFocusableItemRemove: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])(()=>setFocusableItemsCount((prevCount)=>prevCount - 1), []),
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Primitive"].div, {
            tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
            "data-orientation": orientation,
            ...groupProps,
            ref: composedRefs,
            style: {
                outline: "none",
                ...props.style
            },
            onMouseDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onMouseDown, ()=>{
                isClickFocusRef.current = true;
            }),
            onFocus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onFocus, (event)=>{
                const isKeyboardFocus = !isClickFocusRef.current;
                if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
                    const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);
                    event.currentTarget.dispatchEvent(entryFocusEvent);
                    if (!entryFocusEvent.defaultPrevented) {
                        const items = getItems().filter((item)=>item.focusable);
                        const activeItem = items.find((item)=>item.active);
                        const currentItem = items.find((item)=>item.id === currentTabStopId);
                        const candidateItems = [
                            activeItem,
                            currentItem,
                            ...items
                        ].filter(Boolean);
                        const candidateNodes = candidateItems.map((item)=>item.ref.current);
                        focusFirst(candidateNodes, preventScrollOnEntryFocus);
                    }
                }
                isClickFocusRef.current = false;
            }),
            onBlur: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onBlur, ()=>setIsTabbingBackOut(false))
        })
    });
});
var ITEM_NAME = "RovingFocusGroupItem";
var RovingFocusGroupItem = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeRovingFocusGroup, focusable = true, active = false, tabStopId, ...itemProps } = props;
    const autoId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$id$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useId"])();
    const id = tabStopId || autoId;
    const context = useRovingFocusContext(ITEM_NAME, __scopeRovingFocusGroup);
    const isCurrentTabStop = context.currentTabStopId === id;
    const getItems = useCollection(__scopeRovingFocusGroup);
    const { onFocusableItemAdd, onFocusableItemRemove } = context;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        if (focusable) {
            onFocusableItemAdd();
            return ()=>onFocusableItemRemove();
        }
    }, [
        focusable,
        onFocusableItemAdd,
        onFocusableItemRemove
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Collection.ItemSlot, {
        scope: __scopeRovingFocusGroup,
        id,
        focusable,
        active,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Primitive"].span, {
            tabIndex: isCurrentTabStop ? 0 : -1,
            "data-orientation": context.orientation,
            ...itemProps,
            ref: forwardedRef,
            onMouseDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onMouseDown, (event)=>{
                if (!focusable) event.preventDefault();
                else context.onItemFocus(id);
            }),
            onFocus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onFocus, ()=>context.onItemFocus(id)),
            onKeyDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onKeyDown, (event)=>{
                if (event.key === "Tab" && event.shiftKey) {
                    context.onItemShiftTab();
                    return;
                }
                if (event.target !== event.currentTarget) return;
                const focusIntent = getFocusIntent(event, context.orientation, context.dir);
                if (focusIntent !== void 0) {
                    if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) return;
                    event.preventDefault();
                    const items = getItems().filter((item)=>item.focusable);
                    let candidateNodes = items.map((item)=>item.ref.current);
                    if (focusIntent === "last") candidateNodes.reverse();
                    else if (focusIntent === "prev" || focusIntent === "next") {
                        if (focusIntent === "prev") candidateNodes.reverse();
                        const currentIndex = candidateNodes.indexOf(event.currentTarget);
                        candidateNodes = context.loop ? wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                    }
                    setTimeout(()=>focusFirst(candidateNodes));
                }
            })
        })
    });
});
RovingFocusGroupItem.displayName = ITEM_NAME;
var MAP_KEY_TO_FOCUS_INTENT = {
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
};
function getDirectionAwareKey(key, dir) {
    if (dir !== "rtl") return key;
    return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
}
function getFocusIntent(event, orientation, dir) {
    const key = getDirectionAwareKey(event.key, dir);
    if (orientation === "vertical" && [
        "ArrowLeft",
        "ArrowRight"
    ].includes(key)) return void 0;
    if (orientation === "horizontal" && [
        "ArrowUp",
        "ArrowDown"
    ].includes(key)) return void 0;
    return MAP_KEY_TO_FOCUS_INTENT[key];
}
function focusFirst(candidates, preventScroll = false) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates){
        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
        candidate.focus({
            preventScroll
        });
        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
    }
}
function wrapArray(array, startIndex) {
    return array.map((_, index)=>array[(startIndex + index) % array.length]);
}
var Root = RovingFocusGroup;
var Item = RovingFocusGroupItem;
;
 //# sourceMappingURL=index.mjs.map
}}),
"[project]/node_modules/@radix-ui/react-tabs/dist/index.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Content": (()=>Content),
    "List": (()=>List),
    "Root": (()=>Root2),
    "Tabs": (()=>Tabs),
    "TabsContent": (()=>TabsContent),
    "TabsList": (()=>TabsList),
    "TabsTrigger": (()=>TabsTrigger),
    "Trigger": (()=>Trigger),
    "createTabsScope": (()=>createTabsScope)
});
// packages/react/tabs/src/tabs.tsx
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/primitive/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$context$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-context/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$roving$2d$focus$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-roving-focus/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$presence$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-presence/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-primitive/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$direction$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-direction/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$controllable$2d$state$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$id$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@radix-ui/react-id/dist/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
"use client";
;
;
;
;
;
;
;
;
;
;
;
var TABS_NAME = "Tabs";
var [createTabsContext, createTabsScope] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$context$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createContextScope"])(TABS_NAME, [
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$roving$2d$focus$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRovingFocusGroupScope"]
]);
var useRovingFocusGroupScope = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$roving$2d$focus$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createRovingFocusGroupScope"])();
var [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
var Tabs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeTabs, value: valueProp, onValueChange, defaultValue, orientation = "horizontal", dir, activationMode = "automatic", ...tabsProps } = props;
    const direction = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$direction$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useDirection"])(dir);
    const [value, setValue] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$use$2d$controllable$2d$state$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useControllableState"])({
        prop: valueProp,
        onChange: onValueChange,
        defaultProp: defaultValue
    });
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(TabsProvider, {
        scope: __scopeTabs,
        baseId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$id$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useId"])(),
        value,
        onValueChange: setValue,
        orientation,
        dir: direction,
        activationMode,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Primitive"].div, {
            dir: direction,
            "data-orientation": orientation,
            ...tabsProps,
            ref: forwardedRef
        })
    });
});
Tabs.displayName = TABS_NAME;
var TAB_LIST_NAME = "TabsList";
var TabsList = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeTabs, loop = true, ...listProps } = props;
    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$roving$2d$focus$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Root"], {
        asChild: true,
        ...rovingFocusGroupScope,
        orientation: context.orientation,
        dir: context.dir,
        loop,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Primitive"].div, {
            role: "tablist",
            "aria-orientation": context.orientation,
            ...listProps,
            ref: forwardedRef
        })
    });
});
TabsList.displayName = TAB_LIST_NAME;
var TRIGGER_NAME = "TabsTrigger";
var TabsTrigger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;
    const context = useTabsContext(TRIGGER_NAME, __scopeTabs);
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$roving$2d$focus$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Item"], {
        asChild: true,
        ...rovingFocusGroupScope,
        focusable: !disabled,
        active: isSelected,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Primitive"].button, {
            type: "button",
            role: "tab",
            "aria-selected": isSelected,
            "aria-controls": contentId,
            "data-state": isSelected ? "active" : "inactive",
            "data-disabled": disabled ? "" : void 0,
            disabled,
            id: triggerId,
            ...triggerProps,
            ref: forwardedRef,
            onMouseDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onMouseDown, (event)=>{
                if (!disabled && event.button === 0 && event.ctrlKey === false) {
                    context.onValueChange(value);
                } else {
                    event.preventDefault();
                }
            }),
            onKeyDown: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onKeyDown, (event)=>{
                if ([
                    " ",
                    "Enter"
                ].includes(event.key)) context.onValueChange(value);
            }),
            onFocus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["composeEventHandlers"])(props.onFocus, ()=>{
                const isAutomaticActivation = context.activationMode !== "manual";
                if (!isSelected && !disabled && isAutomaticActivation) {
                    context.onValueChange(value);
                }
            })
        })
    });
});
TabsTrigger.displayName = TRIGGER_NAME;
var CONTENT_NAME = "TabsContent";
var TabsContent = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])((props, forwardedRef)=>{
    const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
    const context = useTabsContext(CONTENT_NAME, __scopeTabs);
    const triggerId = makeTriggerId(context.baseId, value);
    const contentId = makeContentId(context.baseId, value);
    const isSelected = value === context.value;
    const isMountAnimationPreventedRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(isSelected);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const rAF = requestAnimationFrame(()=>isMountAnimationPreventedRef.current = false);
        return ()=>cancelAnimationFrame(rAF);
    }, []);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$presence$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Presence"], {
        present: forceMount || isSelected,
        children: ({ present })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$radix$2d$ui$2f$react$2d$primitive$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Primitive"].div, {
                "data-state": isSelected ? "active" : "inactive",
                "data-orientation": context.orientation,
                role: "tabpanel",
                "aria-labelledby": triggerId,
                hidden: !present,
                id: contentId,
                tabIndex: 0,
                ...contentProps,
                ref: forwardedRef,
                style: {
                    ...props.style,
                    animationDuration: isMountAnimationPreventedRef.current ? "0s" : void 0
                },
                children: present && children
            })
    });
});
TabsContent.displayName = CONTENT_NAME;
function makeTriggerId(baseId, value) {
    return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
    return `${baseId}-content-${value}`;
}
var Root2 = Tabs;
var List = TabsList;
var Trigger = TabsTrigger;
var Content = TabsContent;
;
 //# sourceMappingURL=index.mjs.map
}}),

};

//# sourceMappingURL=node_modules_70b3e930._.js.map