{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/url-safety-checker.ts"],"sourcesContent":["/**\n * Represents the safety status of a URL.\n */\nexport type SafetyStatus = 'Safe' | 'Unsafe' | 'Warning' | 'Unknown';\n\n/**\n * Represents the result of a URL safety check.\n */\nexport interface SafetyCheckResult {\n  /**\n   * The safety status of the URL.\n   */\n  safetyStatus: SafetyStatus;\n  /**\n   * A message providing more details about the safety status.\n   */\n  message?: string;\n}\n\n/**\n * Asynchronously checks the safety of a given URL.\n * This is a MOCKED implementation for frontend demonstration.\n * In a real application, this logic would be within a backend service\n * (like a Firebase Function) calling a real safety API.\n *\n * @param url The URL to check.\n * @returns A promise that resolves to a SafetyCheckResult object.\n */\nexport async function checkUrlSafety(url: string): Promise<SafetyCheckResult> {\n  console.log(`[Mock Service] Checking URL: ${url}`);\n\n  // Simulate network delay\n  // await new Promise(resolve => setTimeout(resolve, 1000)); // Removed, delay handled in action\n\n  // Validate URL format crudely for the mock\n  try {\n    new URL(url); // Basic validation\n  } catch (_) {\n    console.log('[Mock Service] Invalid URL format detected');\n    // throw new Error(\"Invalid URL format provided to checker.\"); // Let zod handle validation primarily\n     return { safetyStatus: 'Unknown', message: 'Invalid URL format provided.' };\n  }\n\n\n  // Mock different responses based on the URL content\n  if (url.includes('google.com') || url.includes('picsum.photos') || url.includes('safe-site.com')) {\n    console.log('[Mock Service] URL classified as Safe');\n    return {\n      safetyStatus: 'Safe',\n      message: 'This URL is known to be safe based on our checks.',\n    };\n  }\n\n  if (url.includes('malicious-site.com') || url.includes('phishing')) {\n    console.log('[Mock Service] URL classified as Unsafe');\n    return {\n      safetyStatus: 'Unsafe',\n      message: 'Warning! This URL is flagged as potentially malicious or involved in phishing activities.',\n    };\n  }\n\n  if (url.includes('potentially-unsafe') || url.includes('download.net')) {\n     console.log('[Mock Service] URL classified as Warning');\n    return {\n      safetyStatus: 'Warning',\n      message: 'Caution! This URL may lead to unwanted software or suspicious content. Proceed with care.',\n    };\n  }\n\n  if (url.includes('shortened-url')) {\n     console.log('[Mock Service] URL classified as Unknown (shortened)');\n    return {\n        safetyStatus: 'Unknown',\n        message: 'This is a shortened URL. We cannot determine the safety of the final destination without following it.',\n      };\n  }\n\n   // Default to Unknown for other valid URLs\n   console.log('[Mock Service] URL classification is Unknown');\n   return {\n     safetyStatus: 'Unknown',\n     message: 'The safety status of this URL could not be determined.',\n   };\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AA0BM,eAAe,eAAe,GAAW;IAC9C,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,KAAK;IAEjD,yBAAyB;IACzB,+FAA+F;IAE/F,2CAA2C;IAC3C,IAAI;QACF,IAAI,IAAI,MAAM,mBAAmB;IACnC,EAAE,OAAO,GAAG;QACV,QAAQ,GAAG,CAAC;QACZ,qGAAqG;QACpG,OAAO;YAAE,cAAc;YAAW,SAAS;QAA+B;IAC7E;IAGA,oDAAoD;IACpD,IAAI,IAAI,QAAQ,CAAC,iBAAiB,IAAI,QAAQ,CAAC,oBAAoB,IAAI,QAAQ,CAAC,kBAAkB;QAChG,QAAQ,GAAG,CAAC;QACZ,OAAO;YACL,cAAc;YACd,SAAS;QACX;IACF;IAEA,IAAI,IAAI,QAAQ,CAAC,yBAAyB,IAAI,QAAQ,CAAC,aAAa;QAClE,QAAQ,GAAG,CAAC;QACZ,OAAO;YACL,cAAc;YACd,SAAS;QACX;IACF;IAEA,IAAI,IAAI,QAAQ,CAAC,yBAAyB,IAAI,QAAQ,CAAC,iBAAiB;QACrE,QAAQ,GAAG,CAAC;QACb,OAAO;YACL,cAAc;YACd,SAAS;QACX;IACF;IAEA,IAAI,IAAI,QAAQ,CAAC,kBAAkB;QAChC,QAAQ,GAAG,CAAC;QACb,OAAO;YACH,cAAc;YACd,SAAS;QACX;IACJ;IAEC,0CAA0C;IAC1C,QAAQ,GAAG,CAAC;IACZ,OAAO;QACL,cAAc;QACd,SAAS;IACX;AACH","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { checkUrlSafety, type SafetyCheckResult } from '@/services/url-safety-checker';\n\nconst urlSchema = z.string().url({ message: \"Invalid URL format.\" });\n\n// Define the state shape returned by the action\ninterface CheckUrlState {\n  result?: SafetyCheckResult & { originalUrl: string };\n  error?: string;\n  // loading is no longer needed here, useActionState provides pending state\n}\n\nexport async function checkUrlAction(\n  // The previous state is the first argument\n  prevState: CheckUrlState | null,\n  formData: FormData,\n): Promise<CheckUrlState> {\n  const urlInput = formData.get('url') as string | null;\n\n  if (!urlInput) {\n    // Return the error state, no loading needed\n    return { error: \"URL is required.\" };\n  }\n\n  try {\n    const validatedUrl = urlSchema.parse(urlInput);\n\n    console.log(`Checking URL: ${validatedUrl}`); // Add logging\n    // Simulate API call delay (optional, can be removed if handled by pending state visually)\n    // await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // In a real app, this would call the backend service (e.g., Firebase Function)\n    // which then calls the external safety API.\n    // For this example, we'll use the mocked service directly.\n    const safetyResult = await checkUrlSafety(validatedUrl);\n    console.log(`Safety Result: ${JSON.stringify(safetyResult)}`); // Add logging\n\n    // Return the success state with the result\n    return {\n      result: { ...safetyResult, originalUrl: validatedUrl },\n    };\n  } catch (error) {\n    console.error(\"Error checking URL:\", error); // Add logging\n    if (error instanceof z.ZodError) {\n      // Return the error state with validation message\n      return { error: error.errors[0]?.message || \"Invalid URL format.\" };\n    }\n    // Handle other potential errors (network, API errors from checkUrlSafety)\n    // Return the generic error state\n    return { error: \"An error occurred while checking the URL.\" };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEA,MAAM,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAAE,SAAS;AAAsB;AAS3D,eAAe,uCAAY,GAAZ,eACpB,2CAA2C;AAC3C,SAA+B,EAC/B,QAAkB;IAElB,MAAM,WAAW,SAAS,GAAG,CAAC;IAE9B,IAAI,CAAC,UAAU;QACb,4CAA4C;QAC5C,OAAO;YAAE,OAAO;QAAmB;IACrC;IAEA,IAAI;QACF,MAAM,eAAe,UAAU,KAAK,CAAC;QAErC,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,cAAc,GAAG,cAAc;QAC5D,0FAA0F;QAC1F,2DAA2D;QAE3D,+EAA+E;QAC/E,4CAA4C;QAC5C,2DAA2D;QAC3D,MAAM,eAAe,MAAM,CAAA,GAAA,2IAAA,CAAA,iBAAc,AAAD,EAAE;QAC1C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,KAAK,SAAS,CAAC,eAAe,GAAG,cAAc;QAE7E,2CAA2C;QAC3C,OAAO;YACL,QAAQ;gBAAE,GAAG,YAAY;gBAAE,aAAa;YAAa;QACvD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB,QAAQ,cAAc;QAC3D,IAAI,iBAAiB,oIAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,iDAAiD;YACjD,OAAO;gBAAE,OAAO,MAAM,MAAM,CAAC,EAAE,EAAE,WAAW;YAAsB;QACpE;QACA,0EAA0E;QAC1E,iCAAiC;QACjC,OAAO;YAAE,OAAO;QAA4C;IAC9D;AACF;;;IAvCsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}