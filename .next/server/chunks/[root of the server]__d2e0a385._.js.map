{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/check-url/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// --- Basic Malicious Domain Check (Demonstration) ---\n// WARNING: This is a very basic check and not a substitute for a proper safety API.\n// It only checks against a small, hardcoded list of *domains*.\n// A real implementation would need a much larger, frequently updated list.\nconst KNOWN_BAD_DOMAINS = new Set([\n    'example-malware-domain.com',\n    'phishing-site-example.net',\n    'suspicious-activity.org',\n    // Add more known malicious domains here\n]);\n// --- End Basic Check ---\n\n// Define the expected request body structure\ninterface CheckUrlRequestBody {\n  url?: string;\n}\n\n// Define the structure of the response we send back to the client\ninterface CheckUrlResponse {\n  originalUrl: string;\n  status: 'SAFE' | 'UNSAFE' | 'ERROR' | 'INVALID_URL';\n  message: string;\n}\n\nexport async function POST(request: NextRequest): Promise<NextResponse<CheckUrlResponse | { error: string }>> {\n\n  // 1. Parse Request Body\n  let body: CheckUrlRequestBody;\n  try {\n    body = await request.json();\n  } catch (error) {\n    return NextResponse.json({ error: 'Invalid request body. Expected JSON.' }, { status: 400 });\n  }\n\n  const urlToCheck = body.url;\n\n  // 2. Validate Input URL\n  if (!urlToCheck || typeof urlToCheck !== 'string') {\n    return NextResponse.json({ error: 'URL is required in the request body.' }, { status: 400 });\n  }\n\n  let parsedUrl: URL;\n  try {\n    parsedUrl = new URL(urlToCheck);\n  } catch (_) {\n    console.warn(`Invalid URL format received: ${urlToCheck}`);\n    return NextResponse.json({\n        originalUrl: urlToCheck,\n        status: 'INVALID_URL',\n        message: 'The provided text is not a valid URL format.',\n    } as CheckUrlResponse , { status: 200 }); // Still a successful API call, but invalid input\n  }\n\n  // 3. Perform Basic Domain Check\n  try {\n    const hostname = parsedUrl.hostname;\n    console.log(`Checking hostname: ${hostname}`);\n\n    let safetyStatus: CheckUrlResponse['status'] = 'SAFE';\n    // Default message assumes safety but highlights the check's limitation\n    let message = 'Domain not found on our basic list of known threats. Always exercise caution.';\n\n    // Check against the known bad domains list\n    if (KNOWN_BAD_DOMAINS.has(hostname.toLowerCase())) {\n      safetyStatus = 'UNSAFE';\n      message = `Warning: The domain '${hostname}' is on a list of known threats. Avoid visiting this URL.`;\n      console.warn(`Malicious domain detected: ${hostname}`);\n    } else {\n        console.log(`Domain ${hostname} not found in the basic threat list.`);\n    }\n\n    // Return the processed result to the client\n    return NextResponse.json({\n      originalUrl: urlToCheck,\n      status: safetyStatus,\n      message: message,\n    });\n\n  } catch (error: any) {\n    console.error('Error during basic domain check:', error);\n    return NextResponse.json({\n        originalUrl: urlToCheck,\n        status: 'ERROR',\n        message: 'An unexpected error occurred while checking the URL.',\n    });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,uDAAuD;AACvD,oFAAoF;AACpF,+DAA+D;AAC/D,2EAA2E;AAC3E,MAAM,oBAAoB,IAAI,IAAI;IAC9B;IACA;IACA;CAEH;AAeM,eAAe,KAAK,OAAoB;IAE7C,wBAAwB;IACxB,IAAI;IACJ,IAAI;QACF,OAAO,MAAM,QAAQ,IAAI;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuC,GAAG;YAAE,QAAQ;QAAI;IAC5F;IAEA,MAAM,aAAa,KAAK,GAAG;IAE3B,wBAAwB;IACxB,IAAI,CAAC,cAAc,OAAO,eAAe,UAAU;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuC,GAAG;YAAE,QAAQ;QAAI;IAC5F;IAEA,IAAI;IACJ,IAAI;QACF,YAAY,IAAI,IAAI;IACtB,EAAE,OAAO,GAAG;QACV,QAAQ,IAAI,CAAC,CAAC,6BAA6B,EAAE,YAAY;QACzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,aAAa;YACb,QAAQ;YACR,SAAS;QACb,GAAwB;YAAE,QAAQ;QAAI,IAAI,iDAAiD;IAC7F;IAEA,gCAAgC;IAChC,IAAI;QACF,MAAM,WAAW,UAAU,QAAQ;QACnC,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,UAAU;QAE5C,IAAI,eAA2C;QAC/C,uEAAuE;QACvE,IAAI,UAAU;QAEd,2CAA2C;QAC3C,IAAI,kBAAkB,GAAG,CAAC,SAAS,WAAW,KAAK;YACjD,eAAe;YACf,UAAU,CAAC,qBAAqB,EAAE,SAAS,yDAAyD,CAAC;YACrG,QAAQ,IAAI,CAAC,CAAC,2BAA2B,EAAE,UAAU;QACvD,OAAO;YACH,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,SAAS,oCAAoC,CAAC;QACxE;QAEA,4CAA4C;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,aAAa;YACb,QAAQ;YACR,SAAS;QACX;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,aAAa;YACb,QAAQ;YACR,SAAS;QACb;IACF;AACF","debugId":null}}]
}